// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserMeta user meta
// swagger:model UserMeta
type UserMeta struct {

	// delete key
	DeleteKey bool `json:"delete_key,omitempty"`

	// meta key
	// Required: true
	MetaKey *string `json:"meta_key"`

	// meta value
	// Required: true
	MetaValue *string `json:"meta_value"`

	// public info
	PublicInfo *bool `json:"public_info,omitempty"`

	// user id
	UserID int64 `json:"user_id,omitempty"`

	// user meta id
	// Minimum: 1
	UserMetaID int64 `json:"user_meta_id,omitempty"`
}

// Validate validates this user meta
func (m *UserMeta) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetaKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetaValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserMetaID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserMeta) validateMetaKey(formats strfmt.Registry) error {

	if err := validate.Required("meta_key", "body", m.MetaKey); err != nil {
		return err
	}

	return nil
}

func (m *UserMeta) validateMetaValue(formats strfmt.Registry) error {

	if err := validate.Required("meta_value", "body", m.MetaValue); err != nil {
		return err
	}

	return nil
}

func (m *UserMeta) validateUserMetaID(formats strfmt.Registry) error {

	if swag.IsZero(m.UserMetaID) { // not required
		return nil
	}

	if err := validate.MinimumInt("user_meta_id", "body", int64(m.UserMetaID), 1, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserMeta) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserMeta) UnmarshalBinary(b []byte) error {
	var res UserMeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
