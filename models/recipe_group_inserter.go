// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecipeGroupInserter recipe group inserter
// swagger:model RecipeGroupInserter
type RecipeGroupInserter struct {

	// add to group
	AddToGroup bool `json:"add_to_group,omitempty"`

	// recipe group
	// Required: true
	RecipeGroup *RecipeGroup `json:"recipe_group"`

	// recipe id
	// Minimum: 1
	RecipeID int64 `json:"recipe_id,omitempty"`

	// recipe ids
	RecipeIds []int64 `json:"recipe_ids"`

	// remove old
	RemoveOld bool `json:"remove_old,omitempty"`
}

// Validate validates this recipe group inserter
func (m *RecipeGroupInserter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRecipeGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecipeGroupInserter) validateRecipeGroup(formats strfmt.Registry) error {

	if err := validate.Required("recipe_group", "body", m.RecipeGroup); err != nil {
		return err
	}

	if m.RecipeGroup != nil {
		if err := m.RecipeGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recipe_group")
			}
			return err
		}
	}

	return nil
}

func (m *RecipeGroupInserter) validateRecipeID(formats strfmt.Registry) error {

	if swag.IsZero(m.RecipeID) { // not required
		return nil
	}

	if err := validate.MinimumInt("recipe_id", "body", int64(m.RecipeID), 1, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecipeGroupInserter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecipeGroupInserter) UnmarshalBinary(b []byte) error {
	var res RecipeGroupInserter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
