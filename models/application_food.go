// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// ApplicationFood application food
// swagger:model ApplicationFood
type ApplicationFood struct {

	// compound
	Compound bool `json:"Compound,omitempty"`

	// fat or oil
	FatOrOil bool `json:"FatOrOil,omitempty"`

	// fish
	Fish bool `json:"Fish,omitempty"`

	// seasoning
	Seasoning bool `json:"Seasoning,omitempty"`

	// active
	Active int16 `json:"active,omitempty"`

	// alcohol
	Alcohol bool `json:"alcohol,omitempty"`

	// common name
	CommonName string `json:"common_name,omitempty"`

	// default amount
	DefaultAmount float32 `json:"default_amount,omitempty"`

	// egg
	Egg bool `json:"egg,omitempty"`

	// food id
	FoodID int64 `json:"food_id,omitempty"`

	// gluten free
	GlutenFree bool `json:"gluten_free,omitempty"`

	// group id
	GroupID int64 `json:"group_id,omitempty"`

	// high generality
	HighGenerality int16 `json:"high_generality,omitempty"`

	// in usda
	InUsda int16 `json:"in_usda,omitempty"`

	// meat
	Meat bool `json:"meat,omitempty"`

	// nut
	Nut bool `json:"nut,omitempty"`

	// parent overlapping id
	ParentOverlappingID int64 `json:"parent_overlapping_id,omitempty"`

	// If this is 0, then this regex is actually a top level regex. If there are any regexes with other regexes pointing to it as their parent, then those regexes are identified as parents and will only match ingredients
	ParentRegexID int16 `json:"parent_regex_id,omitempty"`

	// priority
	Priority int64 `json:"priority,omitempty"`

	// regex
	Regex string `json:"regex,omitempty"`

	// regex id
	RegexID int64 `json:"regex_id,omitempty"`

	// sugar
	Sugar bool `json:"sugar,omitempty"`

	// temp hits
	TempHits int16 `json:"temp_hits,omitempty"`

	// units regex
	UnitsRegex string `json:"units_regex,omitempty"`

	// veg
	Veg bool `json:"veg,omitempty"`

	// vegan
	Vegan bool `json:"vegan,omitempty"`

	// zero cal
	ZeroCal int16 `json:"zero_cal,omitempty"`
}

// Validate validates this application food
func (m *ApplicationFood) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationFood) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationFood) UnmarshalBinary(b []byte) error {
	var res ApplicationFood
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
