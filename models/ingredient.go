// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Ingredient ingredient
// swagger:model Ingredient
type Ingredient struct {

	// added
	Added int64 `json:"added,omitempty"`

	// amount
	Amount float32 `json:"amount,omitempty"`

	// amount unit
	AmountUnit string `json:"amount_unit,omitempty"`

	// application regex id
	ApplicationRegexID int64 `json:"application_regex_id,omitempty"`

	// common name
	CommonName string `json:"common_name,omitempty"`

	// food id
	FoodID int64 `json:"food_id,omitempty"`

	// group id
	GroupID int64 `json:"group_id,omitempty"`

	// ingredient id
	// Minimum: 1
	IngredientID int64 `json:"ingredient_id,omitempty"`

	// ingredient line
	IngredientLine string `json:"ingredient_line,omitempty"`

	// This line isn't an ingredient, but a header, such as "For the base:" or "Possible alternatives. Headers often appear in ingredient;s lists to seperate out the ingredients list into more convenient groups.
	IsHeader bool `json:"is_header,omitempty"`

	// multiplier
	Multiplier int32 `json:"multiplier,omitempty"`

	// This is used when this ingredient is parsed 'on the fly.' If the ingredient isn't part of a recipe, stored in the DB, then this will be a unique ID which can be used to identify the ingredient for errorenous parsing purposes. The server will keep a record, in memory, of ingredients parsed along with this id, so later a human can notify the server when a parsing is wrong.
	ParseID string `json:"parse_id,omitempty"`

	// recipe id
	// Minimum: 1
	RecipeID int64 `json:"recipe_id,omitempty"`

	// result
	Result string `json:"result,omitempty"`

	// seq
	Seq int32 `json:"seq,omitempty"`
}

// Validate validates this ingredient
func (m *Ingredient) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIngredientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Ingredient) validateIngredientID(formats strfmt.Registry) error {

	if swag.IsZero(m.IngredientID) { // not required
		return nil
	}

	if err := validate.MinimumInt("ingredient_id", "body", int64(m.IngredientID), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *Ingredient) validateRecipeID(formats strfmt.Registry) error {

	if swag.IsZero(m.RecipeID) { // not required
		return nil
	}

	if err := validate.MinimumInt("recipe_id", "body", int64(m.RecipeID), 1, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Ingredient) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Ingredient) UnmarshalBinary(b []byte) error {
	var res Ingredient
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
