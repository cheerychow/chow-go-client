// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BaseNutritionAbbrevUnit base nutrition abbrev unit
// swagger:model BaseNutritionAbbrevUnit
type BaseNutritionAbbrevUnit struct {

	// alpha carot unit
	// Enum: [µg]
	AlphaCarotUnit string `json:"alpha_carot_unit,omitempty"`

	// ash unit
	// Enum: [g]
	AshUnit string `json:"ash_unit,omitempty"`

	// beta carot unit
	// Enum: [µg]
	BetaCarotUnit string `json:"beta_carot_unit,omitempty"`

	// beta crypt unit
	// Enum: [µg]
	BetaCryptUnit string `json:"beta_crypt_unit,omitempty"`

	// bioton unit
	BiotonUnit string `json:"bioton_unit,omitempty"`

	// calcium unit
	// Enum: [mg]
	CalciumUnit string `json:"calcium_unit,omitempty"`

	// calories unit
	// Enum: [kcal]
	CaloriesUnit string `json:"calories_unit,omitempty"`

	// carbs unit
	// Enum: [g]
	CarbsUnit string `json:"carbs_unit,omitempty"`

	// chloride unit
	// Enum: [g]
	ChlorideUnit string `json:"chloride_unit,omitempty"`

	// cholestrl unit
	// Enum: [mg]
	CholestrlUnit string `json:"cholestrl_unit,omitempty"`

	// choline tot unit
	// Enum: [mg]
	CholineTotUnit string `json:"choline_tot_unit,omitempty"`

	// chromium unit
	// Enum: [µg]
	ChromiumUnit string `json:"chromium_unit,omitempty"`

	// copper unit
	// Enum: [mg]
	CopperUnit string `json:"copper_unit,omitempty"`

	// fiber td unit
	// Enum: [g]
	FiberTdUnit string `json:"fiber_td_unit,omitempty"`

	// fluoride unit
	// Enum: [µg]
	FluorideUnit string `json:"fluoride_unit,omitempty"`

	// folate dfe unit
	// Enum: [µg]
	FolateDfeUnit string `json:"folate_dfe_unit,omitempty"`

	// folate tot unit
	// Enum: [µg]
	FolateTotUnit string `json:"folate_tot_unit,omitempty"`

	// folic acid unit
	// Enum: [µg]
	FolicAcidUnit string `json:"folic_acid_unit,omitempty"`

	// food folate unit
	// Enum: [µg]
	FoodFolateUnit string `json:"food_folate_unit,omitempty"`

	// iodine unit
	IodineUnit string `json:"iodine_unit,omitempty"`

	// iron unit
	// Enum: [mg]
	IronUnit string `json:"iron_unit,omitempty"`

	// lut zea unit
	// Enum: [µg]
	LutZeaUnit string `json:"lut_zea_unit,omitempty"`

	// lycopene unit
	// Enum: [µg]
	LycopeneUnit string `json:"lycopene_unit,omitempty"`

	// magnesium unit
	// Enum: [mg]
	MagnesiumUnit string `json:"magnesium_unit,omitempty"`

	// manganese unit
	// Enum: [mg]
	ManganeseUnit string `json:"manganese_unit,omitempty"`

	// molybdenum unit
	// Enum: [µg]
	MolybdenumUnit string `json:"molybdenum_unit,omitempty"`

	// mono fat unit
	// Enum: [g]
	MonoFatUnit string `json:"mono_fat_unit,omitempty"`

	// phosphorus unit
	// Enum: [mg]
	PhosphorusUnit string `json:"phosphorus_unit,omitempty"`

	// poly fat unit
	// Enum: [g]
	PolyFatUnit string `json:"poly_fat_unit,omitempty"`

	// potassium unit
	// Enum: [mg]
	PotassiumUnit string `json:"potassium_unit,omitempty"`

	// protein unit
	// Enum: [g]
	ProteinUnit string `json:"protein_unit,omitempty"`

	// retinol unit
	// Enum: [µg]
	RetinolUnit string `json:"retinol_unit,omitempty"`

	// sat fat unit
	// Enum: [g]
	SatFatUnit string `json:"sat_fat_unit,omitempty"`

	// selenium unit
	// Enum: [µg]
	SeleniumUnit string `json:"selenium_unit,omitempty"`

	// sodium unit
	// Enum: [mg]
	SodiumUnit string `json:"sodium_unit,omitempty"`

	// total fat unit
	// Enum: [g]
	TotalFatUnit string `json:"total_fat_unit,omitempty"`

	// total sugar unit
	// Enum: [g]
	TotalSugarUnit string `json:"total_sugar_unit,omitempty"`

	// vit a iu unit
	// Enum: [IU]
	VitAIuUnit string `json:"vit_a_iu_unit,omitempty"`

	// vit a rae unit
	// Enum: [µg]
	VitARaeUnit string `json:"vit_a_rae_unit,omitempty"`

	// vit b12 unit
	// Enum: [µg]
	VitB12Unit string `json:"vit_b12_unit,omitempty"`

	// vit b1 unit
	// Enum: [mg]
	VitB1Unit string `json:"vit_b1_unit,omitempty"`

	// vit b2 unit
	// Enum: [mg]
	VitB2Unit string `json:"vit_b2_unit,omitempty"`

	// vit b3 unit
	// Enum: [mg]
	VitB3Unit string `json:"vit_b3_unit,omitempty"`

	// vit b5 unit
	// Enum: [mg]
	VitB5Unit string `json:"vit_b5_unit,omitempty"`

	// vit b6 unit
	// Enum: [mg]
	VitB6Unit string `json:"vit_b6_unit,omitempty"`

	// vit c unit
	// Enum: [mg]
	VitCUnit string `json:"vit_c_unit,omitempty"`

	// vit d iu unit
	// Enum: [IU]
	VitDIuUnit string `json:"vit_d_iu_unit,omitempty"`

	// vit d mcg unit
	// Enum: [µg]
	VitDMcgUnit string `json:"vit_d_mcg_unit,omitempty"`

	// vit e unit
	// Enum: [mg]
	VitEUnit string `json:"vit_e_unit,omitempty"`

	// vit k unit
	// Enum: [µg]
	VitKUnit string `json:"vit_k_unit,omitempty"`

	// water unit
	// Enum: [g]
	WaterUnit string `json:"water_unit,omitempty"`

	// zinc unit
	// Enum: [mg]
	ZincUnit string `json:"zinc_unit,omitempty"`
}

// Validate validates this base nutrition abbrev unit
func (m *BaseNutritionAbbrevUnit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlphaCarotUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAshUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBetaCarotUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBetaCryptUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCalciumUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCaloriesUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCarbsUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChlorideUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCholestrlUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCholineTotUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChromiumUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCopperUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFiberTdUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFluorideUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFolateDfeUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFolateTotUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFolicAcidUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFoodFolateUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIronUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLutZeaUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLycopeneUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMagnesiumUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManganeseUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMolybdenumUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonoFatUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhosphorusUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolyFatUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePotassiumUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProteinUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetinolUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSatFatUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeleniumUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSodiumUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalFatUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalSugarUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitAIuUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitARaeUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitB12Unit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitB1Unit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitB2Unit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitB3Unit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitB5Unit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitB6Unit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitCUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitDIuUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitDMcgUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitEUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitKUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaterUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZincUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var baseNutritionAbbrevUnitTypeAlphaCarotUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeAlphaCarotUnitPropEnum = append(baseNutritionAbbrevUnitTypeAlphaCarotUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitAlphaCarotUnitXµg captures enum value "µg"
	BaseNutritionAbbrevUnitAlphaCarotUnitXµg string = "µg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateAlphaCarotUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeAlphaCarotUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateAlphaCarotUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.AlphaCarotUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateAlphaCarotUnitEnum("alpha_carot_unit", "body", m.AlphaCarotUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeAshUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["g"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeAshUnitPropEnum = append(baseNutritionAbbrevUnitTypeAshUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitAshUnitG captures enum value "g"
	BaseNutritionAbbrevUnitAshUnitG string = "g"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateAshUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeAshUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateAshUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.AshUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateAshUnitEnum("ash_unit", "body", m.AshUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeBetaCarotUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeBetaCarotUnitPropEnum = append(baseNutritionAbbrevUnitTypeBetaCarotUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitBetaCarotUnitXµg captures enum value "µg"
	BaseNutritionAbbrevUnitBetaCarotUnitXµg string = "µg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateBetaCarotUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeBetaCarotUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateBetaCarotUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.BetaCarotUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateBetaCarotUnitEnum("beta_carot_unit", "body", m.BetaCarotUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeBetaCryptUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeBetaCryptUnitPropEnum = append(baseNutritionAbbrevUnitTypeBetaCryptUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitBetaCryptUnitXµg captures enum value "µg"
	BaseNutritionAbbrevUnitBetaCryptUnitXµg string = "µg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateBetaCryptUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeBetaCryptUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateBetaCryptUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.BetaCryptUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateBetaCryptUnitEnum("beta_crypt_unit", "body", m.BetaCryptUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeCalciumUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeCalciumUnitPropEnum = append(baseNutritionAbbrevUnitTypeCalciumUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitCalciumUnitMg captures enum value "mg"
	BaseNutritionAbbrevUnitCalciumUnitMg string = "mg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateCalciumUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeCalciumUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateCalciumUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.CalciumUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateCalciumUnitEnum("calcium_unit", "body", m.CalciumUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeCaloriesUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kcal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeCaloriesUnitPropEnum = append(baseNutritionAbbrevUnitTypeCaloriesUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitCaloriesUnitKcal captures enum value "kcal"
	BaseNutritionAbbrevUnitCaloriesUnitKcal string = "kcal"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateCaloriesUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeCaloriesUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateCaloriesUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.CaloriesUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateCaloriesUnitEnum("calories_unit", "body", m.CaloriesUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeCarbsUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["g"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeCarbsUnitPropEnum = append(baseNutritionAbbrevUnitTypeCarbsUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitCarbsUnitG captures enum value "g"
	BaseNutritionAbbrevUnitCarbsUnitG string = "g"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateCarbsUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeCarbsUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateCarbsUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.CarbsUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateCarbsUnitEnum("carbs_unit", "body", m.CarbsUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeChlorideUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["g"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeChlorideUnitPropEnum = append(baseNutritionAbbrevUnitTypeChlorideUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitChlorideUnitG captures enum value "g"
	BaseNutritionAbbrevUnitChlorideUnitG string = "g"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateChlorideUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeChlorideUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateChlorideUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.ChlorideUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateChlorideUnitEnum("chloride_unit", "body", m.ChlorideUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeCholestrlUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeCholestrlUnitPropEnum = append(baseNutritionAbbrevUnitTypeCholestrlUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitCholestrlUnitMg captures enum value "mg"
	BaseNutritionAbbrevUnitCholestrlUnitMg string = "mg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateCholestrlUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeCholestrlUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateCholestrlUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.CholestrlUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateCholestrlUnitEnum("cholestrl_unit", "body", m.CholestrlUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeCholineTotUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeCholineTotUnitPropEnum = append(baseNutritionAbbrevUnitTypeCholineTotUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitCholineTotUnitMg captures enum value "mg"
	BaseNutritionAbbrevUnitCholineTotUnitMg string = "mg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateCholineTotUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeCholineTotUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateCholineTotUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.CholineTotUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateCholineTotUnitEnum("choline_tot_unit", "body", m.CholineTotUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeChromiumUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeChromiumUnitPropEnum = append(baseNutritionAbbrevUnitTypeChromiumUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitChromiumUnitXµg captures enum value "µg"
	BaseNutritionAbbrevUnitChromiumUnitXµg string = "µg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateChromiumUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeChromiumUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateChromiumUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.ChromiumUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateChromiumUnitEnum("chromium_unit", "body", m.ChromiumUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeCopperUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeCopperUnitPropEnum = append(baseNutritionAbbrevUnitTypeCopperUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitCopperUnitMg captures enum value "mg"
	BaseNutritionAbbrevUnitCopperUnitMg string = "mg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateCopperUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeCopperUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateCopperUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.CopperUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateCopperUnitEnum("copper_unit", "body", m.CopperUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeFiberTdUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["g"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeFiberTdUnitPropEnum = append(baseNutritionAbbrevUnitTypeFiberTdUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitFiberTdUnitG captures enum value "g"
	BaseNutritionAbbrevUnitFiberTdUnitG string = "g"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateFiberTdUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeFiberTdUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateFiberTdUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.FiberTdUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateFiberTdUnitEnum("fiber_td_unit", "body", m.FiberTdUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeFluorideUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeFluorideUnitPropEnum = append(baseNutritionAbbrevUnitTypeFluorideUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitFluorideUnitXµg captures enum value "µg"
	BaseNutritionAbbrevUnitFluorideUnitXµg string = "µg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateFluorideUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeFluorideUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateFluorideUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.FluorideUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateFluorideUnitEnum("fluoride_unit", "body", m.FluorideUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeFolateDfeUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeFolateDfeUnitPropEnum = append(baseNutritionAbbrevUnitTypeFolateDfeUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitFolateDfeUnitXµg captures enum value "µg"
	BaseNutritionAbbrevUnitFolateDfeUnitXµg string = "µg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateFolateDfeUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeFolateDfeUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateFolateDfeUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.FolateDfeUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateFolateDfeUnitEnum("folate_dfe_unit", "body", m.FolateDfeUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeFolateTotUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeFolateTotUnitPropEnum = append(baseNutritionAbbrevUnitTypeFolateTotUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitFolateTotUnitXµg captures enum value "µg"
	BaseNutritionAbbrevUnitFolateTotUnitXµg string = "µg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateFolateTotUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeFolateTotUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateFolateTotUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.FolateTotUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateFolateTotUnitEnum("folate_tot_unit", "body", m.FolateTotUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeFolicAcidUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeFolicAcidUnitPropEnum = append(baseNutritionAbbrevUnitTypeFolicAcidUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitFolicAcidUnitXµg captures enum value "µg"
	BaseNutritionAbbrevUnitFolicAcidUnitXµg string = "µg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateFolicAcidUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeFolicAcidUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateFolicAcidUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.FolicAcidUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateFolicAcidUnitEnum("folic_acid_unit", "body", m.FolicAcidUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeFoodFolateUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeFoodFolateUnitPropEnum = append(baseNutritionAbbrevUnitTypeFoodFolateUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitFoodFolateUnitXµg captures enum value "µg"
	BaseNutritionAbbrevUnitFoodFolateUnitXµg string = "µg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateFoodFolateUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeFoodFolateUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateFoodFolateUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.FoodFolateUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateFoodFolateUnitEnum("food_folate_unit", "body", m.FoodFolateUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeIronUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeIronUnitPropEnum = append(baseNutritionAbbrevUnitTypeIronUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitIronUnitMg captures enum value "mg"
	BaseNutritionAbbrevUnitIronUnitMg string = "mg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateIronUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeIronUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateIronUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.IronUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateIronUnitEnum("iron_unit", "body", m.IronUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeLutZeaUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeLutZeaUnitPropEnum = append(baseNutritionAbbrevUnitTypeLutZeaUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitLutZeaUnitXµg captures enum value "µg"
	BaseNutritionAbbrevUnitLutZeaUnitXµg string = "µg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateLutZeaUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeLutZeaUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateLutZeaUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.LutZeaUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateLutZeaUnitEnum("lut_zea_unit", "body", m.LutZeaUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeLycopeneUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeLycopeneUnitPropEnum = append(baseNutritionAbbrevUnitTypeLycopeneUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitLycopeneUnitXµg captures enum value "µg"
	BaseNutritionAbbrevUnitLycopeneUnitXµg string = "µg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateLycopeneUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeLycopeneUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateLycopeneUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.LycopeneUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateLycopeneUnitEnum("lycopene_unit", "body", m.LycopeneUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeMagnesiumUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeMagnesiumUnitPropEnum = append(baseNutritionAbbrevUnitTypeMagnesiumUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitMagnesiumUnitMg captures enum value "mg"
	BaseNutritionAbbrevUnitMagnesiumUnitMg string = "mg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateMagnesiumUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeMagnesiumUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateMagnesiumUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.MagnesiumUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateMagnesiumUnitEnum("magnesium_unit", "body", m.MagnesiumUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeManganeseUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeManganeseUnitPropEnum = append(baseNutritionAbbrevUnitTypeManganeseUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitManganeseUnitMg captures enum value "mg"
	BaseNutritionAbbrevUnitManganeseUnitMg string = "mg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateManganeseUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeManganeseUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateManganeseUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.ManganeseUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateManganeseUnitEnum("manganese_unit", "body", m.ManganeseUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeMolybdenumUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeMolybdenumUnitPropEnum = append(baseNutritionAbbrevUnitTypeMolybdenumUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitMolybdenumUnitXµg captures enum value "µg"
	BaseNutritionAbbrevUnitMolybdenumUnitXµg string = "µg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateMolybdenumUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeMolybdenumUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateMolybdenumUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.MolybdenumUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateMolybdenumUnitEnum("molybdenum_unit", "body", m.MolybdenumUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeMonoFatUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["g"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeMonoFatUnitPropEnum = append(baseNutritionAbbrevUnitTypeMonoFatUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitMonoFatUnitG captures enum value "g"
	BaseNutritionAbbrevUnitMonoFatUnitG string = "g"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateMonoFatUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeMonoFatUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateMonoFatUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.MonoFatUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateMonoFatUnitEnum("mono_fat_unit", "body", m.MonoFatUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypePhosphorusUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypePhosphorusUnitPropEnum = append(baseNutritionAbbrevUnitTypePhosphorusUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitPhosphorusUnitMg captures enum value "mg"
	BaseNutritionAbbrevUnitPhosphorusUnitMg string = "mg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validatePhosphorusUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypePhosphorusUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validatePhosphorusUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.PhosphorusUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validatePhosphorusUnitEnum("phosphorus_unit", "body", m.PhosphorusUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypePolyFatUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["g"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypePolyFatUnitPropEnum = append(baseNutritionAbbrevUnitTypePolyFatUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitPolyFatUnitG captures enum value "g"
	BaseNutritionAbbrevUnitPolyFatUnitG string = "g"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validatePolyFatUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypePolyFatUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validatePolyFatUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.PolyFatUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validatePolyFatUnitEnum("poly_fat_unit", "body", m.PolyFatUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypePotassiumUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypePotassiumUnitPropEnum = append(baseNutritionAbbrevUnitTypePotassiumUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitPotassiumUnitMg captures enum value "mg"
	BaseNutritionAbbrevUnitPotassiumUnitMg string = "mg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validatePotassiumUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypePotassiumUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validatePotassiumUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.PotassiumUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validatePotassiumUnitEnum("potassium_unit", "body", m.PotassiumUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeProteinUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["g"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeProteinUnitPropEnum = append(baseNutritionAbbrevUnitTypeProteinUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitProteinUnitG captures enum value "g"
	BaseNutritionAbbrevUnitProteinUnitG string = "g"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateProteinUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeProteinUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateProteinUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.ProteinUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateProteinUnitEnum("protein_unit", "body", m.ProteinUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeRetinolUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeRetinolUnitPropEnum = append(baseNutritionAbbrevUnitTypeRetinolUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitRetinolUnitXµg captures enum value "µg"
	BaseNutritionAbbrevUnitRetinolUnitXµg string = "µg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateRetinolUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeRetinolUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateRetinolUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.RetinolUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateRetinolUnitEnum("retinol_unit", "body", m.RetinolUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeSatFatUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["g"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeSatFatUnitPropEnum = append(baseNutritionAbbrevUnitTypeSatFatUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitSatFatUnitG captures enum value "g"
	BaseNutritionAbbrevUnitSatFatUnitG string = "g"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateSatFatUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeSatFatUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateSatFatUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.SatFatUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateSatFatUnitEnum("sat_fat_unit", "body", m.SatFatUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeSeleniumUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeSeleniumUnitPropEnum = append(baseNutritionAbbrevUnitTypeSeleniumUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitSeleniumUnitXµg captures enum value "µg"
	BaseNutritionAbbrevUnitSeleniumUnitXµg string = "µg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateSeleniumUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeSeleniumUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateSeleniumUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.SeleniumUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateSeleniumUnitEnum("selenium_unit", "body", m.SeleniumUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeSodiumUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeSodiumUnitPropEnum = append(baseNutritionAbbrevUnitTypeSodiumUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitSodiumUnitMg captures enum value "mg"
	BaseNutritionAbbrevUnitSodiumUnitMg string = "mg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateSodiumUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeSodiumUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateSodiumUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.SodiumUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateSodiumUnitEnum("sodium_unit", "body", m.SodiumUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeTotalFatUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["g"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeTotalFatUnitPropEnum = append(baseNutritionAbbrevUnitTypeTotalFatUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitTotalFatUnitG captures enum value "g"
	BaseNutritionAbbrevUnitTotalFatUnitG string = "g"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateTotalFatUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeTotalFatUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateTotalFatUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalFatUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateTotalFatUnitEnum("total_fat_unit", "body", m.TotalFatUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeTotalSugarUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["g"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeTotalSugarUnitPropEnum = append(baseNutritionAbbrevUnitTypeTotalSugarUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitTotalSugarUnitG captures enum value "g"
	BaseNutritionAbbrevUnitTotalSugarUnitG string = "g"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateTotalSugarUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeTotalSugarUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateTotalSugarUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalSugarUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateTotalSugarUnitEnum("total_sugar_unit", "body", m.TotalSugarUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeVitAIuUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IU"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeVitAIuUnitPropEnum = append(baseNutritionAbbrevUnitTypeVitAIuUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitVitAIuUnitIU captures enum value "IU"
	BaseNutritionAbbrevUnitVitAIuUnitIU string = "IU"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateVitAIuUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeVitAIuUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateVitAIuUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitAIuUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitAIuUnitEnum("vit_a_iu_unit", "body", m.VitAIuUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeVitARaeUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeVitARaeUnitPropEnum = append(baseNutritionAbbrevUnitTypeVitARaeUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitVitARaeUnitXµg captures enum value "µg"
	BaseNutritionAbbrevUnitVitARaeUnitXµg string = "µg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateVitARaeUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeVitARaeUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateVitARaeUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitARaeUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitARaeUnitEnum("vit_a_rae_unit", "body", m.VitARaeUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeVitB12UnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeVitB12UnitPropEnum = append(baseNutritionAbbrevUnitTypeVitB12UnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitVitB12UnitXµg captures enum value "µg"
	BaseNutritionAbbrevUnitVitB12UnitXµg string = "µg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateVitB12UnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeVitB12UnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateVitB12Unit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitB12Unit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitB12UnitEnum("vit_b12_unit", "body", m.VitB12Unit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeVitB1UnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeVitB1UnitPropEnum = append(baseNutritionAbbrevUnitTypeVitB1UnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitVitB1UnitMg captures enum value "mg"
	BaseNutritionAbbrevUnitVitB1UnitMg string = "mg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateVitB1UnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeVitB1UnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateVitB1Unit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitB1Unit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitB1UnitEnum("vit_b1_unit", "body", m.VitB1Unit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeVitB2UnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeVitB2UnitPropEnum = append(baseNutritionAbbrevUnitTypeVitB2UnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitVitB2UnitMg captures enum value "mg"
	BaseNutritionAbbrevUnitVitB2UnitMg string = "mg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateVitB2UnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeVitB2UnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateVitB2Unit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitB2Unit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitB2UnitEnum("vit_b2_unit", "body", m.VitB2Unit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeVitB3UnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeVitB3UnitPropEnum = append(baseNutritionAbbrevUnitTypeVitB3UnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitVitB3UnitMg captures enum value "mg"
	BaseNutritionAbbrevUnitVitB3UnitMg string = "mg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateVitB3UnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeVitB3UnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateVitB3Unit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitB3Unit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitB3UnitEnum("vit_b3_unit", "body", m.VitB3Unit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeVitB5UnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeVitB5UnitPropEnum = append(baseNutritionAbbrevUnitTypeVitB5UnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitVitB5UnitMg captures enum value "mg"
	BaseNutritionAbbrevUnitVitB5UnitMg string = "mg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateVitB5UnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeVitB5UnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateVitB5Unit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitB5Unit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitB5UnitEnum("vit_b5_unit", "body", m.VitB5Unit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeVitB6UnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeVitB6UnitPropEnum = append(baseNutritionAbbrevUnitTypeVitB6UnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitVitB6UnitMg captures enum value "mg"
	BaseNutritionAbbrevUnitVitB6UnitMg string = "mg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateVitB6UnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeVitB6UnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateVitB6Unit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitB6Unit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitB6UnitEnum("vit_b6_unit", "body", m.VitB6Unit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeVitCUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeVitCUnitPropEnum = append(baseNutritionAbbrevUnitTypeVitCUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitVitCUnitMg captures enum value "mg"
	BaseNutritionAbbrevUnitVitCUnitMg string = "mg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateVitCUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeVitCUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateVitCUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitCUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitCUnitEnum("vit_c_unit", "body", m.VitCUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeVitDIuUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IU"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeVitDIuUnitPropEnum = append(baseNutritionAbbrevUnitTypeVitDIuUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitVitDIuUnitIU captures enum value "IU"
	BaseNutritionAbbrevUnitVitDIuUnitIU string = "IU"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateVitDIuUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeVitDIuUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateVitDIuUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitDIuUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitDIuUnitEnum("vit_d_iu_unit", "body", m.VitDIuUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeVitDMcgUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeVitDMcgUnitPropEnum = append(baseNutritionAbbrevUnitTypeVitDMcgUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitVitDMcgUnitXµg captures enum value "µg"
	BaseNutritionAbbrevUnitVitDMcgUnitXµg string = "µg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateVitDMcgUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeVitDMcgUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateVitDMcgUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitDMcgUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitDMcgUnitEnum("vit_d_mcg_unit", "body", m.VitDMcgUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeVitEUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeVitEUnitPropEnum = append(baseNutritionAbbrevUnitTypeVitEUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitVitEUnitMg captures enum value "mg"
	BaseNutritionAbbrevUnitVitEUnitMg string = "mg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateVitEUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeVitEUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateVitEUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitEUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitEUnitEnum("vit_e_unit", "body", m.VitEUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeVitKUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeVitKUnitPropEnum = append(baseNutritionAbbrevUnitTypeVitKUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitVitKUnitXµg captures enum value "µg"
	BaseNutritionAbbrevUnitVitKUnitXµg string = "µg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateVitKUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeVitKUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateVitKUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitKUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitKUnitEnum("vit_k_unit", "body", m.VitKUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeWaterUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["g"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeWaterUnitPropEnum = append(baseNutritionAbbrevUnitTypeWaterUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitWaterUnitG captures enum value "g"
	BaseNutritionAbbrevUnitWaterUnitG string = "g"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateWaterUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeWaterUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateWaterUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.WaterUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateWaterUnitEnum("water_unit", "body", m.WaterUnit); err != nil {
		return err
	}

	return nil
}

var baseNutritionAbbrevUnitTypeZincUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseNutritionAbbrevUnitTypeZincUnitPropEnum = append(baseNutritionAbbrevUnitTypeZincUnitPropEnum, v)
	}
}

const (

	// BaseNutritionAbbrevUnitZincUnitMg captures enum value "mg"
	BaseNutritionAbbrevUnitZincUnitMg string = "mg"
)

// prop value enum
func (m *BaseNutritionAbbrevUnit) validateZincUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, baseNutritionAbbrevUnitTypeZincUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BaseNutritionAbbrevUnit) validateZincUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.ZincUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateZincUnitEnum("zinc_unit", "body", m.ZincUnit); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BaseNutritionAbbrevUnit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BaseNutritionAbbrevUnit) UnmarshalBinary(b []byte) error {
	var res BaseNutritionAbbrevUnit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
