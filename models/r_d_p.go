// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RDP r d p
// swagger:model RDP
type RDP struct {

	// alpha carot
	AlphaCarot int32 `json:"alpha_carot,omitempty"`

	// alpha carot unit
	// Enum: [µg]
	AlphaCarotUnit string `json:"alpha_carot_unit,omitempty"`

	// beta carot
	BetaCarot int32 `json:"beta_carot,omitempty"`

	// beta carot unit
	// Enum: [µg]
	BetaCarotUnit string `json:"beta_carot_unit,omitempty"`

	// beta crypt
	BetaCrypt int32 `json:"beta_crypt,omitempty"`

	// beta crypt unit
	// Enum: [µg]
	BetaCryptUnit string `json:"beta_crypt_unit,omitempty"`

	// biotin unit
	// Enum: [µg]
	BiotinUnit string `json:"biotin_unit,omitempty"`

	// bioton
	Bioton int32 `json:"bioton,omitempty"`

	// calcium
	Calcium int32 `json:"calcium,omitempty"`

	// calcium unit
	// Enum: [mg]
	CalciumUnit string `json:"calcium_unit,omitempty"`

	// calories
	Calories int32 `json:"calories,omitempty"`

	// calories unit
	// Enum: [kcal]
	CaloriesUnit string `json:"calories_unit,omitempty"`

	// carbs
	Carbs int32 `json:"carbs,omitempty"`

	// carbs unit
	// Enum: [g]
	CarbsUnit string `json:"carbs_unit,omitempty"`

	// chloride
	Chloride int32 `json:"chloride,omitempty"`

	// chloride unit
	// Enum: [g]
	ChlorideUnit string `json:"chloride_unit,omitempty"`

	// cholestrl
	Cholestrl int32 `json:"cholestrl,omitempty"`

	// cholestrl unit
	// Enum: [mg]
	CholestrlUnit string `json:"cholestrl_unit,omitempty"`

	// choline tot
	CholineTot int32 `json:"choline_tot,omitempty"`

	// choline tot unit
	// Enum: [mg]
	CholineTotUnit string `json:"choline_tot_unit,omitempty"`

	// chromium
	Chromium int32 `json:"chromium,omitempty"`

	// chromium unit
	// Enum: [µg]
	ChromiumUnit string `json:"chromium_unit,omitempty"`

	// copper
	Copper int32 `json:"copper,omitempty"`

	// copper unit
	// Enum: [mg]
	CopperUnit string `json:"copper_unit,omitempty"`

	// country
	Country string `json:"country,omitempty"`

	// fiber td
	FiberTd int32 `json:"fiber_td,omitempty"`

	// fiber td unit
	// Enum: [g]
	FiberTdUnit string `json:"fiber_td_unit,omitempty"`

	// fluoride
	Fluoride int32 `json:"fluoride,omitempty"`

	// fluoride unit
	// Enum: [µg]
	FluorideUnit string `json:"fluoride_unit,omitempty"`

	// folate dfe
	FolateDfe int32 `json:"folate_dfe,omitempty"`

	// folate dfe unit
	// Enum: [µg]
	FolateDfeUnit string `json:"folate_dfe_unit,omitempty"`

	// folate tot
	FolateTot int32 `json:"folate_tot,omitempty"`

	// folate tot unit
	// Enum: [µg]
	FolateTotUnit string `json:"folate_tot_unit,omitempty"`

	// folic acid
	FolicAcid int32 `json:"folic_acid,omitempty"`

	// folic acid unit
	// Enum: [µg]
	FolicAcidUnit string `json:"folic_acid_unit,omitempty"`

	// food folate
	FoodFolate int32 `json:"food_folate,omitempty"`

	// food folate unit
	// Enum: [µg]
	FoodFolateUnit string `json:"food_folate_unit,omitempty"`

	// gender
	Gender string `json:"gender,omitempty"`

	// iodine
	Iodine int32 `json:"iodine,omitempty"`

	// iodine unit
	IodineUnit string `json:"iodine_unit,omitempty"`

	// iron
	Iron int32 `json:"iron,omitempty"`

	// iron unit
	// Enum: [mg]
	IronUnit string `json:"iron_unit,omitempty"`

	// lut zea
	LutZea int32 `json:"lut_zea,omitempty"`

	// lut zea unit
	// Enum: [µg]
	LutZeaUnit string `json:"lut_zea_unit,omitempty"`

	// lycopene
	Lycopene int32 `json:"lycopene,omitempty"`

	// lycopene unit
	// Enum: [µg]
	LycopeneUnit string `json:"lycopene_unit,omitempty"`

	// magnesium
	Magnesium int32 `json:"magnesium,omitempty"`

	// magnesium unit
	// Enum: [mg]
	MagnesiumUnit string `json:"magnesium_unit,omitempty"`

	// manganese
	Manganese int32 `json:"manganese,omitempty"`

	// manganese unit
	// Enum: [mg]
	ManganeseUnit string `json:"manganese_unit,omitempty"`

	// molybdenum
	Molybdenum int32 `json:"molybdenum,omitempty"`

	// molybdenum unit
	// Enum: [µg]
	MolybdenumUnit string `json:"molybdenum_unit,omitempty"`

	// mono fat
	MonoFat int32 `json:"mono_fat,omitempty"`

	// mono fat unit
	// Enum: [g]
	MonoFatUnit string `json:"mono_fat_unit,omitempty"`

	// phosphorus
	Phosphorus int32 `json:"phosphorus,omitempty"`

	// phosphorus unit
	// Enum: [mg]
	PhosphorusUnit string `json:"phosphorus_unit,omitempty"`

	// poly fat
	PolyFat int32 `json:"poly_fat,omitempty"`

	// poly fat unit
	// Enum: [g]
	PolyFatUnit string `json:"poly_fat_unit,omitempty"`

	// potassium
	Potassium int32 `json:"potassium,omitempty"`

	// potassium unit
	// Enum: [mg]
	PotassiumUnit string `json:"potassium_unit,omitempty"`

	// protein
	Protein int32 `json:"protein,omitempty"`

	// protein unit
	// Enum: [g]
	ProteinUnit string `json:"protein_unit,omitempty"`

	// retinol
	Retinol int32 `json:"retinol,omitempty"`

	// retinol unit
	// Enum: [µg]
	RetinolUnit string `json:"retinol_unit,omitempty"`

	// sat fat
	SatFat int32 `json:"sat_fat,omitempty"`

	// sat fat unit
	SatFatUnit string `json:"sat_fat_unit,omitempty"`

	// selenium
	Selenium int32 `json:"selenium,omitempty"`

	// selenium unit
	// Enum: [µg]
	SeleniumUnit string `json:"selenium_unit,omitempty"`

	// sodium
	Sodium int32 `json:"sodium,omitempty"`

	// sodium unit
	// Enum: [mg]
	SodiumUnit string `json:"sodium_unit,omitempty"`

	// total fat
	TotalFat int32 `json:"total_fat,omitempty"`

	// total fat unit
	// Enum: [g]
	TotalFatUnit string `json:"total_fat_unit,omitempty"`

	// total sugar
	TotalSugar int32 `json:"total_sugar,omitempty"`

	// total sugar unit
	// Enum: [g]
	TotalSugarUnit string `json:"total_sugar_unit,omitempty"`

	// vit a iu
	VitAIu int32 `json:"vit_a_iu,omitempty"`

	// vit a iu unit
	// Enum: [IU]
	VitAIuUnit string `json:"vit_a_iu_unit,omitempty"`

	// vit a rae
	VitARae int32 `json:"vit_a_rae,omitempty"`

	// vit a rae unit
	// Enum: [µg]
	VitARaeUnit string `json:"vit_a_rae_unit,omitempty"`

	// vit b1
	VitB1 int32 `json:"vit_b1,omitempty"`

	// vit b12
	VitB12 int32 `json:"vit_b12,omitempty"`

	// vit b12 unit
	// Enum: [µg]
	VitB12Unit string `json:"vit_b12_unit,omitempty"`

	// vit b1 unit
	// Enum: [mg]
	VitB1Unit string `json:"vit_b1_unit,omitempty"`

	// vit b2
	VitB2 int32 `json:"vit_b2,omitempty"`

	// vit b2 unit
	// Enum: [mg]
	VitB2Unit string `json:"vit_b2_unit,omitempty"`

	// vit b3
	VitB3 int32 `json:"vit_b3,omitempty"`

	// vit b3 unit
	// Enum: [mg]
	VitB3Unit string `json:"vit_b3_unit,omitempty"`

	// vit b5
	VitB5 int32 `json:"vit_b5,omitempty"`

	// vit b5 unit
	// Enum: [mg]
	VitB5Unit string `json:"vit_b5_unit,omitempty"`

	// vit b6
	VitB6 int32 `json:"vit_b6,omitempty"`

	// vit b6 unit
	// Enum: [mg]
	VitB6Unit string `json:"vit_b6_unit,omitempty"`

	// vit c
	VitC int32 `json:"vit_c,omitempty"`

	// vit c unit
	// Enum: [mg]
	VitCUnit string `json:"vit_c_unit,omitempty"`

	// vit d iu
	VitDIu int32 `json:"vit_d_iu,omitempty"`

	// vit d mcg
	VitDMcg int32 `json:"vit_d_mcg,omitempty"`

	// vit d mcg unit
	// Enum: [µg]
	VitDMcgUnit string `json:"vit_d_mcg_unit,omitempty"`

	// vit e
	VitE int32 `json:"vit_e,omitempty"`

	// vit e unit
	// Enum: [mg]
	VitEUnit string `json:"vit_e_unit,omitempty"`

	// vit k
	VitK int32 `json:"vit_k,omitempty"`

	// vit k unit
	// Enum: [µg]
	VitKUnit string `json:"vit_k_unit,omitempty"`

	// vivit d iu unit
	// Enum: [IU]
	VivitDIuUnit string `json:"vivit_d_iu_unit,omitempty"`

	// zinc
	Zinc int32 `json:"zinc,omitempty"`

	// zinc unit
	// Enum: [mg]
	ZincUnit string `json:"zinc_unit,omitempty"`
}

// Validate validates this r d p
func (m *RDP) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlphaCarotUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBetaCarotUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBetaCryptUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBiotinUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCalciumUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCaloriesUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCarbsUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChlorideUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCholestrlUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCholineTotUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChromiumUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCopperUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFiberTdUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFluorideUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFolateDfeUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFolateTotUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFolicAcidUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFoodFolateUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIronUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLutZeaUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLycopeneUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMagnesiumUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManganeseUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMolybdenumUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonoFatUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhosphorusUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolyFatUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePotassiumUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProteinUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetinolUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeleniumUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSodiumUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalFatUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalSugarUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitAIuUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitARaeUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitB12Unit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitB1Unit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitB2Unit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitB3Unit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitB5Unit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitB6Unit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitCUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitDMcgUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitEUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitKUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVivitDIuUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZincUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rDPTypeAlphaCarotUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeAlphaCarotUnitPropEnum = append(rDPTypeAlphaCarotUnitPropEnum, v)
	}
}

const (

	// RDPAlphaCarotUnitXµg captures enum value "µg"
	RDPAlphaCarotUnitXµg string = "µg"
)

// prop value enum
func (m *RDP) validateAlphaCarotUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeAlphaCarotUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateAlphaCarotUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.AlphaCarotUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateAlphaCarotUnitEnum("alpha_carot_unit", "body", m.AlphaCarotUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeBetaCarotUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeBetaCarotUnitPropEnum = append(rDPTypeBetaCarotUnitPropEnum, v)
	}
}

const (

	// RDPBetaCarotUnitXµg captures enum value "µg"
	RDPBetaCarotUnitXµg string = "µg"
)

// prop value enum
func (m *RDP) validateBetaCarotUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeBetaCarotUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateBetaCarotUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.BetaCarotUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateBetaCarotUnitEnum("beta_carot_unit", "body", m.BetaCarotUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeBetaCryptUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeBetaCryptUnitPropEnum = append(rDPTypeBetaCryptUnitPropEnum, v)
	}
}

const (

	// RDPBetaCryptUnitXµg captures enum value "µg"
	RDPBetaCryptUnitXµg string = "µg"
)

// prop value enum
func (m *RDP) validateBetaCryptUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeBetaCryptUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateBetaCryptUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.BetaCryptUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateBetaCryptUnitEnum("beta_crypt_unit", "body", m.BetaCryptUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeBiotinUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeBiotinUnitPropEnum = append(rDPTypeBiotinUnitPropEnum, v)
	}
}

const (

	// RDPBiotinUnitXµg captures enum value "µg"
	RDPBiotinUnitXµg string = "µg"
)

// prop value enum
func (m *RDP) validateBiotinUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeBiotinUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateBiotinUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.BiotinUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateBiotinUnitEnum("biotin_unit", "body", m.BiotinUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeCalciumUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeCalciumUnitPropEnum = append(rDPTypeCalciumUnitPropEnum, v)
	}
}

const (

	// RDPCalciumUnitMg captures enum value "mg"
	RDPCalciumUnitMg string = "mg"
)

// prop value enum
func (m *RDP) validateCalciumUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeCalciumUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateCalciumUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.CalciumUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateCalciumUnitEnum("calcium_unit", "body", m.CalciumUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeCaloriesUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kcal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeCaloriesUnitPropEnum = append(rDPTypeCaloriesUnitPropEnum, v)
	}
}

const (

	// RDPCaloriesUnitKcal captures enum value "kcal"
	RDPCaloriesUnitKcal string = "kcal"
)

// prop value enum
func (m *RDP) validateCaloriesUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeCaloriesUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateCaloriesUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.CaloriesUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateCaloriesUnitEnum("calories_unit", "body", m.CaloriesUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeCarbsUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["g"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeCarbsUnitPropEnum = append(rDPTypeCarbsUnitPropEnum, v)
	}
}

const (

	// RDPCarbsUnitG captures enum value "g"
	RDPCarbsUnitG string = "g"
)

// prop value enum
func (m *RDP) validateCarbsUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeCarbsUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateCarbsUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.CarbsUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateCarbsUnitEnum("carbs_unit", "body", m.CarbsUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeChlorideUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["g"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeChlorideUnitPropEnum = append(rDPTypeChlorideUnitPropEnum, v)
	}
}

const (

	// RDPChlorideUnitG captures enum value "g"
	RDPChlorideUnitG string = "g"
)

// prop value enum
func (m *RDP) validateChlorideUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeChlorideUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateChlorideUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.ChlorideUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateChlorideUnitEnum("chloride_unit", "body", m.ChlorideUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeCholestrlUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeCholestrlUnitPropEnum = append(rDPTypeCholestrlUnitPropEnum, v)
	}
}

const (

	// RDPCholestrlUnitMg captures enum value "mg"
	RDPCholestrlUnitMg string = "mg"
)

// prop value enum
func (m *RDP) validateCholestrlUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeCholestrlUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateCholestrlUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.CholestrlUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateCholestrlUnitEnum("cholestrl_unit", "body", m.CholestrlUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeCholineTotUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeCholineTotUnitPropEnum = append(rDPTypeCholineTotUnitPropEnum, v)
	}
}

const (

	// RDPCholineTotUnitMg captures enum value "mg"
	RDPCholineTotUnitMg string = "mg"
)

// prop value enum
func (m *RDP) validateCholineTotUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeCholineTotUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateCholineTotUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.CholineTotUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateCholineTotUnitEnum("choline_tot_unit", "body", m.CholineTotUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeChromiumUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeChromiumUnitPropEnum = append(rDPTypeChromiumUnitPropEnum, v)
	}
}

const (

	// RDPChromiumUnitXµg captures enum value "µg"
	RDPChromiumUnitXµg string = "µg"
)

// prop value enum
func (m *RDP) validateChromiumUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeChromiumUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateChromiumUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.ChromiumUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateChromiumUnitEnum("chromium_unit", "body", m.ChromiumUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeCopperUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeCopperUnitPropEnum = append(rDPTypeCopperUnitPropEnum, v)
	}
}

const (

	// RDPCopperUnitMg captures enum value "mg"
	RDPCopperUnitMg string = "mg"
)

// prop value enum
func (m *RDP) validateCopperUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeCopperUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateCopperUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.CopperUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateCopperUnitEnum("copper_unit", "body", m.CopperUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeFiberTdUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["g"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeFiberTdUnitPropEnum = append(rDPTypeFiberTdUnitPropEnum, v)
	}
}

const (

	// RDPFiberTdUnitG captures enum value "g"
	RDPFiberTdUnitG string = "g"
)

// prop value enum
func (m *RDP) validateFiberTdUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeFiberTdUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateFiberTdUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.FiberTdUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateFiberTdUnitEnum("fiber_td_unit", "body", m.FiberTdUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeFluorideUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeFluorideUnitPropEnum = append(rDPTypeFluorideUnitPropEnum, v)
	}
}

const (

	// RDPFluorideUnitXµg captures enum value "µg"
	RDPFluorideUnitXµg string = "µg"
)

// prop value enum
func (m *RDP) validateFluorideUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeFluorideUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateFluorideUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.FluorideUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateFluorideUnitEnum("fluoride_unit", "body", m.FluorideUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeFolateDfeUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeFolateDfeUnitPropEnum = append(rDPTypeFolateDfeUnitPropEnum, v)
	}
}

const (

	// RDPFolateDfeUnitXµg captures enum value "µg"
	RDPFolateDfeUnitXµg string = "µg"
)

// prop value enum
func (m *RDP) validateFolateDfeUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeFolateDfeUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateFolateDfeUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.FolateDfeUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateFolateDfeUnitEnum("folate_dfe_unit", "body", m.FolateDfeUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeFolateTotUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeFolateTotUnitPropEnum = append(rDPTypeFolateTotUnitPropEnum, v)
	}
}

const (

	// RDPFolateTotUnitXµg captures enum value "µg"
	RDPFolateTotUnitXµg string = "µg"
)

// prop value enum
func (m *RDP) validateFolateTotUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeFolateTotUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateFolateTotUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.FolateTotUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateFolateTotUnitEnum("folate_tot_unit", "body", m.FolateTotUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeFolicAcidUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeFolicAcidUnitPropEnum = append(rDPTypeFolicAcidUnitPropEnum, v)
	}
}

const (

	// RDPFolicAcidUnitXµg captures enum value "µg"
	RDPFolicAcidUnitXµg string = "µg"
)

// prop value enum
func (m *RDP) validateFolicAcidUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeFolicAcidUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateFolicAcidUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.FolicAcidUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateFolicAcidUnitEnum("folic_acid_unit", "body", m.FolicAcidUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeFoodFolateUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeFoodFolateUnitPropEnum = append(rDPTypeFoodFolateUnitPropEnum, v)
	}
}

const (

	// RDPFoodFolateUnitXµg captures enum value "µg"
	RDPFoodFolateUnitXµg string = "µg"
)

// prop value enum
func (m *RDP) validateFoodFolateUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeFoodFolateUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateFoodFolateUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.FoodFolateUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateFoodFolateUnitEnum("food_folate_unit", "body", m.FoodFolateUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeIronUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeIronUnitPropEnum = append(rDPTypeIronUnitPropEnum, v)
	}
}

const (

	// RDPIronUnitMg captures enum value "mg"
	RDPIronUnitMg string = "mg"
)

// prop value enum
func (m *RDP) validateIronUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeIronUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateIronUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.IronUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateIronUnitEnum("iron_unit", "body", m.IronUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeLutZeaUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeLutZeaUnitPropEnum = append(rDPTypeLutZeaUnitPropEnum, v)
	}
}

const (

	// RDPLutZeaUnitXµg captures enum value "µg"
	RDPLutZeaUnitXµg string = "µg"
)

// prop value enum
func (m *RDP) validateLutZeaUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeLutZeaUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateLutZeaUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.LutZeaUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateLutZeaUnitEnum("lut_zea_unit", "body", m.LutZeaUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeLycopeneUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeLycopeneUnitPropEnum = append(rDPTypeLycopeneUnitPropEnum, v)
	}
}

const (

	// RDPLycopeneUnitXµg captures enum value "µg"
	RDPLycopeneUnitXµg string = "µg"
)

// prop value enum
func (m *RDP) validateLycopeneUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeLycopeneUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateLycopeneUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.LycopeneUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateLycopeneUnitEnum("lycopene_unit", "body", m.LycopeneUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeMagnesiumUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeMagnesiumUnitPropEnum = append(rDPTypeMagnesiumUnitPropEnum, v)
	}
}

const (

	// RDPMagnesiumUnitMg captures enum value "mg"
	RDPMagnesiumUnitMg string = "mg"
)

// prop value enum
func (m *RDP) validateMagnesiumUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeMagnesiumUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateMagnesiumUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.MagnesiumUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateMagnesiumUnitEnum("magnesium_unit", "body", m.MagnesiumUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeManganeseUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeManganeseUnitPropEnum = append(rDPTypeManganeseUnitPropEnum, v)
	}
}

const (

	// RDPManganeseUnitMg captures enum value "mg"
	RDPManganeseUnitMg string = "mg"
)

// prop value enum
func (m *RDP) validateManganeseUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeManganeseUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateManganeseUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.ManganeseUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateManganeseUnitEnum("manganese_unit", "body", m.ManganeseUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeMolybdenumUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeMolybdenumUnitPropEnum = append(rDPTypeMolybdenumUnitPropEnum, v)
	}
}

const (

	// RDPMolybdenumUnitXµg captures enum value "µg"
	RDPMolybdenumUnitXµg string = "µg"
)

// prop value enum
func (m *RDP) validateMolybdenumUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeMolybdenumUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateMolybdenumUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.MolybdenumUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateMolybdenumUnitEnum("molybdenum_unit", "body", m.MolybdenumUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeMonoFatUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["g"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeMonoFatUnitPropEnum = append(rDPTypeMonoFatUnitPropEnum, v)
	}
}

const (

	// RDPMonoFatUnitG captures enum value "g"
	RDPMonoFatUnitG string = "g"
)

// prop value enum
func (m *RDP) validateMonoFatUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeMonoFatUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateMonoFatUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.MonoFatUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateMonoFatUnitEnum("mono_fat_unit", "body", m.MonoFatUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypePhosphorusUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypePhosphorusUnitPropEnum = append(rDPTypePhosphorusUnitPropEnum, v)
	}
}

const (

	// RDPPhosphorusUnitMg captures enum value "mg"
	RDPPhosphorusUnitMg string = "mg"
)

// prop value enum
func (m *RDP) validatePhosphorusUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypePhosphorusUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validatePhosphorusUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.PhosphorusUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validatePhosphorusUnitEnum("phosphorus_unit", "body", m.PhosphorusUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypePolyFatUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["g"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypePolyFatUnitPropEnum = append(rDPTypePolyFatUnitPropEnum, v)
	}
}

const (

	// RDPPolyFatUnitG captures enum value "g"
	RDPPolyFatUnitG string = "g"
)

// prop value enum
func (m *RDP) validatePolyFatUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypePolyFatUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validatePolyFatUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.PolyFatUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validatePolyFatUnitEnum("poly_fat_unit", "body", m.PolyFatUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypePotassiumUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypePotassiumUnitPropEnum = append(rDPTypePotassiumUnitPropEnum, v)
	}
}

const (

	// RDPPotassiumUnitMg captures enum value "mg"
	RDPPotassiumUnitMg string = "mg"
)

// prop value enum
func (m *RDP) validatePotassiumUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypePotassiumUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validatePotassiumUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.PotassiumUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validatePotassiumUnitEnum("potassium_unit", "body", m.PotassiumUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeProteinUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["g"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeProteinUnitPropEnum = append(rDPTypeProteinUnitPropEnum, v)
	}
}

const (

	// RDPProteinUnitG captures enum value "g"
	RDPProteinUnitG string = "g"
)

// prop value enum
func (m *RDP) validateProteinUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeProteinUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateProteinUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.ProteinUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateProteinUnitEnum("protein_unit", "body", m.ProteinUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeRetinolUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeRetinolUnitPropEnum = append(rDPTypeRetinolUnitPropEnum, v)
	}
}

const (

	// RDPRetinolUnitXµg captures enum value "µg"
	RDPRetinolUnitXµg string = "µg"
)

// prop value enum
func (m *RDP) validateRetinolUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeRetinolUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateRetinolUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.RetinolUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateRetinolUnitEnum("retinol_unit", "body", m.RetinolUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeSeleniumUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeSeleniumUnitPropEnum = append(rDPTypeSeleniumUnitPropEnum, v)
	}
}

const (

	// RDPSeleniumUnitXµg captures enum value "µg"
	RDPSeleniumUnitXµg string = "µg"
)

// prop value enum
func (m *RDP) validateSeleniumUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeSeleniumUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateSeleniumUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.SeleniumUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateSeleniumUnitEnum("selenium_unit", "body", m.SeleniumUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeSodiumUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeSodiumUnitPropEnum = append(rDPTypeSodiumUnitPropEnum, v)
	}
}

const (

	// RDPSodiumUnitMg captures enum value "mg"
	RDPSodiumUnitMg string = "mg"
)

// prop value enum
func (m *RDP) validateSodiumUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeSodiumUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateSodiumUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.SodiumUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateSodiumUnitEnum("sodium_unit", "body", m.SodiumUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeTotalFatUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["g"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeTotalFatUnitPropEnum = append(rDPTypeTotalFatUnitPropEnum, v)
	}
}

const (

	// RDPTotalFatUnitG captures enum value "g"
	RDPTotalFatUnitG string = "g"
)

// prop value enum
func (m *RDP) validateTotalFatUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeTotalFatUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateTotalFatUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalFatUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateTotalFatUnitEnum("total_fat_unit", "body", m.TotalFatUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeTotalSugarUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["g"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeTotalSugarUnitPropEnum = append(rDPTypeTotalSugarUnitPropEnum, v)
	}
}

const (

	// RDPTotalSugarUnitG captures enum value "g"
	RDPTotalSugarUnitG string = "g"
)

// prop value enum
func (m *RDP) validateTotalSugarUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeTotalSugarUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateTotalSugarUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalSugarUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateTotalSugarUnitEnum("total_sugar_unit", "body", m.TotalSugarUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeVitAIuUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IU"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeVitAIuUnitPropEnum = append(rDPTypeVitAIuUnitPropEnum, v)
	}
}

const (

	// RDPVitAIuUnitIU captures enum value "IU"
	RDPVitAIuUnitIU string = "IU"
)

// prop value enum
func (m *RDP) validateVitAIuUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeVitAIuUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateVitAIuUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitAIuUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitAIuUnitEnum("vit_a_iu_unit", "body", m.VitAIuUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeVitARaeUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeVitARaeUnitPropEnum = append(rDPTypeVitARaeUnitPropEnum, v)
	}
}

const (

	// RDPVitARaeUnitXµg captures enum value "µg"
	RDPVitARaeUnitXµg string = "µg"
)

// prop value enum
func (m *RDP) validateVitARaeUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeVitARaeUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateVitARaeUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitARaeUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitARaeUnitEnum("vit_a_rae_unit", "body", m.VitARaeUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeVitB12UnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeVitB12UnitPropEnum = append(rDPTypeVitB12UnitPropEnum, v)
	}
}

const (

	// RDPVitB12UnitXµg captures enum value "µg"
	RDPVitB12UnitXµg string = "µg"
)

// prop value enum
func (m *RDP) validateVitB12UnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeVitB12UnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateVitB12Unit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitB12Unit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitB12UnitEnum("vit_b12_unit", "body", m.VitB12Unit); err != nil {
		return err
	}

	return nil
}

var rDPTypeVitB1UnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeVitB1UnitPropEnum = append(rDPTypeVitB1UnitPropEnum, v)
	}
}

const (

	// RDPVitB1UnitMg captures enum value "mg"
	RDPVitB1UnitMg string = "mg"
)

// prop value enum
func (m *RDP) validateVitB1UnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeVitB1UnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateVitB1Unit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitB1Unit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitB1UnitEnum("vit_b1_unit", "body", m.VitB1Unit); err != nil {
		return err
	}

	return nil
}

var rDPTypeVitB2UnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeVitB2UnitPropEnum = append(rDPTypeVitB2UnitPropEnum, v)
	}
}

const (

	// RDPVitB2UnitMg captures enum value "mg"
	RDPVitB2UnitMg string = "mg"
)

// prop value enum
func (m *RDP) validateVitB2UnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeVitB2UnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateVitB2Unit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitB2Unit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitB2UnitEnum("vit_b2_unit", "body", m.VitB2Unit); err != nil {
		return err
	}

	return nil
}

var rDPTypeVitB3UnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeVitB3UnitPropEnum = append(rDPTypeVitB3UnitPropEnum, v)
	}
}

const (

	// RDPVitB3UnitMg captures enum value "mg"
	RDPVitB3UnitMg string = "mg"
)

// prop value enum
func (m *RDP) validateVitB3UnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeVitB3UnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateVitB3Unit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitB3Unit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitB3UnitEnum("vit_b3_unit", "body", m.VitB3Unit); err != nil {
		return err
	}

	return nil
}

var rDPTypeVitB5UnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeVitB5UnitPropEnum = append(rDPTypeVitB5UnitPropEnum, v)
	}
}

const (

	// RDPVitB5UnitMg captures enum value "mg"
	RDPVitB5UnitMg string = "mg"
)

// prop value enum
func (m *RDP) validateVitB5UnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeVitB5UnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateVitB5Unit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitB5Unit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitB5UnitEnum("vit_b5_unit", "body", m.VitB5Unit); err != nil {
		return err
	}

	return nil
}

var rDPTypeVitB6UnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeVitB6UnitPropEnum = append(rDPTypeVitB6UnitPropEnum, v)
	}
}

const (

	// RDPVitB6UnitMg captures enum value "mg"
	RDPVitB6UnitMg string = "mg"
)

// prop value enum
func (m *RDP) validateVitB6UnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeVitB6UnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateVitB6Unit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitB6Unit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitB6UnitEnum("vit_b6_unit", "body", m.VitB6Unit); err != nil {
		return err
	}

	return nil
}

var rDPTypeVitCUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeVitCUnitPropEnum = append(rDPTypeVitCUnitPropEnum, v)
	}
}

const (

	// RDPVitCUnitMg captures enum value "mg"
	RDPVitCUnitMg string = "mg"
)

// prop value enum
func (m *RDP) validateVitCUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeVitCUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateVitCUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitCUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitCUnitEnum("vit_c_unit", "body", m.VitCUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeVitDMcgUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeVitDMcgUnitPropEnum = append(rDPTypeVitDMcgUnitPropEnum, v)
	}
}

const (

	// RDPVitDMcgUnitXµg captures enum value "µg"
	RDPVitDMcgUnitXµg string = "µg"
)

// prop value enum
func (m *RDP) validateVitDMcgUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeVitDMcgUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateVitDMcgUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitDMcgUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitDMcgUnitEnum("vit_d_mcg_unit", "body", m.VitDMcgUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeVitEUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeVitEUnitPropEnum = append(rDPTypeVitEUnitPropEnum, v)
	}
}

const (

	// RDPVitEUnitMg captures enum value "mg"
	RDPVitEUnitMg string = "mg"
)

// prop value enum
func (m *RDP) validateVitEUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeVitEUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateVitEUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitEUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitEUnitEnum("vit_e_unit", "body", m.VitEUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeVitKUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeVitKUnitPropEnum = append(rDPTypeVitKUnitPropEnum, v)
	}
}

const (

	// RDPVitKUnitXµg captures enum value "µg"
	RDPVitKUnitXµg string = "µg"
)

// prop value enum
func (m *RDP) validateVitKUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeVitKUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateVitKUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitKUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitKUnitEnum("vit_k_unit", "body", m.VitKUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeVivitDIuUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IU"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeVivitDIuUnitPropEnum = append(rDPTypeVivitDIuUnitPropEnum, v)
	}
}

const (

	// RDPVivitDIuUnitIU captures enum value "IU"
	RDPVivitDIuUnitIU string = "IU"
)

// prop value enum
func (m *RDP) validateVivitDIuUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeVivitDIuUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateVivitDIuUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.VivitDIuUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVivitDIuUnitEnum("vivit_d_iu_unit", "body", m.VivitDIuUnit); err != nil {
		return err
	}

	return nil
}

var rDPTypeZincUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDPTypeZincUnitPropEnum = append(rDPTypeZincUnitPropEnum, v)
	}
}

const (

	// RDPZincUnitMg captures enum value "mg"
	RDPZincUnitMg string = "mg"
)

// prop value enum
func (m *RDP) validateZincUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDPTypeZincUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDP) validateZincUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.ZincUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateZincUnitEnum("zinc_unit", "body", m.ZincUnit); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RDP) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RDP) UnmarshalBinary(b []byte) error {
	var res RDP
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
