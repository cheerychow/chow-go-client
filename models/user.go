// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User user
// swagger:model User
type User struct {

	// api key
	APIKey string `json:"api_key,omitempty"`

	// auth user id
	AuthUserID string `json:"auth_user_id,omitempty"`

	// country
	Country string `json:"country,omitempty"`

	// email
	// Max Length: 100
	// Pattern: ^.+@.+$
	Email string `json:"email,omitempty"`

	// facebook id
	FacebookID string `json:"facebook_id,omitempty"`

	// first name
	FirstName string `json:"firstName,omitempty"`

	// gender
	Gender string `json:"gender,omitempty"`

	// handle
	Handle string `json:"handle,omitempty"`

	// last name
	LastName string `json:"lastName,omitempty"`

	// last checked auth0
	LastCheckedAuth0 int64 `json:"last_checked_auth0,omitempty"`

	// last login
	LastLogin int64 `json:"last_login,omitempty"`

	// locale
	Locale string `json:"locale,omitempty"`

	// password
	// Max Length: 100
	// Min Length: 2
	Password string `json:"password,omitempty"`

	// phone
	// Max Length: 10
	// Min Length: 8
	Phone string `json:"phone,omitempty"`

	// picture url
	PictureURL string `json:"picture_url,omitempty"`

	// providers
	Providers []*AuthProvider `json:"providers"`

	// refresh token
	RefreshToken string `json:"refresh_token,omitempty"`

	// User status used to inform the system if an account is disabled.
	// Maximum: < 4
	// Minimum: 0
	UserStatus *int32 `json:"userStatus,omitempty"`

	// user id
	// Minimum: 1
	UserID int64 `json:"user_id,omitempty"`

	// user meta
	UserMeta []*UserMeta `json:"user_meta"`

	// uuid
	// Max Length: 60
	// Min Length: 2
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProviders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserMeta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateEmail(formats strfmt.Registry) error {

	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("email", "body", string(m.Email), 100); err != nil {
		return err
	}

	if err := validate.Pattern("email", "body", string(m.Email), `^.+@.+$`); err != nil {
		return err
	}

	return nil
}

func (m *User) validatePassword(formats strfmt.Registry) error {

	if swag.IsZero(m.Password) { // not required
		return nil
	}

	if err := validate.MinLength("password", "body", string(m.Password), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("password", "body", string(m.Password), 100); err != nil {
		return err
	}

	return nil
}

func (m *User) validatePhone(formats strfmt.Registry) error {

	if swag.IsZero(m.Phone) { // not required
		return nil
	}

	if err := validate.MinLength("phone", "body", string(m.Phone), 8); err != nil {
		return err
	}

	if err := validate.MaxLength("phone", "body", string(m.Phone), 10); err != nil {
		return err
	}

	return nil
}

func (m *User) validateProviders(formats strfmt.Registry) error {

	if swag.IsZero(m.Providers) { // not required
		return nil
	}

	for i := 0; i < len(m.Providers); i++ {
		if swag.IsZero(m.Providers[i]) { // not required
			continue
		}

		if m.Providers[i] != nil {
			if err := m.Providers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("providers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *User) validateUserStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.UserStatus) { // not required
		return nil
	}

	if err := validate.MinimumInt("userStatus", "body", int64(*m.UserStatus), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("userStatus", "body", int64(*m.UserStatus), 4, true); err != nil {
		return err
	}

	return nil
}

func (m *User) validateUserID(formats strfmt.Registry) error {

	if swag.IsZero(m.UserID) { // not required
		return nil
	}

	if err := validate.MinimumInt("user_id", "body", int64(m.UserID), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *User) validateUserMeta(formats strfmt.Registry) error {

	if swag.IsZero(m.UserMeta) { // not required
		return nil
	}

	for i := 0; i < len(m.UserMeta); i++ {
		if swag.IsZero(m.UserMeta[i]) { // not required
			continue
		}

		if m.UserMeta[i] != nil {
			if err := m.UserMeta[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("user_meta" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *User) validateUUID(formats strfmt.Registry) error {

	if swag.IsZero(m.UUID) { // not required
		return nil
	}

	if err := validate.MinLength("uuid", "body", string(m.UUID), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("uuid", "body", string(m.UUID), 60); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
