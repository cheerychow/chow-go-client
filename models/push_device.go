// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PushDevice push device
// swagger:model PushDevice
type PushDevice struct {

	// device
	Device string `json:"device,omitempty"`

	// owner id
	// Minimum: 1
	OwnerID int64 `json:"owner_id,omitempty"`

	// push device id
	// Minimum: 1
	PushDeviceID int64 `json:"push_device_id,omitempty"`

	// token
	// Max Length: 254
	// Min Length: 5
	Token string `json:"token,omitempty"`
}

// Validate validates this push device
func (m *PushDevice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOwnerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePushDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PushDevice) validateOwnerID(formats strfmt.Registry) error {

	if swag.IsZero(m.OwnerID) { // not required
		return nil
	}

	if err := validate.MinimumInt("owner_id", "body", int64(m.OwnerID), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *PushDevice) validatePushDeviceID(formats strfmt.Registry) error {

	if swag.IsZero(m.PushDeviceID) { // not required
		return nil
	}

	if err := validate.MinimumInt("push_device_id", "body", int64(m.PushDeviceID), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *PushDevice) validateToken(formats strfmt.Registry) error {

	if swag.IsZero(m.Token) { // not required
		return nil
	}

	if err := validate.MinLength("token", "body", string(m.Token), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("token", "body", string(m.Token), 254); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PushDevice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PushDevice) UnmarshalBinary(b []byte) error {
	var res PushDevice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
