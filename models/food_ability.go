// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// FoodAbility food ability
// swagger:model FoodAbility
type FoodAbility struct {

	// ability id
	AbilityID int64 `json:"ability_id,omitempty"`

	// A longer more verbose description.
	FullDescription string `json:"full_description,omitempty"`

	// The minimum RDA a nutrient should provide before this tip becomes applicable. (TODO This should be in the nutrient tip, not here.)
	MinDv int32 `json:"min_dv,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// nutrition tips
	NutritionTips []*NutritionTip `json:"nutrition_tips"`

	// A short description for the food ability. Useful when displaying this content as part of a limited display.
	ShortDescription string `json:"short_description,omitempty"`
}

// Validate validates this food ability
func (m *FoodAbility) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNutritionTips(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FoodAbility) validateNutritionTips(formats strfmt.Registry) error {

	if swag.IsZero(m.NutritionTips) { // not required
		return nil
	}

	for i := 0; i < len(m.NutritionTips); i++ {
		if swag.IsZero(m.NutritionTips[i]) { // not required
			continue
		}

		if m.NutritionTips[i] != nil {
			if err := m.NutritionTips[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nutrition_tips" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FoodAbility) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FoodAbility) UnmarshalBinary(b []byte) error {
	var res FoodAbility
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
