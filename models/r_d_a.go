// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RDA r d a
// swagger:model RDA
type RDA struct {

	// alpha carot
	AlphaCarot float32 `json:"alpha_carot,omitempty"`

	// alpha carot unit
	// Enum: [µg]
	AlphaCarotUnit string `json:"alpha_carot_unit,omitempty"`

	// beta carot
	BetaCarot float32 `json:"beta_carot,omitempty"`

	// beta carot unit
	// Enum: [µg]
	BetaCarotUnit string `json:"beta_carot_unit,omitempty"`

	// beta crypt
	BetaCrypt float32 `json:"beta_crypt,omitempty"`

	// beta crypt unit
	// Enum: [µg]
	BetaCryptUnit string `json:"beta_crypt_unit,omitempty"`

	// biotin unit
	// Enum: [µg]
	BiotinUnit string `json:"biotin_unit,omitempty"`

	// bioton
	Bioton float32 `json:"bioton,omitempty"`

	// calcium
	Calcium float32 `json:"calcium,omitempty"`

	// calcium unit
	// Enum: [mg]
	CalciumUnit string `json:"calcium_unit,omitempty"`

	// calories
	Calories float32 `json:"calories,omitempty"`

	// calories unit
	// Enum: [kcal]
	CaloriesUnit string `json:"calories_unit,omitempty"`

	// carbs
	Carbs float32 `json:"carbs,omitempty"`

	// carbs unit
	// Enum: [g]
	CarbsUnit string `json:"carbs_unit,omitempty"`

	// chloride
	Chloride float32 `json:"chloride,omitempty"`

	// chloride unit
	// Enum: [g]
	ChlorideUnit string `json:"chloride_unit,omitempty"`

	// cholestrl
	Cholestrl float32 `json:"cholestrl,omitempty"`

	// cholestrl unit
	// Enum: [mg]
	CholestrlUnit string `json:"cholestrl_unit,omitempty"`

	// choline tot
	CholineTot float32 `json:"choline_tot,omitempty"`

	// choline tot unit
	// Enum: [mg]
	CholineTotUnit string `json:"choline_tot_unit,omitempty"`

	// chromium
	Chromium float32 `json:"chromium,omitempty"`

	// chromium unit
	// Enum: [µg]
	ChromiumUnit string `json:"chromium_unit,omitempty"`

	// copper
	Copper float32 `json:"copper,omitempty"`

	// copper unit
	// Enum: [mg]
	CopperUnit string `json:"copper_unit,omitempty"`

	// country
	Country string `json:"country,omitempty"`

	// fiber td
	FiberTd float32 `json:"fiber_td,omitempty"`

	// fiber td unit
	// Enum: [g]
	FiberTdUnit string `json:"fiber_td_unit,omitempty"`

	// fluoride
	Fluoride float32 `json:"fluoride,omitempty"`

	// fluoride unit
	// Enum: [µg]
	FluorideUnit string `json:"fluoride_unit,omitempty"`

	// folate dfe
	FolateDfe float32 `json:"folate_dfe,omitempty"`

	// folate dfe unit
	// Enum: [µg]
	FolateDfeUnit string `json:"folate_dfe_unit,omitempty"`

	// folate tot
	FolateTot float32 `json:"folate_tot,omitempty"`

	// folate tot unit
	// Enum: [µg]
	FolateTotUnit string `json:"folate_tot_unit,omitempty"`

	// folic acid
	FolicAcid float32 `json:"folic_acid,omitempty"`

	// folic acid unit
	// Enum: [µg]
	FolicAcidUnit string `json:"folic_acid_unit,omitempty"`

	// food folate
	FoodFolate float32 `json:"food_folate,omitempty"`

	// food folate unit
	// Enum: [µg]
	FoodFolateUnit string `json:"food_folate_unit,omitempty"`

	// gender
	// Enum: [male female]
	Gender string `json:"gender,omitempty"`

	// iodine
	Iodine float32 `json:"iodine,omitempty"`

	// iodine unit
	IodineUnit string `json:"iodine_unit,omitempty"`

	// iron
	Iron float32 `json:"iron,omitempty"`

	// iron unit
	// Enum: [mg]
	IronUnit string `json:"iron_unit,omitempty"`

	// lut zea
	LutZea float32 `json:"lut_zea,omitempty"`

	// lut zea unit
	// Enum: [µg]
	LutZeaUnit string `json:"lut_zea_unit,omitempty"`

	// lycopene
	Lycopene float32 `json:"lycopene,omitempty"`

	// lycopene unit
	// Enum: [µg]
	LycopeneUnit string `json:"lycopene_unit,omitempty"`

	// magnesium
	Magnesium float32 `json:"magnesium,omitempty"`

	// magnesium unit
	// Enum: [mg]
	MagnesiumUnit string `json:"magnesium_unit,omitempty"`

	// manganese
	Manganese float32 `json:"manganese,omitempty"`

	// manganese unit
	// Enum: [mg]
	ManganeseUnit string `json:"manganese_unit,omitempty"`

	// molybdenum
	Molybdenum float32 `json:"molybdenum,omitempty"`

	// molybdenum unit
	// Enum: [µg]
	MolybdenumUnit string `json:"molybdenum_unit,omitempty"`

	// mono fat
	MonoFat float32 `json:"mono_fat,omitempty"`

	// mono fat unit
	// Enum: [g]
	MonoFatUnit string `json:"mono_fat_unit,omitempty"`

	// phosphorus
	Phosphorus float32 `json:"phosphorus,omitempty"`

	// phosphorus unit
	// Enum: [mg]
	PhosphorusUnit string `json:"phosphorus_unit,omitempty"`

	// poly fat
	PolyFat float32 `json:"poly_fat,omitempty"`

	// poly fat unit
	// Enum: [g]
	PolyFatUnit string `json:"poly_fat_unit,omitempty"`

	// potassium
	Potassium float32 `json:"potassium,omitempty"`

	// potassium unit
	// Enum: [mg]
	PotassiumUnit string `json:"potassium_unit,omitempty"`

	// protein
	Protein float32 `json:"protein,omitempty"`

	// protein unit
	// Enum: [g]
	ProteinUnit string `json:"protein_unit,omitempty"`

	// retinol
	Retinol float32 `json:"retinol,omitempty"`

	// retinol unit
	// Enum: [µg]
	RetinolUnit string `json:"retinol_unit,omitempty"`

	// sat fat
	SatFat float32 `json:"sat_fat,omitempty"`

	// sat fat unit
	// Enum: [g]
	SatFatUnit string `json:"sat_fat_unit,omitempty"`

	// selenium
	Selenium float32 `json:"selenium,omitempty"`

	// selenium unit
	// Enum: [µg]
	SeleniumUnit string `json:"selenium_unit,omitempty"`

	// sodium
	Sodium float32 `json:"sodium,omitempty"`

	// sodium unit
	// Enum: [mg]
	SodiumUnit string `json:"sodium_unit,omitempty"`

	// total fat
	TotalFat float32 `json:"total_fat,omitempty"`

	// total fat unit
	// Enum: [g]
	TotalFatUnit string `json:"total_fat_unit,omitempty"`

	// total sugar
	TotalSugar float32 `json:"total_sugar,omitempty"`

	// total sugar unit
	// Enum: [g]
	TotalSugarUnit string `json:"total_sugar_unit,omitempty"`

	// vit a iu
	VitAIu float32 `json:"vit_a_iu,omitempty"`

	// vit a iu unit
	// Enum: [IU]
	VitAIuUnit string `json:"vit_a_iu_unit,omitempty"`

	// vit a rae
	VitARae float32 `json:"vit_a_rae,omitempty"`

	// vit a rae unit
	// Enum: [µg]
	VitARaeUnit string `json:"vit_a_rae_unit,omitempty"`

	// vit b1
	VitB1 float32 `json:"vit_b1,omitempty"`

	// vit b12
	VitB12 float32 `json:"vit_b12,omitempty"`

	// vit b12 unit
	// Enum: [µg]
	VitB12Unit string `json:"vit_b12_unit,omitempty"`

	// vit b1 unit
	// Enum: [mg]
	VitB1Unit string `json:"vit_b1_unit,omitempty"`

	// vit b2
	VitB2 float32 `json:"vit_b2,omitempty"`

	// vit b2 unit
	// Enum: [mg]
	VitB2Unit string `json:"vit_b2_unit,omitempty"`

	// vit b3
	VitB3 float32 `json:"vit_b3,omitempty"`

	// vit b3 unit
	// Enum: [mg]
	VitB3Unit string `json:"vit_b3_unit,omitempty"`

	// vit b5
	VitB5 float32 `json:"vit_b5,omitempty"`

	// vit b5 unit
	// Enum: [mg]
	VitB5Unit string `json:"vit_b5_unit,omitempty"`

	// vit b6
	VitB6 float32 `json:"vit_b6,omitempty"`

	// vit b6 unit
	// Enum: [mg]
	VitB6Unit string `json:"vit_b6_unit,omitempty"`

	// vit c
	VitC float32 `json:"vit_c,omitempty"`

	// vit c unit
	// Enum: [mg]
	VitCUnit string `json:"vit_c_unit,omitempty"`

	// vit d iu
	VitDIu float32 `json:"vit_d_iu,omitempty"`

	// vit d mcg
	VitDMcg float32 `json:"vit_d_mcg,omitempty"`

	// vit d mcg unit
	// Enum: [µg]
	VitDMcgUnit string `json:"vit_d_mcg_unit,omitempty"`

	// vit e
	VitE float32 `json:"vit_e,omitempty"`

	// vit e unit
	// Enum: [mg]
	VitEUnit string `json:"vit_e_unit,omitempty"`

	// vit k
	VitK float32 `json:"vit_k,omitempty"`

	// vit k unit
	// Enum: [µg]
	VitKUnit string `json:"vit_k_unit,omitempty"`

	// vivit d iu unit
	// Enum: [IU]
	VivitDIuUnit string `json:"vivit_d_iu_unit,omitempty"`

	// zinc
	Zinc float32 `json:"zinc,omitempty"`

	// zinc unit
	// Enum: [mg]
	ZincUnit string `json:"zinc_unit,omitempty"`
}

// Validate validates this r d a
func (m *RDA) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlphaCarotUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBetaCarotUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBetaCryptUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBiotinUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCalciumUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCaloriesUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCarbsUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChlorideUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCholestrlUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCholineTotUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChromiumUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCopperUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFiberTdUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFluorideUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFolateDfeUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFolateTotUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFolicAcidUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFoodFolateUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGender(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIronUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLutZeaUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLycopeneUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMagnesiumUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManganeseUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMolybdenumUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonoFatUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhosphorusUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolyFatUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePotassiumUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProteinUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetinolUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSatFatUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeleniumUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSodiumUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalFatUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalSugarUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitAIuUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitARaeUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitB12Unit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitB1Unit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitB2Unit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitB3Unit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitB5Unit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitB6Unit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitCUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitDMcgUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitEUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVitKUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVivitDIuUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZincUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rDATypeAlphaCarotUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeAlphaCarotUnitPropEnum = append(rDATypeAlphaCarotUnitPropEnum, v)
	}
}

const (

	// RDAAlphaCarotUnitXµg captures enum value "µg"
	RDAAlphaCarotUnitXµg string = "µg"
)

// prop value enum
func (m *RDA) validateAlphaCarotUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeAlphaCarotUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateAlphaCarotUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.AlphaCarotUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateAlphaCarotUnitEnum("alpha_carot_unit", "body", m.AlphaCarotUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeBetaCarotUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeBetaCarotUnitPropEnum = append(rDATypeBetaCarotUnitPropEnum, v)
	}
}

const (

	// RDABetaCarotUnitXµg captures enum value "µg"
	RDABetaCarotUnitXµg string = "µg"
)

// prop value enum
func (m *RDA) validateBetaCarotUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeBetaCarotUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateBetaCarotUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.BetaCarotUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateBetaCarotUnitEnum("beta_carot_unit", "body", m.BetaCarotUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeBetaCryptUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeBetaCryptUnitPropEnum = append(rDATypeBetaCryptUnitPropEnum, v)
	}
}

const (

	// RDABetaCryptUnitXµg captures enum value "µg"
	RDABetaCryptUnitXµg string = "µg"
)

// prop value enum
func (m *RDA) validateBetaCryptUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeBetaCryptUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateBetaCryptUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.BetaCryptUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateBetaCryptUnitEnum("beta_crypt_unit", "body", m.BetaCryptUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeBiotinUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeBiotinUnitPropEnum = append(rDATypeBiotinUnitPropEnum, v)
	}
}

const (

	// RDABiotinUnitXµg captures enum value "µg"
	RDABiotinUnitXµg string = "µg"
)

// prop value enum
func (m *RDA) validateBiotinUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeBiotinUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateBiotinUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.BiotinUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateBiotinUnitEnum("biotin_unit", "body", m.BiotinUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeCalciumUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeCalciumUnitPropEnum = append(rDATypeCalciumUnitPropEnum, v)
	}
}

const (

	// RDACalciumUnitMg captures enum value "mg"
	RDACalciumUnitMg string = "mg"
)

// prop value enum
func (m *RDA) validateCalciumUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeCalciumUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateCalciumUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.CalciumUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateCalciumUnitEnum("calcium_unit", "body", m.CalciumUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeCaloriesUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kcal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeCaloriesUnitPropEnum = append(rDATypeCaloriesUnitPropEnum, v)
	}
}

const (

	// RDACaloriesUnitKcal captures enum value "kcal"
	RDACaloriesUnitKcal string = "kcal"
)

// prop value enum
func (m *RDA) validateCaloriesUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeCaloriesUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateCaloriesUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.CaloriesUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateCaloriesUnitEnum("calories_unit", "body", m.CaloriesUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeCarbsUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["g"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeCarbsUnitPropEnum = append(rDATypeCarbsUnitPropEnum, v)
	}
}

const (

	// RDACarbsUnitG captures enum value "g"
	RDACarbsUnitG string = "g"
)

// prop value enum
func (m *RDA) validateCarbsUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeCarbsUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateCarbsUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.CarbsUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateCarbsUnitEnum("carbs_unit", "body", m.CarbsUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeChlorideUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["g"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeChlorideUnitPropEnum = append(rDATypeChlorideUnitPropEnum, v)
	}
}

const (

	// RDAChlorideUnitG captures enum value "g"
	RDAChlorideUnitG string = "g"
)

// prop value enum
func (m *RDA) validateChlorideUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeChlorideUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateChlorideUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.ChlorideUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateChlorideUnitEnum("chloride_unit", "body", m.ChlorideUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeCholestrlUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeCholestrlUnitPropEnum = append(rDATypeCholestrlUnitPropEnum, v)
	}
}

const (

	// RDACholestrlUnitMg captures enum value "mg"
	RDACholestrlUnitMg string = "mg"
)

// prop value enum
func (m *RDA) validateCholestrlUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeCholestrlUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateCholestrlUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.CholestrlUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateCholestrlUnitEnum("cholestrl_unit", "body", m.CholestrlUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeCholineTotUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeCholineTotUnitPropEnum = append(rDATypeCholineTotUnitPropEnum, v)
	}
}

const (

	// RDACholineTotUnitMg captures enum value "mg"
	RDACholineTotUnitMg string = "mg"
)

// prop value enum
func (m *RDA) validateCholineTotUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeCholineTotUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateCholineTotUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.CholineTotUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateCholineTotUnitEnum("choline_tot_unit", "body", m.CholineTotUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeChromiumUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeChromiumUnitPropEnum = append(rDATypeChromiumUnitPropEnum, v)
	}
}

const (

	// RDAChromiumUnitXµg captures enum value "µg"
	RDAChromiumUnitXµg string = "µg"
)

// prop value enum
func (m *RDA) validateChromiumUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeChromiumUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateChromiumUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.ChromiumUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateChromiumUnitEnum("chromium_unit", "body", m.ChromiumUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeCopperUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeCopperUnitPropEnum = append(rDATypeCopperUnitPropEnum, v)
	}
}

const (

	// RDACopperUnitMg captures enum value "mg"
	RDACopperUnitMg string = "mg"
)

// prop value enum
func (m *RDA) validateCopperUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeCopperUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateCopperUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.CopperUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateCopperUnitEnum("copper_unit", "body", m.CopperUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeFiberTdUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["g"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeFiberTdUnitPropEnum = append(rDATypeFiberTdUnitPropEnum, v)
	}
}

const (

	// RDAFiberTdUnitG captures enum value "g"
	RDAFiberTdUnitG string = "g"
)

// prop value enum
func (m *RDA) validateFiberTdUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeFiberTdUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateFiberTdUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.FiberTdUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateFiberTdUnitEnum("fiber_td_unit", "body", m.FiberTdUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeFluorideUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeFluorideUnitPropEnum = append(rDATypeFluorideUnitPropEnum, v)
	}
}

const (

	// RDAFluorideUnitXµg captures enum value "µg"
	RDAFluorideUnitXµg string = "µg"
)

// prop value enum
func (m *RDA) validateFluorideUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeFluorideUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateFluorideUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.FluorideUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateFluorideUnitEnum("fluoride_unit", "body", m.FluorideUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeFolateDfeUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeFolateDfeUnitPropEnum = append(rDATypeFolateDfeUnitPropEnum, v)
	}
}

const (

	// RDAFolateDfeUnitXµg captures enum value "µg"
	RDAFolateDfeUnitXµg string = "µg"
)

// prop value enum
func (m *RDA) validateFolateDfeUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeFolateDfeUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateFolateDfeUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.FolateDfeUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateFolateDfeUnitEnum("folate_dfe_unit", "body", m.FolateDfeUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeFolateTotUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeFolateTotUnitPropEnum = append(rDATypeFolateTotUnitPropEnum, v)
	}
}

const (

	// RDAFolateTotUnitXµg captures enum value "µg"
	RDAFolateTotUnitXµg string = "µg"
)

// prop value enum
func (m *RDA) validateFolateTotUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeFolateTotUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateFolateTotUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.FolateTotUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateFolateTotUnitEnum("folate_tot_unit", "body", m.FolateTotUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeFolicAcidUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeFolicAcidUnitPropEnum = append(rDATypeFolicAcidUnitPropEnum, v)
	}
}

const (

	// RDAFolicAcidUnitXµg captures enum value "µg"
	RDAFolicAcidUnitXµg string = "µg"
)

// prop value enum
func (m *RDA) validateFolicAcidUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeFolicAcidUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateFolicAcidUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.FolicAcidUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateFolicAcidUnitEnum("folic_acid_unit", "body", m.FolicAcidUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeFoodFolateUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeFoodFolateUnitPropEnum = append(rDATypeFoodFolateUnitPropEnum, v)
	}
}

const (

	// RDAFoodFolateUnitXµg captures enum value "µg"
	RDAFoodFolateUnitXµg string = "µg"
)

// prop value enum
func (m *RDA) validateFoodFolateUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeFoodFolateUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateFoodFolateUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.FoodFolateUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateFoodFolateUnitEnum("food_folate_unit", "body", m.FoodFolateUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeGenderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["male","female"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeGenderPropEnum = append(rDATypeGenderPropEnum, v)
	}
}

const (

	// RDAGenderMale captures enum value "male"
	RDAGenderMale string = "male"

	// RDAGenderFemale captures enum value "female"
	RDAGenderFemale string = "female"
)

// prop value enum
func (m *RDA) validateGenderEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeGenderPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateGender(formats strfmt.Registry) error {

	if swag.IsZero(m.Gender) { // not required
		return nil
	}

	// value enum
	if err := m.validateGenderEnum("gender", "body", m.Gender); err != nil {
		return err
	}

	return nil
}

var rDATypeIronUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeIronUnitPropEnum = append(rDATypeIronUnitPropEnum, v)
	}
}

const (

	// RDAIronUnitMg captures enum value "mg"
	RDAIronUnitMg string = "mg"
)

// prop value enum
func (m *RDA) validateIronUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeIronUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateIronUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.IronUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateIronUnitEnum("iron_unit", "body", m.IronUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeLutZeaUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeLutZeaUnitPropEnum = append(rDATypeLutZeaUnitPropEnum, v)
	}
}

const (

	// RDALutZeaUnitXµg captures enum value "µg"
	RDALutZeaUnitXµg string = "µg"
)

// prop value enum
func (m *RDA) validateLutZeaUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeLutZeaUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateLutZeaUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.LutZeaUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateLutZeaUnitEnum("lut_zea_unit", "body", m.LutZeaUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeLycopeneUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeLycopeneUnitPropEnum = append(rDATypeLycopeneUnitPropEnum, v)
	}
}

const (

	// RDALycopeneUnitXµg captures enum value "µg"
	RDALycopeneUnitXµg string = "µg"
)

// prop value enum
func (m *RDA) validateLycopeneUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeLycopeneUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateLycopeneUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.LycopeneUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateLycopeneUnitEnum("lycopene_unit", "body", m.LycopeneUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeMagnesiumUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeMagnesiumUnitPropEnum = append(rDATypeMagnesiumUnitPropEnum, v)
	}
}

const (

	// RDAMagnesiumUnitMg captures enum value "mg"
	RDAMagnesiumUnitMg string = "mg"
)

// prop value enum
func (m *RDA) validateMagnesiumUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeMagnesiumUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateMagnesiumUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.MagnesiumUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateMagnesiumUnitEnum("magnesium_unit", "body", m.MagnesiumUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeManganeseUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeManganeseUnitPropEnum = append(rDATypeManganeseUnitPropEnum, v)
	}
}

const (

	// RDAManganeseUnitMg captures enum value "mg"
	RDAManganeseUnitMg string = "mg"
)

// prop value enum
func (m *RDA) validateManganeseUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeManganeseUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateManganeseUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.ManganeseUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateManganeseUnitEnum("manganese_unit", "body", m.ManganeseUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeMolybdenumUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeMolybdenumUnitPropEnum = append(rDATypeMolybdenumUnitPropEnum, v)
	}
}

const (

	// RDAMolybdenumUnitXµg captures enum value "µg"
	RDAMolybdenumUnitXµg string = "µg"
)

// prop value enum
func (m *RDA) validateMolybdenumUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeMolybdenumUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateMolybdenumUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.MolybdenumUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateMolybdenumUnitEnum("molybdenum_unit", "body", m.MolybdenumUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeMonoFatUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["g"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeMonoFatUnitPropEnum = append(rDATypeMonoFatUnitPropEnum, v)
	}
}

const (

	// RDAMonoFatUnitG captures enum value "g"
	RDAMonoFatUnitG string = "g"
)

// prop value enum
func (m *RDA) validateMonoFatUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeMonoFatUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateMonoFatUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.MonoFatUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateMonoFatUnitEnum("mono_fat_unit", "body", m.MonoFatUnit); err != nil {
		return err
	}

	return nil
}

var rDATypePhosphorusUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypePhosphorusUnitPropEnum = append(rDATypePhosphorusUnitPropEnum, v)
	}
}

const (

	// RDAPhosphorusUnitMg captures enum value "mg"
	RDAPhosphorusUnitMg string = "mg"
)

// prop value enum
func (m *RDA) validatePhosphorusUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypePhosphorusUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validatePhosphorusUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.PhosphorusUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validatePhosphorusUnitEnum("phosphorus_unit", "body", m.PhosphorusUnit); err != nil {
		return err
	}

	return nil
}

var rDATypePolyFatUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["g"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypePolyFatUnitPropEnum = append(rDATypePolyFatUnitPropEnum, v)
	}
}

const (

	// RDAPolyFatUnitG captures enum value "g"
	RDAPolyFatUnitG string = "g"
)

// prop value enum
func (m *RDA) validatePolyFatUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypePolyFatUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validatePolyFatUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.PolyFatUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validatePolyFatUnitEnum("poly_fat_unit", "body", m.PolyFatUnit); err != nil {
		return err
	}

	return nil
}

var rDATypePotassiumUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypePotassiumUnitPropEnum = append(rDATypePotassiumUnitPropEnum, v)
	}
}

const (

	// RDAPotassiumUnitMg captures enum value "mg"
	RDAPotassiumUnitMg string = "mg"
)

// prop value enum
func (m *RDA) validatePotassiumUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypePotassiumUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validatePotassiumUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.PotassiumUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validatePotassiumUnitEnum("potassium_unit", "body", m.PotassiumUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeProteinUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["g"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeProteinUnitPropEnum = append(rDATypeProteinUnitPropEnum, v)
	}
}

const (

	// RDAProteinUnitG captures enum value "g"
	RDAProteinUnitG string = "g"
)

// prop value enum
func (m *RDA) validateProteinUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeProteinUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateProteinUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.ProteinUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateProteinUnitEnum("protein_unit", "body", m.ProteinUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeRetinolUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeRetinolUnitPropEnum = append(rDATypeRetinolUnitPropEnum, v)
	}
}

const (

	// RDARetinolUnitXµg captures enum value "µg"
	RDARetinolUnitXµg string = "µg"
)

// prop value enum
func (m *RDA) validateRetinolUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeRetinolUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateRetinolUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.RetinolUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateRetinolUnitEnum("retinol_unit", "body", m.RetinolUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeSatFatUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["g"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeSatFatUnitPropEnum = append(rDATypeSatFatUnitPropEnum, v)
	}
}

const (

	// RDASatFatUnitG captures enum value "g"
	RDASatFatUnitG string = "g"
)

// prop value enum
func (m *RDA) validateSatFatUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeSatFatUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateSatFatUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.SatFatUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateSatFatUnitEnum("sat_fat_unit", "body", m.SatFatUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeSeleniumUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeSeleniumUnitPropEnum = append(rDATypeSeleniumUnitPropEnum, v)
	}
}

const (

	// RDASeleniumUnitXµg captures enum value "µg"
	RDASeleniumUnitXµg string = "µg"
)

// prop value enum
func (m *RDA) validateSeleniumUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeSeleniumUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateSeleniumUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.SeleniumUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateSeleniumUnitEnum("selenium_unit", "body", m.SeleniumUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeSodiumUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeSodiumUnitPropEnum = append(rDATypeSodiumUnitPropEnum, v)
	}
}

const (

	// RDASodiumUnitMg captures enum value "mg"
	RDASodiumUnitMg string = "mg"
)

// prop value enum
func (m *RDA) validateSodiumUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeSodiumUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateSodiumUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.SodiumUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateSodiumUnitEnum("sodium_unit", "body", m.SodiumUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeTotalFatUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["g"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeTotalFatUnitPropEnum = append(rDATypeTotalFatUnitPropEnum, v)
	}
}

const (

	// RDATotalFatUnitG captures enum value "g"
	RDATotalFatUnitG string = "g"
)

// prop value enum
func (m *RDA) validateTotalFatUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeTotalFatUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateTotalFatUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalFatUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateTotalFatUnitEnum("total_fat_unit", "body", m.TotalFatUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeTotalSugarUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["g"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeTotalSugarUnitPropEnum = append(rDATypeTotalSugarUnitPropEnum, v)
	}
}

const (

	// RDATotalSugarUnitG captures enum value "g"
	RDATotalSugarUnitG string = "g"
)

// prop value enum
func (m *RDA) validateTotalSugarUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeTotalSugarUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateTotalSugarUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalSugarUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateTotalSugarUnitEnum("total_sugar_unit", "body", m.TotalSugarUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeVitAIuUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IU"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeVitAIuUnitPropEnum = append(rDATypeVitAIuUnitPropEnum, v)
	}
}

const (

	// RDAVitAIuUnitIU captures enum value "IU"
	RDAVitAIuUnitIU string = "IU"
)

// prop value enum
func (m *RDA) validateVitAIuUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeVitAIuUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateVitAIuUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitAIuUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitAIuUnitEnum("vit_a_iu_unit", "body", m.VitAIuUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeVitARaeUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeVitARaeUnitPropEnum = append(rDATypeVitARaeUnitPropEnum, v)
	}
}

const (

	// RDAVitARaeUnitXµg captures enum value "µg"
	RDAVitARaeUnitXµg string = "µg"
)

// prop value enum
func (m *RDA) validateVitARaeUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeVitARaeUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateVitARaeUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitARaeUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitARaeUnitEnum("vit_a_rae_unit", "body", m.VitARaeUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeVitB12UnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeVitB12UnitPropEnum = append(rDATypeVitB12UnitPropEnum, v)
	}
}

const (

	// RDAVitB12UnitXµg captures enum value "µg"
	RDAVitB12UnitXµg string = "µg"
)

// prop value enum
func (m *RDA) validateVitB12UnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeVitB12UnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateVitB12Unit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitB12Unit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitB12UnitEnum("vit_b12_unit", "body", m.VitB12Unit); err != nil {
		return err
	}

	return nil
}

var rDATypeVitB1UnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeVitB1UnitPropEnum = append(rDATypeVitB1UnitPropEnum, v)
	}
}

const (

	// RDAVitB1UnitMg captures enum value "mg"
	RDAVitB1UnitMg string = "mg"
)

// prop value enum
func (m *RDA) validateVitB1UnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeVitB1UnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateVitB1Unit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitB1Unit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitB1UnitEnum("vit_b1_unit", "body", m.VitB1Unit); err != nil {
		return err
	}

	return nil
}

var rDATypeVitB2UnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeVitB2UnitPropEnum = append(rDATypeVitB2UnitPropEnum, v)
	}
}

const (

	// RDAVitB2UnitMg captures enum value "mg"
	RDAVitB2UnitMg string = "mg"
)

// prop value enum
func (m *RDA) validateVitB2UnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeVitB2UnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateVitB2Unit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitB2Unit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitB2UnitEnum("vit_b2_unit", "body", m.VitB2Unit); err != nil {
		return err
	}

	return nil
}

var rDATypeVitB3UnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeVitB3UnitPropEnum = append(rDATypeVitB3UnitPropEnum, v)
	}
}

const (

	// RDAVitB3UnitMg captures enum value "mg"
	RDAVitB3UnitMg string = "mg"
)

// prop value enum
func (m *RDA) validateVitB3UnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeVitB3UnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateVitB3Unit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitB3Unit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitB3UnitEnum("vit_b3_unit", "body", m.VitB3Unit); err != nil {
		return err
	}

	return nil
}

var rDATypeVitB5UnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeVitB5UnitPropEnum = append(rDATypeVitB5UnitPropEnum, v)
	}
}

const (

	// RDAVitB5UnitMg captures enum value "mg"
	RDAVitB5UnitMg string = "mg"
)

// prop value enum
func (m *RDA) validateVitB5UnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeVitB5UnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateVitB5Unit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitB5Unit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitB5UnitEnum("vit_b5_unit", "body", m.VitB5Unit); err != nil {
		return err
	}

	return nil
}

var rDATypeVitB6UnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeVitB6UnitPropEnum = append(rDATypeVitB6UnitPropEnum, v)
	}
}

const (

	// RDAVitB6UnitMg captures enum value "mg"
	RDAVitB6UnitMg string = "mg"
)

// prop value enum
func (m *RDA) validateVitB6UnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeVitB6UnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateVitB6Unit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitB6Unit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitB6UnitEnum("vit_b6_unit", "body", m.VitB6Unit); err != nil {
		return err
	}

	return nil
}

var rDATypeVitCUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeVitCUnitPropEnum = append(rDATypeVitCUnitPropEnum, v)
	}
}

const (

	// RDAVitCUnitMg captures enum value "mg"
	RDAVitCUnitMg string = "mg"
)

// prop value enum
func (m *RDA) validateVitCUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeVitCUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateVitCUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitCUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitCUnitEnum("vit_c_unit", "body", m.VitCUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeVitDMcgUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeVitDMcgUnitPropEnum = append(rDATypeVitDMcgUnitPropEnum, v)
	}
}

const (

	// RDAVitDMcgUnitXµg captures enum value "µg"
	RDAVitDMcgUnitXµg string = "µg"
)

// prop value enum
func (m *RDA) validateVitDMcgUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeVitDMcgUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateVitDMcgUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitDMcgUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitDMcgUnitEnum("vit_d_mcg_unit", "body", m.VitDMcgUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeVitEUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeVitEUnitPropEnum = append(rDATypeVitEUnitPropEnum, v)
	}
}

const (

	// RDAVitEUnitMg captures enum value "mg"
	RDAVitEUnitMg string = "mg"
)

// prop value enum
func (m *RDA) validateVitEUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeVitEUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateVitEUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitEUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitEUnitEnum("vit_e_unit", "body", m.VitEUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeVitKUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["µg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeVitKUnitPropEnum = append(rDATypeVitKUnitPropEnum, v)
	}
}

const (

	// RDAVitKUnitXµg captures enum value "µg"
	RDAVitKUnitXµg string = "µg"
)

// prop value enum
func (m *RDA) validateVitKUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeVitKUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateVitKUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.VitKUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVitKUnitEnum("vit_k_unit", "body", m.VitKUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeVivitDIuUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IU"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeVivitDIuUnitPropEnum = append(rDATypeVivitDIuUnitPropEnum, v)
	}
}

const (

	// RDAVivitDIuUnitIU captures enum value "IU"
	RDAVivitDIuUnitIU string = "IU"
)

// prop value enum
func (m *RDA) validateVivitDIuUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeVivitDIuUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateVivitDIuUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.VivitDIuUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateVivitDIuUnitEnum("vivit_d_iu_unit", "body", m.VivitDIuUnit); err != nil {
		return err
	}

	return nil
}

var rDATypeZincUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mg"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDATypeZincUnitPropEnum = append(rDATypeZincUnitPropEnum, v)
	}
}

const (

	// RDAZincUnitMg captures enum value "mg"
	RDAZincUnitMg string = "mg"
)

// prop value enum
func (m *RDA) validateZincUnitEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDATypeZincUnitPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDA) validateZincUnit(formats strfmt.Registry) error {

	if swag.IsZero(m.ZincUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateZincUnitEnum("zinc_unit", "body", m.ZincUnit); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RDA) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RDA) UnmarshalBinary(b []byte) error {
	var res RDA
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
