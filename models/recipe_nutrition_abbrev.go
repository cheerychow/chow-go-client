// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// RecipeNutritionAbbrev recipe nutrition abbrev
// swagger:model RecipeNutritionAbbrev
type RecipeNutritionAbbrev struct {
	BaseNutritionAbbrev

	BaseNutritionAbbrevUnit

	// is condiment
	IsCondiment bool `json:"is_condiment,omitempty"`

	// is savoury
	IsSavoury bool `json:"is_savoury,omitempty"`

	// is sweet
	IsSweet bool `json:"is_sweet,omitempty"`

	// num alcohol
	NumAlcohol int32 `json:"num_alcohol,omitempty"`

	// num ceral
	NumCeral int32 `json:"num_ceral,omitempty"`

	// num compound
	NumCompound int32 `json:"num_compound,omitempty"`

	// num dairy
	NumDairy int32 `json:"num_dairy,omitempty"`

	// num egg
	NumEgg int32 `json:"num_egg,omitempty"`

	// num fish
	NumFish int32 `json:"num_fish,omitempty"`

	// num fruit
	NumFruit int32 `json:"num_fruit,omitempty"`

	// num meat
	NumMeat int32 `json:"num_meat,omitempty"`

	// num nut
	NumNut int32 `json:"num_nut,omitempty"`

	// num oil
	NumOil int32 `json:"num_oil,omitempty"`

	// num seasoning
	NumSeasoning int32 `json:"num_seasoning,omitempty"`

	// num sugar
	NumSugar int32 `json:"num_sugar,omitempty"`

	// num veg
	NumVeg int32 `json:"num_veg,omitempty"`

	// num vegan
	NumVegan int32 `json:"num_vegan,omitempty"`

	// portions
	Portions int32 `json:"portions,omitempty"`

	// quick and easy
	QuickAndEasy bool `json:"quick_and_easy,omitempty"`

	// recipe id
	RecipeID int64 `json:"recipe_id,omitempty"`

	// recipe nutrition abbrev id
	RecipeNutritionAbbrevID int64 `json:"recipe_nutrition_abbrev_id,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *RecipeNutritionAbbrev) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BaseNutritionAbbrev
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BaseNutritionAbbrev = aO0

	// AO1
	var aO1 BaseNutritionAbbrevUnit
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.BaseNutritionAbbrevUnit = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m RecipeNutritionAbbrev) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.BaseNutritionAbbrev)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.BaseNutritionAbbrevUnit)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this recipe nutrition abbrev
func (m *RecipeNutritionAbbrev) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BaseNutritionAbbrev
	if err := m.BaseNutritionAbbrev.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with BaseNutritionAbbrevUnit
	if err := m.BaseNutritionAbbrevUnit.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *RecipeNutritionAbbrev) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecipeNutritionAbbrev) UnmarshalBinary(b []byte) error {
	var res RecipeNutritionAbbrev
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
