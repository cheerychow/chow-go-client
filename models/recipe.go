// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Recipe recipe
// swagger:model Recipe
type Recipe struct {

	// description
	Description string `json:"Description,omitempty"`

	// added
	Added int64 `json:"added,omitempty"`

	// categories
	Categories []string `json:"categories"`

	// category
	Category string `json:"category,omitempty"`

	// chow rating
	// Maximum: 10
	// Minimum: 0
	ChowRating *float32 `json:"chow_rating,omitempty"`

	// cook time
	// Maximum: 1000
	// Minimum: 0
	CookTime *float32 `json:"cook_time,omitempty"`

	// creator
	Creator string `json:"creator,omitempty"`

	// cuisine
	Cuisine string `json:"cuisine,omitempty"`

	// The date the recipe was published, as described by the web page.
	DatePublished int64 `json:"date_published,omitempty"`

	// food ids
	FoodIds []int64 `json:"food_ids"`

	// food names
	FoodNames map[string]string `json:"food_names,omitempty"`

	// has image
	HasImage bool `json:"has_image,omitempty"`

	// image url
	ImageURL string `json:"image_url,omitempty"`

	// info
	Info string `json:"info,omitempty"`

	// ingredient common names
	IngredientCommonNames []string `json:"ingredient_common_names"`

	// ingredients
	Ingredients string `json:"ingredients,omitempty"`

	// instructions
	Instructions string `json:"instructions,omitempty"`

	// An internally used int by the system to decide what extra data should be attached to this recipe object (such as nutrition, GDA, nutrition per portion etc)
	InternalPreloadOptions int64 `json:"internal_preload_options,omitempty"`

	// meal type
	MealType string `json:"meal_type,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// num ingredients
	NumIngredients int32 `json:"num_ingredients,omitempty"`

	// Only used when searching for recipes by food id. This value will show how many of the foods in the search are present in this recipe.
	// Maximum: 1000
	// Minimum: 0
	NumMatchingIngredients *int32 `json:"num_matching_ingredients,omitempty"`

	// Only used when searching for recipes by food id. This value will show how many of the foods in the search are missing from this recipe.
	// Maximum: 1000
	// Minimum: 0
	NumMissingIngredients *int32 `json:"num_missing_ingredients,omitempty"`

	// A list of the ingredients in a recipe, including the nutritional information of each ingredient. Note: This will only appear in a recipe object when the /nutrition endpoint is present in the API request for the recipe object
	Nutrition []*IngredientWithNutritionAbbrev `json:"nutrition"`

	// nutrition per portion
	NutritionPerPortion *RecipeNutritionAbbrev `json:"nutrition_per_portion,omitempty"`

	// nutrition tips
	NutritionTips []*NutritionTip `json:"nutrition_tips"`

	// oid
	Oid string `json:"oid,omitempty"`

	// owner id
	OwnerID int64 `json:"owner_id,omitempty"`

	// portions
	// Maximum: 1000
	Portions int32 `json:"portions,omitempty"`

	// prep time
	// Maximum: 1000
	// Minimum: 0
	PrepTime *float32 `json:"prep_time,omitempty"`

	// provides
	Provides *CountryRDA `json:"provides,omitempty"`

	// public
	Public bool `json:"public,omitempty"`

	// rating
	Rating float32 `json:"rating,omitempty"`

	// rating count
	// Minimum: 0
	RatingCount *int32 `json:"rating_count,omitempty"`

	// recipe id
	// Minimum: 1
	RecipeID int64 `json:"recipe_id,omitempty"`

	// recipe yield
	RecipeYield string `json:"recipe_yield,omitempty"`

	// scratch
	Scratch bool `json:"scratch,omitempty"`

	// source
	Source string `json:"source,omitempty"`

	// total time
	// Maximum: 1000
	// Minimum: 0
	TotalTime *float32 `json:"total_time,omitempty"`

	// unique name
	UniqueName string `json:"unique_name,omitempty"`

	// unique url id
	UniqueURLID int64 `json:"unique_url_id,omitempty"`

	// unique url name
	UniqueURLName string `json:"unique_url_name,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// web rating
	// Maximum: 1000
	// Minimum: 0
	WebRating *float32 `json:"web_rating,omitempty"`
}

// Validate validates this recipe
func (m *Recipe) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChowRating(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCookTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumMatchingIngredients(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumMissingIngredients(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNutrition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNutritionPerPortion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNutritionTips(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrepTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvides(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRatingCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWebRating(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Recipe) validateChowRating(formats strfmt.Registry) error {

	if swag.IsZero(m.ChowRating) { // not required
		return nil
	}

	if err := validate.Minimum("chow_rating", "body", float64(*m.ChowRating), 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("chow_rating", "body", float64(*m.ChowRating), 10, false); err != nil {
		return err
	}

	return nil
}

func (m *Recipe) validateCookTime(formats strfmt.Registry) error {

	if swag.IsZero(m.CookTime) { // not required
		return nil
	}

	if err := validate.Minimum("cook_time", "body", float64(*m.CookTime), 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("cook_time", "body", float64(*m.CookTime), 1000, false); err != nil {
		return err
	}

	return nil
}

func (m *Recipe) validateNumMatchingIngredients(formats strfmt.Registry) error {

	if swag.IsZero(m.NumMatchingIngredients) { // not required
		return nil
	}

	if err := validate.MinimumInt("num_matching_ingredients", "body", int64(*m.NumMatchingIngredients), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("num_matching_ingredients", "body", int64(*m.NumMatchingIngredients), 1000, false); err != nil {
		return err
	}

	return nil
}

func (m *Recipe) validateNumMissingIngredients(formats strfmt.Registry) error {

	if swag.IsZero(m.NumMissingIngredients) { // not required
		return nil
	}

	if err := validate.MinimumInt("num_missing_ingredients", "body", int64(*m.NumMissingIngredients), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("num_missing_ingredients", "body", int64(*m.NumMissingIngredients), 1000, false); err != nil {
		return err
	}

	return nil
}

func (m *Recipe) validateNutrition(formats strfmt.Registry) error {

	if swag.IsZero(m.Nutrition) { // not required
		return nil
	}

	for i := 0; i < len(m.Nutrition); i++ {
		if swag.IsZero(m.Nutrition[i]) { // not required
			continue
		}

		if m.Nutrition[i] != nil {
			if err := m.Nutrition[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nutrition" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Recipe) validateNutritionPerPortion(formats strfmt.Registry) error {

	if swag.IsZero(m.NutritionPerPortion) { // not required
		return nil
	}

	if m.NutritionPerPortion != nil {
		if err := m.NutritionPerPortion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nutrition_per_portion")
			}
			return err
		}
	}

	return nil
}

func (m *Recipe) validateNutritionTips(formats strfmt.Registry) error {

	if swag.IsZero(m.NutritionTips) { // not required
		return nil
	}

	for i := 0; i < len(m.NutritionTips); i++ {
		if swag.IsZero(m.NutritionTips[i]) { // not required
			continue
		}

		if m.NutritionTips[i] != nil {
			if err := m.NutritionTips[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nutrition_tips" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Recipe) validatePortions(formats strfmt.Registry) error {

	if swag.IsZero(m.Portions) { // not required
		return nil
	}

	if err := validate.MaximumInt("portions", "body", int64(m.Portions), 1000, false); err != nil {
		return err
	}

	return nil
}

func (m *Recipe) validatePrepTime(formats strfmt.Registry) error {

	if swag.IsZero(m.PrepTime) { // not required
		return nil
	}

	if err := validate.Minimum("prep_time", "body", float64(*m.PrepTime), 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("prep_time", "body", float64(*m.PrepTime), 1000, false); err != nil {
		return err
	}

	return nil
}

func (m *Recipe) validateProvides(formats strfmt.Registry) error {

	if swag.IsZero(m.Provides) { // not required
		return nil
	}

	if m.Provides != nil {
		if err := m.Provides.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("provides")
			}
			return err
		}
	}

	return nil
}

func (m *Recipe) validateRatingCount(formats strfmt.Registry) error {

	if swag.IsZero(m.RatingCount) { // not required
		return nil
	}

	if err := validate.MinimumInt("rating_count", "body", int64(*m.RatingCount), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Recipe) validateRecipeID(formats strfmt.Registry) error {

	if swag.IsZero(m.RecipeID) { // not required
		return nil
	}

	if err := validate.MinimumInt("recipe_id", "body", int64(m.RecipeID), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *Recipe) validateTotalTime(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalTime) { // not required
		return nil
	}

	if err := validate.Minimum("total_time", "body", float64(*m.TotalTime), 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("total_time", "body", float64(*m.TotalTime), 1000, false); err != nil {
		return err
	}

	return nil
}

func (m *Recipe) validateWebRating(formats strfmt.Registry) error {

	if swag.IsZero(m.WebRating) { // not required
		return nil
	}

	if err := validate.Minimum("web_rating", "body", float64(*m.WebRating), 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("web_rating", "body", float64(*m.WebRating), 1000, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Recipe) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Recipe) UnmarshalBinary(b []byte) error {
	var res Recipe
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
