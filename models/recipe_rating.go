// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecipeRating recipe rating
// swagger:model RecipeRating
type RecipeRating struct {

	// created
	// Minimum: 1
	Created int64 `json:"created,omitempty"`

	// owner id
	// Minimum: 1
	OwnerID int64 `json:"owner_id,omitempty"`

	// rating
	// Minimum: 1
	Rating int32 `json:"rating,omitempty"`

	// recipe id
	// Minimum: 1
	RecipeID int64 `json:"recipe_id,omitempty"`

	// recipe rating id
	// Minimum: 1
	RecipeRatingID int64 `json:"recipe_rating_id,omitempty"`

	// recipe url
	RecipeURL string `json:"recipe_url,omitempty"`
}

// Validate validates this recipe rating
func (m *RecipeRating) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRating(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecipeRatingID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecipeRating) validateCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.MinimumInt("created", "body", int64(m.Created), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *RecipeRating) validateOwnerID(formats strfmt.Registry) error {

	if swag.IsZero(m.OwnerID) { // not required
		return nil
	}

	if err := validate.MinimumInt("owner_id", "body", int64(m.OwnerID), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *RecipeRating) validateRating(formats strfmt.Registry) error {

	if swag.IsZero(m.Rating) { // not required
		return nil
	}

	if err := validate.MinimumInt("rating", "body", int64(m.Rating), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *RecipeRating) validateRecipeID(formats strfmt.Registry) error {

	if swag.IsZero(m.RecipeID) { // not required
		return nil
	}

	if err := validate.MinimumInt("recipe_id", "body", int64(m.RecipeID), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *RecipeRating) validateRecipeRatingID(formats strfmt.Registry) error {

	if swag.IsZero(m.RecipeRatingID) { // not required
		return nil
	}

	if err := validate.MinimumInt("recipe_rating_id", "body", int64(m.RecipeRatingID), 1, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecipeRating) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecipeRating) UnmarshalBinary(b []byte) error {
	var res RecipeRating
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
