// Code generated by go-swagger; DO NOT EDIT.

package rda

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetRDADataParams creates a new GetRDADataParams object
// with the default values initialized.
func NewGetRDADataParams() *GetRDADataParams {
	var (
		countryDefault = string("uk")
	)
	return &GetRDADataParams{
		Country: countryDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRDADataParamsWithTimeout creates a new GetRDADataParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRDADataParamsWithTimeout(timeout time.Duration) *GetRDADataParams {
	var (
		countryDefault = string("uk")
	)
	return &GetRDADataParams{
		Country: countryDefault,

		timeout: timeout,
	}
}

// NewGetRDADataParamsWithContext creates a new GetRDADataParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRDADataParamsWithContext(ctx context.Context) *GetRDADataParams {
	var (
		countryDefault = string("uk")
	)
	return &GetRDADataParams{
		Country: countryDefault,

		Context: ctx,
	}
}

// NewGetRDADataParamsWithHTTPClient creates a new GetRDADataParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRDADataParamsWithHTTPClient(client *http.Client) *GetRDADataParams {
	var (
		countryDefault = string("uk")
	)
	return &GetRDADataParams{
		Country:    countryDefault,
		HTTPClient: client,
	}
}

/*GetRDADataParams contains all the parameters to send to the API endpoint
for the get r d a data operation typically these are written to a http.Request
*/
type GetRDADataParams struct {

	/*Country
	  The country code which the RDA should reflect.

	*/
	Country string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get r d a data params
func (o *GetRDADataParams) WithTimeout(timeout time.Duration) *GetRDADataParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get r d a data params
func (o *GetRDADataParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get r d a data params
func (o *GetRDADataParams) WithContext(ctx context.Context) *GetRDADataParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get r d a data params
func (o *GetRDADataParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get r d a data params
func (o *GetRDADataParams) WithHTTPClient(client *http.Client) *GetRDADataParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get r d a data params
func (o *GetRDADataParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCountry adds the country to the get r d a data params
func (o *GetRDADataParams) WithCountry(country string) *GetRDADataParams {
	o.SetCountry(country)
	return o
}

// SetCountry adds the country to the get r d a data params
func (o *GetRDADataParams) SetCountry(country string) {
	o.Country = country
}

// WriteToRequest writes these params to a swagger request
func (o *GetRDADataParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param country
	if err := r.SetPathParam("country", o.Country); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
