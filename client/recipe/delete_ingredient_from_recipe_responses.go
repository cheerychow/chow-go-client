// Code generated by go-swagger; DO NOT EDIT.

package recipe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cheerychow/go-client/models"
)

// DeleteIngredientFromRecipeReader is a Reader for the DeleteIngredientFromRecipe structure.
type DeleteIngredientFromRecipeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteIngredientFromRecipeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewDeleteIngredientFromRecipeCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteIngredientFromRecipeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteIngredientFromRecipeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteIngredientFromRecipeCreated creates a DeleteIngredientFromRecipeCreated with default headers values
func NewDeleteIngredientFromRecipeCreated() *DeleteIngredientFromRecipeCreated {
	return &DeleteIngredientFromRecipeCreated{}
}

/*DeleteIngredientFromRecipeCreated handles this case with default header values.

Ingredient successfully deleted.
*/
type DeleteIngredientFromRecipeCreated struct {
	Payload string
}

func (o *DeleteIngredientFromRecipeCreated) Error() string {
	return fmt.Sprintf("[DELETE /recipe/{recipeId}/ingredient/{ingredient-id}][%d] deleteIngredientFromRecipeCreated  %+v", 201, o.Payload)
}

func (o *DeleteIngredientFromRecipeCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIngredientFromRecipeBadRequest creates a DeleteIngredientFromRecipeBadRequest with default headers values
func NewDeleteIngredientFromRecipeBadRequest() *DeleteIngredientFromRecipeBadRequest {
	return &DeleteIngredientFromRecipeBadRequest{}
}

/*DeleteIngredientFromRecipeBadRequest handles this case with default header values.

Description was not specified
*/
type DeleteIngredientFromRecipeBadRequest struct {
	Payload *models.HTTPAPIError
}

func (o *DeleteIngredientFromRecipeBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /recipe/{recipeId}/ingredient/{ingredient-id}][%d] deleteIngredientFromRecipeBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteIngredientFromRecipeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteIngredientFromRecipeNotFound creates a DeleteIngredientFromRecipeNotFound with default headers values
func NewDeleteIngredientFromRecipeNotFound() *DeleteIngredientFromRecipeNotFound {
	return &DeleteIngredientFromRecipeNotFound{}
}

/*DeleteIngredientFromRecipeNotFound handles this case with default header values.

Description was not specified
*/
type DeleteIngredientFromRecipeNotFound struct {
	Payload *models.HTTPAPIError
}

func (o *DeleteIngredientFromRecipeNotFound) Error() string {
	return fmt.Sprintf("[DELETE /recipe/{recipeId}/ingredient/{ingredient-id}][%d] deleteIngredientFromRecipeNotFound  %+v", 404, o.Payload)
}

func (o *DeleteIngredientFromRecipeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
