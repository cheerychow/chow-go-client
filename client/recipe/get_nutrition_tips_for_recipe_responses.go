// Code generated by go-swagger; DO NOT EDIT.

package recipe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cheerychow/chow-go-client/models"
)

// GetNutritionTipsForRecipeReader is a Reader for the GetNutritionTipsForRecipe structure.
type GetNutritionTipsForRecipeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNutritionTipsForRecipeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetNutritionTipsForRecipeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetNutritionTipsForRecipeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetNutritionTipsForRecipeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetNutritionTipsForRecipeOK creates a GetNutritionTipsForRecipeOK with default headers values
func NewGetNutritionTipsForRecipeOK() *GetNutritionTipsForRecipeOK {
	return &GetNutritionTipsForRecipeOK{}
}

/*GetNutritionTipsForRecipeOK handles this case with default header values.

Description was not specified
*/
type GetNutritionTipsForRecipeOK struct {
	Payload []*models.NutritionTip
}

func (o *GetNutritionTipsForRecipeOK) Error() string {
	return fmt.Sprintf("[GET /recipe/{recipeId}/nutrition-tip][%d] getNutritionTipsForRecipeOK  %+v", 200, o.Payload)
}

func (o *GetNutritionTipsForRecipeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNutritionTipsForRecipeBadRequest creates a GetNutritionTipsForRecipeBadRequest with default headers values
func NewGetNutritionTipsForRecipeBadRequest() *GetNutritionTipsForRecipeBadRequest {
	return &GetNutritionTipsForRecipeBadRequest{}
}

/*GetNutritionTipsForRecipeBadRequest handles this case with default header values.

Description was not specified
*/
type GetNutritionTipsForRecipeBadRequest struct {
	Payload *models.HTTPAPIError
}

func (o *GetNutritionTipsForRecipeBadRequest) Error() string {
	return fmt.Sprintf("[GET /recipe/{recipeId}/nutrition-tip][%d] getNutritionTipsForRecipeBadRequest  %+v", 400, o.Payload)
}

func (o *GetNutritionTipsForRecipeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNutritionTipsForRecipeNotFound creates a GetNutritionTipsForRecipeNotFound with default headers values
func NewGetNutritionTipsForRecipeNotFound() *GetNutritionTipsForRecipeNotFound {
	return &GetNutritionTipsForRecipeNotFound{}
}

/*GetNutritionTipsForRecipeNotFound handles this case with default header values.

Recipe not found
*/
type GetNutritionTipsForRecipeNotFound struct {
	Payload *models.HTTPAPIError
}

func (o *GetNutritionTipsForRecipeNotFound) Error() string {
	return fmt.Sprintf("[GET /recipe/{recipeId}/nutrition-tip][%d] getNutritionTipsForRecipeNotFound  %+v", 404, o.Payload)
}

func (o *GetNutritionTipsForRecipeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
