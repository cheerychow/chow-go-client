// Code generated by go-swagger; DO NOT EDIT.

package recipe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetIngredientFromRecipeWithNutritionParams creates a new GetIngredientFromRecipeWithNutritionParams object
// with the default values initialized.
func NewGetIngredientFromRecipeWithNutritionParams() *GetIngredientFromRecipeWithNutritionParams {
	var ()
	return &GetIngredientFromRecipeWithNutritionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetIngredientFromRecipeWithNutritionParamsWithTimeout creates a new GetIngredientFromRecipeWithNutritionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetIngredientFromRecipeWithNutritionParamsWithTimeout(timeout time.Duration) *GetIngredientFromRecipeWithNutritionParams {
	var ()
	return &GetIngredientFromRecipeWithNutritionParams{

		timeout: timeout,
	}
}

// NewGetIngredientFromRecipeWithNutritionParamsWithContext creates a new GetIngredientFromRecipeWithNutritionParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetIngredientFromRecipeWithNutritionParamsWithContext(ctx context.Context) *GetIngredientFromRecipeWithNutritionParams {
	var ()
	return &GetIngredientFromRecipeWithNutritionParams{

		Context: ctx,
	}
}

// NewGetIngredientFromRecipeWithNutritionParamsWithHTTPClient creates a new GetIngredientFromRecipeWithNutritionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetIngredientFromRecipeWithNutritionParamsWithHTTPClient(client *http.Client) *GetIngredientFromRecipeWithNutritionParams {
	var ()
	return &GetIngredientFromRecipeWithNutritionParams{
		HTTPClient: client,
	}
}

/*GetIngredientFromRecipeWithNutritionParams contains all the parameters to send to the API endpoint
for the get ingredient from recipe with nutrition operation typically these are written to a http.Request
*/
type GetIngredientFromRecipeWithNutritionParams struct {

	/*IngredientID
	  The ingredient ID, if you want a particular ingredient in the recipe.

	*/
	IngredientID int64
	/*RecipeID
	  The recipe ID

	*/
	RecipeID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get ingredient from recipe with nutrition params
func (o *GetIngredientFromRecipeWithNutritionParams) WithTimeout(timeout time.Duration) *GetIngredientFromRecipeWithNutritionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get ingredient from recipe with nutrition params
func (o *GetIngredientFromRecipeWithNutritionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get ingredient from recipe with nutrition params
func (o *GetIngredientFromRecipeWithNutritionParams) WithContext(ctx context.Context) *GetIngredientFromRecipeWithNutritionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get ingredient from recipe with nutrition params
func (o *GetIngredientFromRecipeWithNutritionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get ingredient from recipe with nutrition params
func (o *GetIngredientFromRecipeWithNutritionParams) WithHTTPClient(client *http.Client) *GetIngredientFromRecipeWithNutritionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get ingredient from recipe with nutrition params
func (o *GetIngredientFromRecipeWithNutritionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIngredientID adds the ingredientID to the get ingredient from recipe with nutrition params
func (o *GetIngredientFromRecipeWithNutritionParams) WithIngredientID(ingredientID int64) *GetIngredientFromRecipeWithNutritionParams {
	o.SetIngredientID(ingredientID)
	return o
}

// SetIngredientID adds the ingredientId to the get ingredient from recipe with nutrition params
func (o *GetIngredientFromRecipeWithNutritionParams) SetIngredientID(ingredientID int64) {
	o.IngredientID = ingredientID
}

// WithRecipeID adds the recipeID to the get ingredient from recipe with nutrition params
func (o *GetIngredientFromRecipeWithNutritionParams) WithRecipeID(recipeID string) *GetIngredientFromRecipeWithNutritionParams {
	o.SetRecipeID(recipeID)
	return o
}

// SetRecipeID adds the recipeId to the get ingredient from recipe with nutrition params
func (o *GetIngredientFromRecipeWithNutritionParams) SetRecipeID(recipeID string) {
	o.RecipeID = recipeID
}

// WriteToRequest writes these params to a swagger request
func (o *GetIngredientFromRecipeWithNutritionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param ingredient-id
	if err := r.SetPathParam("ingredient-id", swag.FormatInt64(o.IngredientID)); err != nil {
		return err
	}

	// path param recipeId
	if err := r.SetPathParam("recipeId", o.RecipeID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
