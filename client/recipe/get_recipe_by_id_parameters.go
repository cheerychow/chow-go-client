// Code generated by go-swagger; DO NOT EDIT.

package recipe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetRecipeByIDParams creates a new GetRecipeByIDParams object
// with the default values initialized.
func NewGetRecipeByIDParams() *GetRecipeByIDParams {
	var (
		countryDefault                    = string("uk")
		includeCommonNamesDefault         = bool(false)
		includeFoodIDDefault              = bool(false)
		includeFoodNamesDefault           = bool(false)
		includeGdaDefault                 = bool(false)
		includeNutritionDefault           = bool(false)
		includeNutritionPerPortionDefault = bool(false)
		includeNutritionTipsDefault       = bool(false)
		includeRecipeCategoriesDefault    = bool(false)
	)
	return &GetRecipeByIDParams{
		Country:                    &countryDefault,
		IncludeCommonNames:         &includeCommonNamesDefault,
		IncludeFoodID:              &includeFoodIDDefault,
		IncludeFoodNames:           &includeFoodNamesDefault,
		IncludeGda:                 &includeGdaDefault,
		IncludeNutrition:           &includeNutritionDefault,
		IncludeNutritionPerPortion: &includeNutritionPerPortionDefault,
		IncludeNutritionTips:       &includeNutritionTipsDefault,
		IncludeRecipeCategories:    &includeRecipeCategoriesDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRecipeByIDParamsWithTimeout creates a new GetRecipeByIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRecipeByIDParamsWithTimeout(timeout time.Duration) *GetRecipeByIDParams {
	var (
		countryDefault                    = string("uk")
		includeCommonNamesDefault         = bool(false)
		includeFoodIDDefault              = bool(false)
		includeFoodNamesDefault           = bool(false)
		includeGdaDefault                 = bool(false)
		includeNutritionDefault           = bool(false)
		includeNutritionPerPortionDefault = bool(false)
		includeNutritionTipsDefault       = bool(false)
		includeRecipeCategoriesDefault    = bool(false)
	)
	return &GetRecipeByIDParams{
		Country:                    &countryDefault,
		IncludeCommonNames:         &includeCommonNamesDefault,
		IncludeFoodID:              &includeFoodIDDefault,
		IncludeFoodNames:           &includeFoodNamesDefault,
		IncludeGda:                 &includeGdaDefault,
		IncludeNutrition:           &includeNutritionDefault,
		IncludeNutritionPerPortion: &includeNutritionPerPortionDefault,
		IncludeNutritionTips:       &includeNutritionTipsDefault,
		IncludeRecipeCategories:    &includeRecipeCategoriesDefault,

		timeout: timeout,
	}
}

// NewGetRecipeByIDParamsWithContext creates a new GetRecipeByIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRecipeByIDParamsWithContext(ctx context.Context) *GetRecipeByIDParams {
	var (
		countryDefault                    = string("uk")
		includeCommonNamesDefault         = bool(false)
		includeFoodIdDefault              = bool(false)
		includeFoodNamesDefault           = bool(false)
		includeGdaDefault                 = bool(false)
		includeNutritionDefault           = bool(false)
		includeNutritionPerPortionDefault = bool(false)
		includeNutritionTipsDefault       = bool(false)
		includeRecipeCategoriesDefault    = bool(false)
	)
	return &GetRecipeByIDParams{
		Country:                    &countryDefault,
		IncludeCommonNames:         &includeCommonNamesDefault,
		IncludeFoodID:              &includeFoodIdDefault,
		IncludeFoodNames:           &includeFoodNamesDefault,
		IncludeGda:                 &includeGdaDefault,
		IncludeNutrition:           &includeNutritionDefault,
		IncludeNutritionPerPortion: &includeNutritionPerPortionDefault,
		IncludeNutritionTips:       &includeNutritionTipsDefault,
		IncludeRecipeCategories:    &includeRecipeCategoriesDefault,

		Context: ctx,
	}
}

// NewGetRecipeByIDParamsWithHTTPClient creates a new GetRecipeByIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRecipeByIDParamsWithHTTPClient(client *http.Client) *GetRecipeByIDParams {
	var (
		countryDefault                    = string("uk")
		includeCommonNamesDefault         = bool(false)
		includeFoodIdDefault              = bool(false)
		includeFoodNamesDefault           = bool(false)
		includeGdaDefault                 = bool(false)
		includeNutritionDefault           = bool(false)
		includeNutritionPerPortionDefault = bool(false)
		includeNutritionTipsDefault       = bool(false)
		includeRecipeCategoriesDefault    = bool(false)
	)
	return &GetRecipeByIDParams{
		Country:                    &countryDefault,
		IncludeCommonNames:         &includeCommonNamesDefault,
		IncludeFoodID:              &includeFoodIdDefault,
		IncludeFoodNames:           &includeFoodNamesDefault,
		IncludeGda:                 &includeGdaDefault,
		IncludeNutrition:           &includeNutritionDefault,
		IncludeNutritionPerPortion: &includeNutritionPerPortionDefault,
		IncludeNutritionTips:       &includeNutritionTipsDefault,
		IncludeRecipeCategories:    &includeRecipeCategoriesDefault,
		HTTPClient:                 client,
	}
}

/*GetRecipeByIDParams contains all the parameters to send to the API endpoint
for the get recipe by ID operation typically these are written to a http.Request
*/
type GetRecipeByIDParams struct {

	/*Country
	  The country code which the RDA should reflect.

	*/
	Country *string
	/*IncludeCommonNames
	  Should the recipe's ingredient common names be included?

	*/
	IncludeCommonNames *bool
	/*IncludeFoodID
	  Should the recipe's ingredient food id's be included? This can be useful if you need the names of foods as a map, where the key is the food id, the value the food name.

	*/
	IncludeFoodID *bool
	/*IncludeFoodNames
	  Should the recipe's ingredient food names be included (this is different from the common names since the storage is a map, where key is the foodId and value is the ingredient common name)

	*/
	IncludeFoodNames *bool
	/*IncludeGda
	  Should the general daily provision for the recipe be included?

	*/
	IncludeGda *bool
	/*IncludeNutrition
	  Should the recipe's nutrition field be populated?

	*/
	IncludeNutrition *bool
	/*IncludeNutritionPerPortion
	  Should the recipe's nutrition per portion be included?

	*/
	IncludeNutritionPerPortion *bool
	/*IncludeNutritionTips
	  Provide tips and information regarding the nutritional content for this recipe.

	*/
	IncludeNutritionTips *bool
	/*IncludeRecipeCategories
	  Should the recipe's categories be included? The Recipe categories include; vegan-friendly, vegetarion, pescatarian, gluten-free, low-fat, low-sat-fat, low-sugar.

	*/
	IncludeRecipeCategories *bool
	/*PortionSize
	  How large do you want the portions to be? The recipe creators will often decide how many portions a recipe will produce, when following the instructions. However, some people have healthier appetites than others, so this parameter allows control of this element of the recipe. This value is in gramms.

	*/
	PortionSize *int32
	/*RecipeID
	  Recipe id

	*/
	RecipeID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get recipe by ID params
func (o *GetRecipeByIDParams) WithTimeout(timeout time.Duration) *GetRecipeByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get recipe by ID params
func (o *GetRecipeByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get recipe by ID params
func (o *GetRecipeByIDParams) WithContext(ctx context.Context) *GetRecipeByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get recipe by ID params
func (o *GetRecipeByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get recipe by ID params
func (o *GetRecipeByIDParams) WithHTTPClient(client *http.Client) *GetRecipeByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get recipe by ID params
func (o *GetRecipeByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCountry adds the country to the get recipe by ID params
func (o *GetRecipeByIDParams) WithCountry(country *string) *GetRecipeByIDParams {
	o.SetCountry(country)
	return o
}

// SetCountry adds the country to the get recipe by ID params
func (o *GetRecipeByIDParams) SetCountry(country *string) {
	o.Country = country
}

// WithIncludeCommonNames adds the includeCommonNames to the get recipe by ID params
func (o *GetRecipeByIDParams) WithIncludeCommonNames(includeCommonNames *bool) *GetRecipeByIDParams {
	o.SetIncludeCommonNames(includeCommonNames)
	return o
}

// SetIncludeCommonNames adds the includeCommonNames to the get recipe by ID params
func (o *GetRecipeByIDParams) SetIncludeCommonNames(includeCommonNames *bool) {
	o.IncludeCommonNames = includeCommonNames
}

// WithIncludeFoodID adds the includeFoodID to the get recipe by ID params
func (o *GetRecipeByIDParams) WithIncludeFoodID(includeFoodID *bool) *GetRecipeByIDParams {
	o.SetIncludeFoodID(includeFoodID)
	return o
}

// SetIncludeFoodID adds the includeFoodId to the get recipe by ID params
func (o *GetRecipeByIDParams) SetIncludeFoodID(includeFoodID *bool) {
	o.IncludeFoodID = includeFoodID
}

// WithIncludeFoodNames adds the includeFoodNames to the get recipe by ID params
func (o *GetRecipeByIDParams) WithIncludeFoodNames(includeFoodNames *bool) *GetRecipeByIDParams {
	o.SetIncludeFoodNames(includeFoodNames)
	return o
}

// SetIncludeFoodNames adds the includeFoodNames to the get recipe by ID params
func (o *GetRecipeByIDParams) SetIncludeFoodNames(includeFoodNames *bool) {
	o.IncludeFoodNames = includeFoodNames
}

// WithIncludeGda adds the includeGda to the get recipe by ID params
func (o *GetRecipeByIDParams) WithIncludeGda(includeGda *bool) *GetRecipeByIDParams {
	o.SetIncludeGda(includeGda)
	return o
}

// SetIncludeGda adds the includeGda to the get recipe by ID params
func (o *GetRecipeByIDParams) SetIncludeGda(includeGda *bool) {
	o.IncludeGda = includeGda
}

// WithIncludeNutrition adds the includeNutrition to the get recipe by ID params
func (o *GetRecipeByIDParams) WithIncludeNutrition(includeNutrition *bool) *GetRecipeByIDParams {
	o.SetIncludeNutrition(includeNutrition)
	return o
}

// SetIncludeNutrition adds the includeNutrition to the get recipe by ID params
func (o *GetRecipeByIDParams) SetIncludeNutrition(includeNutrition *bool) {
	o.IncludeNutrition = includeNutrition
}

// WithIncludeNutritionPerPortion adds the includeNutritionPerPortion to the get recipe by ID params
func (o *GetRecipeByIDParams) WithIncludeNutritionPerPortion(includeNutritionPerPortion *bool) *GetRecipeByIDParams {
	o.SetIncludeNutritionPerPortion(includeNutritionPerPortion)
	return o
}

// SetIncludeNutritionPerPortion adds the includeNutritionPerPortion to the get recipe by ID params
func (o *GetRecipeByIDParams) SetIncludeNutritionPerPortion(includeNutritionPerPortion *bool) {
	o.IncludeNutritionPerPortion = includeNutritionPerPortion
}

// WithIncludeNutritionTips adds the includeNutritionTips to the get recipe by ID params
func (o *GetRecipeByIDParams) WithIncludeNutritionTips(includeNutritionTips *bool) *GetRecipeByIDParams {
	o.SetIncludeNutritionTips(includeNutritionTips)
	return o
}

// SetIncludeNutritionTips adds the includeNutritionTips to the get recipe by ID params
func (o *GetRecipeByIDParams) SetIncludeNutritionTips(includeNutritionTips *bool) {
	o.IncludeNutritionTips = includeNutritionTips
}

// WithIncludeRecipeCategories adds the includeRecipeCategories to the get recipe by ID params
func (o *GetRecipeByIDParams) WithIncludeRecipeCategories(includeRecipeCategories *bool) *GetRecipeByIDParams {
	o.SetIncludeRecipeCategories(includeRecipeCategories)
	return o
}

// SetIncludeRecipeCategories adds the includeRecipeCategories to the get recipe by ID params
func (o *GetRecipeByIDParams) SetIncludeRecipeCategories(includeRecipeCategories *bool) {
	o.IncludeRecipeCategories = includeRecipeCategories
}

// WithPortionSize adds the portionSize to the get recipe by ID params
func (o *GetRecipeByIDParams) WithPortionSize(portionSize *int32) *GetRecipeByIDParams {
	o.SetPortionSize(portionSize)
	return o
}

// SetPortionSize adds the portionSize to the get recipe by ID params
func (o *GetRecipeByIDParams) SetPortionSize(portionSize *int32) {
	o.PortionSize = portionSize
}

// WithRecipeID adds the recipeID to the get recipe by ID params
func (o *GetRecipeByIDParams) WithRecipeID(recipeID string) *GetRecipeByIDParams {
	o.SetRecipeID(recipeID)
	return o
}

// SetRecipeID adds the recipeId to the get recipe by ID params
func (o *GetRecipeByIDParams) SetRecipeID(recipeID string) {
	o.RecipeID = recipeID
}

// WriteToRequest writes these params to a swagger request
func (o *GetRecipeByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Country != nil {

		// query param country
		var qrCountry string
		if o.Country != nil {
			qrCountry = *o.Country
		}
		qCountry := qrCountry
		if qCountry != "" {
			if err := r.SetQueryParam("country", qCountry); err != nil {
				return err
			}
		}

	}

	if o.IncludeCommonNames != nil {

		// query param include-common-names
		var qrIncludeCommonNames bool
		if o.IncludeCommonNames != nil {
			qrIncludeCommonNames = *o.IncludeCommonNames
		}
		qIncludeCommonNames := swag.FormatBool(qrIncludeCommonNames)
		if qIncludeCommonNames != "" {
			if err := r.SetQueryParam("include-common-names", qIncludeCommonNames); err != nil {
				return err
			}
		}

	}

	if o.IncludeFoodID != nil {

		// query param include-food-id
		var qrIncludeFoodID bool
		if o.IncludeFoodID != nil {
			qrIncludeFoodID = *o.IncludeFoodID
		}
		qIncludeFoodID := swag.FormatBool(qrIncludeFoodID)
		if qIncludeFoodID != "" {
			if err := r.SetQueryParam("include-food-id", qIncludeFoodID); err != nil {
				return err
			}
		}

	}

	if o.IncludeFoodNames != nil {

		// query param include-food-names
		var qrIncludeFoodNames bool
		if o.IncludeFoodNames != nil {
			qrIncludeFoodNames = *o.IncludeFoodNames
		}
		qIncludeFoodNames := swag.FormatBool(qrIncludeFoodNames)
		if qIncludeFoodNames != "" {
			if err := r.SetQueryParam("include-food-names", qIncludeFoodNames); err != nil {
				return err
			}
		}

	}

	if o.IncludeGda != nil {

		// query param include-gda
		var qrIncludeGda bool
		if o.IncludeGda != nil {
			qrIncludeGda = *o.IncludeGda
		}
		qIncludeGda := swag.FormatBool(qrIncludeGda)
		if qIncludeGda != "" {
			if err := r.SetQueryParam("include-gda", qIncludeGda); err != nil {
				return err
			}
		}

	}

	if o.IncludeNutrition != nil {

		// query param include-nutrition
		var qrIncludeNutrition bool
		if o.IncludeNutrition != nil {
			qrIncludeNutrition = *o.IncludeNutrition
		}
		qIncludeNutrition := swag.FormatBool(qrIncludeNutrition)
		if qIncludeNutrition != "" {
			if err := r.SetQueryParam("include-nutrition", qIncludeNutrition); err != nil {
				return err
			}
		}

	}

	if o.IncludeNutritionPerPortion != nil {

		// query param include-nutrition-per-portion
		var qrIncludeNutritionPerPortion bool
		if o.IncludeNutritionPerPortion != nil {
			qrIncludeNutritionPerPortion = *o.IncludeNutritionPerPortion
		}
		qIncludeNutritionPerPortion := swag.FormatBool(qrIncludeNutritionPerPortion)
		if qIncludeNutritionPerPortion != "" {
			if err := r.SetQueryParam("include-nutrition-per-portion", qIncludeNutritionPerPortion); err != nil {
				return err
			}
		}

	}

	if o.IncludeNutritionTips != nil {

		// query param include-nutrition-tips
		var qrIncludeNutritionTips bool
		if o.IncludeNutritionTips != nil {
			qrIncludeNutritionTips = *o.IncludeNutritionTips
		}
		qIncludeNutritionTips := swag.FormatBool(qrIncludeNutritionTips)
		if qIncludeNutritionTips != "" {
			if err := r.SetQueryParam("include-nutrition-tips", qIncludeNutritionTips); err != nil {
				return err
			}
		}

	}

	if o.IncludeRecipeCategories != nil {

		// query param include-recipe-categories
		var qrIncludeRecipeCategories bool
		if o.IncludeRecipeCategories != nil {
			qrIncludeRecipeCategories = *o.IncludeRecipeCategories
		}
		qIncludeRecipeCategories := swag.FormatBool(qrIncludeRecipeCategories)
		if qIncludeRecipeCategories != "" {
			if err := r.SetQueryParam("include-recipe-categories", qIncludeRecipeCategories); err != nil {
				return err
			}
		}

	}

	if o.PortionSize != nil {

		// query param portionSize
		var qrPortionSize int32
		if o.PortionSize != nil {
			qrPortionSize = *o.PortionSize
		}
		qPortionSize := swag.FormatInt32(qrPortionSize)
		if qPortionSize != "" {
			if err := r.SetQueryParam("portionSize", qPortionSize); err != nil {
				return err
			}
		}

	}

	// path param recipeId
	if err := r.SetPathParam("recipeId", o.RecipeID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
