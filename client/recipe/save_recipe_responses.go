// Code generated by go-swagger; DO NOT EDIT.

package recipe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cheerychow/go-client/models"
)

// SaveRecipeReader is a Reader for the SaveRecipe structure.
type SaveRecipeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SaveRecipeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSaveRecipeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 201:
		result := NewSaveRecipeCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewSaveRecipeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewSaveRecipeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSaveRecipeOK creates a SaveRecipeOK with default headers values
func NewSaveRecipeOK() *SaveRecipeOK {
	return &SaveRecipeOK{}
}

/*SaveRecipeOK handles this case with default header values.

No response was specified
*/
type SaveRecipeOK struct {
	Payload *models.Recipe
}

func (o *SaveRecipeOK) Error() string {
	return fmt.Sprintf("[PUT /recipe/{recipeId}][%d] saveRecipeOK  %+v", 200, o.Payload)
}

func (o *SaveRecipeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Recipe)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSaveRecipeCreated creates a SaveRecipeCreated with default headers values
func NewSaveRecipeCreated() *SaveRecipeCreated {
	return &SaveRecipeCreated{}
}

/*SaveRecipeCreated handles this case with default header values.

Description was not specified
*/
type SaveRecipeCreated struct {
	Payload *models.Recipe
}

func (o *SaveRecipeCreated) Error() string {
	return fmt.Sprintf("[PUT /recipe/{recipeId}][%d] saveRecipeCreated  %+v", 201, o.Payload)
}

func (o *SaveRecipeCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Recipe)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSaveRecipeUnauthorized creates a SaveRecipeUnauthorized with default headers values
func NewSaveRecipeUnauthorized() *SaveRecipeUnauthorized {
	return &SaveRecipeUnauthorized{}
}

/*SaveRecipeUnauthorized handles this case with default header values.

Not logged in
*/
type SaveRecipeUnauthorized struct {
	Payload *models.HTTPAPIError
}

func (o *SaveRecipeUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /recipe/{recipeId}][%d] saveRecipeUnauthorized  %+v", 401, o.Payload)
}

func (o *SaveRecipeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSaveRecipeNotFound creates a SaveRecipeNotFound with default headers values
func NewSaveRecipeNotFound() *SaveRecipeNotFound {
	return &SaveRecipeNotFound{}
}

/*SaveRecipeNotFound handles this case with default header values.

Recipe doesn't exist.
*/
type SaveRecipeNotFound struct {
	Payload *models.HTTPAPIError
}

func (o *SaveRecipeNotFound) Error() string {
	return fmt.Sprintf("[PUT /recipe/{recipeId}][%d] saveRecipeNotFound  %+v", 404, o.Payload)
}

func (o *SaveRecipeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
