// Code generated by go-swagger; DO NOT EDIT.

package recipe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPagedSearchRecipesParams creates a new PagedSearchRecipesParams object
// with the default values initialized.
func NewPagedSearchRecipesParams() *PagedSearchRecipesParams {
	var (
		allowNumMissingIngredientsDefault = int16(7)
		includeCommonNamesDefault         = bool(false)
		includeFoodIDDefault              = bool(false)
		includeFoodNamesDefault           = bool(false)
		includeGdaDefault                 = bool(false)
		includeNutritionDefault           = bool(false)
		includeNutritionPerPortionDefault = bool(false)
		includeNutritionTipsDefault       = bool(false)
		includeRecipeCategoriesDefault    = bool(false)
		nutritionSortbyDefault            = string("calories")
		sortbyDefault                     = string("calories")
		sortdirDefault                    = string("desc")
	)
	return &PagedSearchRecipesParams{
		AllowNumMissingIngredients: &allowNumMissingIngredientsDefault,
		IncludeCommonNames:         &includeCommonNamesDefault,
		IncludeFoodID:              &includeFoodIDDefault,
		IncludeFoodNames:           &includeFoodNamesDefault,
		IncludeGda:                 &includeGdaDefault,
		IncludeNutrition:           &includeNutritionDefault,
		IncludeNutritionPerPortion: &includeNutritionPerPortionDefault,
		IncludeNutritionTips:       &includeNutritionTipsDefault,
		IncludeRecipeCategories:    &includeRecipeCategoriesDefault,
		NutritionSortby:            &nutritionSortbyDefault,
		Sortby:                     &sortbyDefault,
		Sortdir:                    &sortdirDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewPagedSearchRecipesParamsWithTimeout creates a new PagedSearchRecipesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPagedSearchRecipesParamsWithTimeout(timeout time.Duration) *PagedSearchRecipesParams {
	var (
		allowNumMissingIngredientsDefault = int16(7)
		includeCommonNamesDefault         = bool(false)
		includeFoodIDDefault              = bool(false)
		includeFoodNamesDefault           = bool(false)
		includeGdaDefault                 = bool(false)
		includeNutritionDefault           = bool(false)
		includeNutritionPerPortionDefault = bool(false)
		includeNutritionTipsDefault       = bool(false)
		includeRecipeCategoriesDefault    = bool(false)
		nutritionSortbyDefault            = string("calories")
		sortbyDefault                     = string("calories")
		sortdirDefault                    = string("desc")
	)
	return &PagedSearchRecipesParams{
		AllowNumMissingIngredients: &allowNumMissingIngredientsDefault,
		IncludeCommonNames:         &includeCommonNamesDefault,
		IncludeFoodID:              &includeFoodIDDefault,
		IncludeFoodNames:           &includeFoodNamesDefault,
		IncludeGda:                 &includeGdaDefault,
		IncludeNutrition:           &includeNutritionDefault,
		IncludeNutritionPerPortion: &includeNutritionPerPortionDefault,
		IncludeNutritionTips:       &includeNutritionTipsDefault,
		IncludeRecipeCategories:    &includeRecipeCategoriesDefault,
		NutritionSortby:            &nutritionSortbyDefault,
		Sortby:                     &sortbyDefault,
		Sortdir:                    &sortdirDefault,

		timeout: timeout,
	}
}

// NewPagedSearchRecipesParamsWithContext creates a new PagedSearchRecipesParams object
// with the default values initialized, and the ability to set a context for a request
func NewPagedSearchRecipesParamsWithContext(ctx context.Context) *PagedSearchRecipesParams {
	var (
		allowNumMissingIngredientsDefault = int16(7)
		includeCommonNamesDefault         = bool(false)
		includeFoodIdDefault              = bool(false)
		includeFoodNamesDefault           = bool(false)
		includeGdaDefault                 = bool(false)
		includeNutritionDefault           = bool(false)
		includeNutritionPerPortionDefault = bool(false)
		includeNutritionTipsDefault       = bool(false)
		includeRecipeCategoriesDefault    = bool(false)
		nutritionSortbyDefault            = string("calories")
		sortbyDefault                     = string("calories")
		sortdirDefault                    = string("desc")
	)
	return &PagedSearchRecipesParams{
		AllowNumMissingIngredients: &allowNumMissingIngredientsDefault,
		IncludeCommonNames:         &includeCommonNamesDefault,
		IncludeFoodID:              &includeFoodIdDefault,
		IncludeFoodNames:           &includeFoodNamesDefault,
		IncludeGda:                 &includeGdaDefault,
		IncludeNutrition:           &includeNutritionDefault,
		IncludeNutritionPerPortion: &includeNutritionPerPortionDefault,
		IncludeNutritionTips:       &includeNutritionTipsDefault,
		IncludeRecipeCategories:    &includeRecipeCategoriesDefault,
		NutritionSortby:            &nutritionSortbyDefault,
		Sortby:                     &sortbyDefault,
		Sortdir:                    &sortdirDefault,

		Context: ctx,
	}
}

// NewPagedSearchRecipesParamsWithHTTPClient creates a new PagedSearchRecipesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPagedSearchRecipesParamsWithHTTPClient(client *http.Client) *PagedSearchRecipesParams {
	var (
		allowNumMissingIngredientsDefault = int16(7)
		includeCommonNamesDefault         = bool(false)
		includeFoodIdDefault              = bool(false)
		includeFoodNamesDefault           = bool(false)
		includeGdaDefault                 = bool(false)
		includeNutritionDefault           = bool(false)
		includeNutritionPerPortionDefault = bool(false)
		includeNutritionTipsDefault       = bool(false)
		includeRecipeCategoriesDefault    = bool(false)
		nutritionSortbyDefault            = string("calories")
		sortbyDefault                     = string("calories")
		sortdirDefault                    = string("desc")
	)
	return &PagedSearchRecipesParams{
		AllowNumMissingIngredients: &allowNumMissingIngredientsDefault,
		IncludeCommonNames:         &includeCommonNamesDefault,
		IncludeFoodID:              &includeFoodIdDefault,
		IncludeFoodNames:           &includeFoodNamesDefault,
		IncludeGda:                 &includeGdaDefault,
		IncludeNutrition:           &includeNutritionDefault,
		IncludeNutritionPerPortion: &includeNutritionPerPortionDefault,
		IncludeNutritionTips:       &includeNutritionTipsDefault,
		IncludeRecipeCategories:    &includeRecipeCategoriesDefault,
		NutritionSortby:            &nutritionSortbyDefault,
		Sortby:                     &sortbyDefault,
		Sortdir:                    &sortdirDefault,
		HTTPClient:                 client,
	}
}

/*PagedSearchRecipesParams contains all the parameters to send to the API endpoint
for the paged search recipes operation typically these are written to a http.Request
*/
type PagedSearchRecipesParams struct {

	/*AllowNumMissingIngredients
	  When searching for recipes via the ingredients (i.e. food IDs), allow up to this number of the ingredients to be missing. The higher this number, the slower the response will be since more results are scanned.

	*/
	AllowNumMissingIngredients *int16
	/*Calories
	  This value must have a preceeding operator before the number of calories to indicate the search type; > < >= <= are valid. For example, if you want to search for anything with less than X calories per portion, you could use a value of '<300' and this would result in a result set which includes calories less than 300 calories. You can add more calories search by using the & or the | boolean logic operators.

	*/
	Calories *string
	/*FoodIds
	  A comma separated list of food IDs which each recipe should contain.

	*/
	FoodIds *string
	/*GlutenFree
	  List only recipes which have ingredients that are gluten free.

	*/
	GlutenFree *bool
	/*HasAlcohol
	  List only recipes which has alcohol.

	*/
	HasAlcohol *bool
	/*HasCeral
	  List only recipes which has ceral.

	*/
	HasCeral *bool
	/*HasDairy
	  List only recipes which has dairy.

	*/
	HasDairy *bool
	/*HasEggs
	  List only recipes which has-eggs.

	*/
	HasEggs *bool
	/*HasFruit
	  List only recipes which has fruit.

	*/
	HasFruit *bool
	/*HasMeat
	  List only recipes which has meat (non fish meats).

	*/
	HasMeat *bool
	/*HasNuts
	  List only recipes which has-nuts.

	*/
	HasNuts *bool
	/*HasSugar
	  List only recipes which has high sugar levels.

	*/
	HasSugar *bool
	/*HasImage
	  Only include recipes that have valid recipe images?

	*/
	HasImage *bool
	/*IncludeCommonNames
	  Should the recipe's ingredient common names be included?

	*/
	IncludeCommonNames *bool
	/*IncludeFoodID
	  Should the recipe's ingredient food id's be included? This can be useful if you need the names of foods as a map, where the key is the food id, the value the food name.

	*/
	IncludeFoodID *bool
	/*IncludeFoodNames
	  Should the recipe's ingredient food names be included (this is different from the common names since the storage is a map, where key is the foodId and value is the ingredient common name)

	*/
	IncludeFoodNames *bool
	/*IncludeGda
	  Should the general daily provision for the recipe be included?

	*/
	IncludeGda *bool
	/*IncludeNutrition
	  Should the recipe's nutrition field be populated?

	*/
	IncludeNutrition *bool
	/*IncludeNutritionPerPortion
	  Should the recipe's nutrition per portion be included?

	*/
	IncludeNutritionPerPortion *bool
	/*IncludeNutritionTips
	  Provide tips and information regarding the nutritional content for this recipe.

	*/
	IncludeNutritionTips *bool
	/*IncludeRecipeCategories
	  Should the recipe's categories be included? The Recipe categories include; vegan-friendly, vegetarion, pescatarian, gluten-free, low-fat, low-sat-fat, low-sugar.

	*/
	IncludeRecipeCategories *bool
	/*IsCondiment
	  Include/exclude recipes which are condiments.

	*/
	IsCondiment *bool
	/*IsDinner
	  List only recipes which has alcohol.

	*/
	IsDinner *bool
	/*Limit
	  Limit the number of results returned.

	*/
	Limit *int32
	/*LowFat
	  List only recipes which are low in fat.

	*/
	LowFat *bool
	/*LowSatFat
	  List only recipes which are low in saturated fat.

	*/
	LowSatFat *bool
	/*LowSugar
	  List only recipes which are low in sugar.

	*/
	LowSugar *bool
	/*NutritionSortby
	  The nutrition field to sort by.

	*/
	NutritionSortby *string
	/*Offset
	  The offset into search results.

	*/
	Offset *int64
	/*OwnerHandle
	  The owner's unique handle.

	*/
	OwnerHandle *string
	/*OwnerID
	  The owner's primary key.

	*/
	OwnerID *int64
	/*Pescatarian
	  List only recipes which have ingredients that are pescatarianfriendly.

	*/
	Pescatarian *bool
	/*Protein
	  This value must have a preceeding operator before the number of calories to indicate the search type; > < >= <= are valid. For example, if you want to search for anything with less than X calories per portion, you could use a value of '<300' and this would result in a result set which includes calories less than 300 calories. You can add more calories search by using the & or the | boolean logic operators.

	*/
	Protein *string
	/*QuickAndEasy
	  List only recipes which are quick and easy to cook.

	*/
	QuickAndEasy *bool
	/*RecipeName
	  Search the recipe name, used as a wild card on the name column like so; '%name%'

	*/
	RecipeName *string
	/*SavoryFood
	  List only savory recipes.

	*/
	SavoryFood *bool
	/*Sortby
	  The nutrition field to sort by.

	*/
	Sortby *string
	/*Sortdir
	  The sort direction for the results.

	*/
	Sortdir *string
	/*SweetFood
	  List only sweet recipes.

	*/
	SweetFood *bool
	/*TotalFat
	  This value must have a preceeding operator before the number of calories to indicate the search type; > < >= <= are valid. For example, if you want to search for anything with less than X calories per portion, you could use a value of '<300' and this would result in a result set which includes calories less than 300 calories. You can add more calories search by using the & or the | boolean logic operators.

	*/
	TotalFat *string
	/*VeganFriendly
	  List only recipes which have ingredients that are vegan friendly.

	*/
	VeganFriendly *bool
	/*Vegetarian
	  List only recipes which have ingredients that are vegetarian friendly.

	*/
	Vegetarian *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the paged search recipes params
func (o *PagedSearchRecipesParams) WithTimeout(timeout time.Duration) *PagedSearchRecipesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the paged search recipes params
func (o *PagedSearchRecipesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the paged search recipes params
func (o *PagedSearchRecipesParams) WithContext(ctx context.Context) *PagedSearchRecipesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the paged search recipes params
func (o *PagedSearchRecipesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the paged search recipes params
func (o *PagedSearchRecipesParams) WithHTTPClient(client *http.Client) *PagedSearchRecipesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the paged search recipes params
func (o *PagedSearchRecipesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAllowNumMissingIngredients adds the allowNumMissingIngredients to the paged search recipes params
func (o *PagedSearchRecipesParams) WithAllowNumMissingIngredients(allowNumMissingIngredients *int16) *PagedSearchRecipesParams {
	o.SetAllowNumMissingIngredients(allowNumMissingIngredients)
	return o
}

// SetAllowNumMissingIngredients adds the allowNumMissingIngredients to the paged search recipes params
func (o *PagedSearchRecipesParams) SetAllowNumMissingIngredients(allowNumMissingIngredients *int16) {
	o.AllowNumMissingIngredients = allowNumMissingIngredients
}

// WithCalories adds the calories to the paged search recipes params
func (o *PagedSearchRecipesParams) WithCalories(calories *string) *PagedSearchRecipesParams {
	o.SetCalories(calories)
	return o
}

// SetCalories adds the calories to the paged search recipes params
func (o *PagedSearchRecipesParams) SetCalories(calories *string) {
	o.Calories = calories
}

// WithFoodIds adds the foodIds to the paged search recipes params
func (o *PagedSearchRecipesParams) WithFoodIds(foodIds *string) *PagedSearchRecipesParams {
	o.SetFoodIds(foodIds)
	return o
}

// SetFoodIds adds the foodIds to the paged search recipes params
func (o *PagedSearchRecipesParams) SetFoodIds(foodIds *string) {
	o.FoodIds = foodIds
}

// WithGlutenFree adds the glutenFree to the paged search recipes params
func (o *PagedSearchRecipesParams) WithGlutenFree(glutenFree *bool) *PagedSearchRecipesParams {
	o.SetGlutenFree(glutenFree)
	return o
}

// SetGlutenFree adds the glutenFree to the paged search recipes params
func (o *PagedSearchRecipesParams) SetGlutenFree(glutenFree *bool) {
	o.GlutenFree = glutenFree
}

// WithHasAlcohol adds the hasAlcohol to the paged search recipes params
func (o *PagedSearchRecipesParams) WithHasAlcohol(hasAlcohol *bool) *PagedSearchRecipesParams {
	o.SetHasAlcohol(hasAlcohol)
	return o
}

// SetHasAlcohol adds the hasAlcohol to the paged search recipes params
func (o *PagedSearchRecipesParams) SetHasAlcohol(hasAlcohol *bool) {
	o.HasAlcohol = hasAlcohol
}

// WithHasCeral adds the hasCeral to the paged search recipes params
func (o *PagedSearchRecipesParams) WithHasCeral(hasCeral *bool) *PagedSearchRecipesParams {
	o.SetHasCeral(hasCeral)
	return o
}

// SetHasCeral adds the hasCeral to the paged search recipes params
func (o *PagedSearchRecipesParams) SetHasCeral(hasCeral *bool) {
	o.HasCeral = hasCeral
}

// WithHasDairy adds the hasDairy to the paged search recipes params
func (o *PagedSearchRecipesParams) WithHasDairy(hasDairy *bool) *PagedSearchRecipesParams {
	o.SetHasDairy(hasDairy)
	return o
}

// SetHasDairy adds the hasDairy to the paged search recipes params
func (o *PagedSearchRecipesParams) SetHasDairy(hasDairy *bool) {
	o.HasDairy = hasDairy
}

// WithHasEggs adds the hasEggs to the paged search recipes params
func (o *PagedSearchRecipesParams) WithHasEggs(hasEggs *bool) *PagedSearchRecipesParams {
	o.SetHasEggs(hasEggs)
	return o
}

// SetHasEggs adds the hasEggs to the paged search recipes params
func (o *PagedSearchRecipesParams) SetHasEggs(hasEggs *bool) {
	o.HasEggs = hasEggs
}

// WithHasFruit adds the hasFruit to the paged search recipes params
func (o *PagedSearchRecipesParams) WithHasFruit(hasFruit *bool) *PagedSearchRecipesParams {
	o.SetHasFruit(hasFruit)
	return o
}

// SetHasFruit adds the hasFruit to the paged search recipes params
func (o *PagedSearchRecipesParams) SetHasFruit(hasFruit *bool) {
	o.HasFruit = hasFruit
}

// WithHasMeat adds the hasMeat to the paged search recipes params
func (o *PagedSearchRecipesParams) WithHasMeat(hasMeat *bool) *PagedSearchRecipesParams {
	o.SetHasMeat(hasMeat)
	return o
}

// SetHasMeat adds the hasMeat to the paged search recipes params
func (o *PagedSearchRecipesParams) SetHasMeat(hasMeat *bool) {
	o.HasMeat = hasMeat
}

// WithHasNuts adds the hasNuts to the paged search recipes params
func (o *PagedSearchRecipesParams) WithHasNuts(hasNuts *bool) *PagedSearchRecipesParams {
	o.SetHasNuts(hasNuts)
	return o
}

// SetHasNuts adds the hasNuts to the paged search recipes params
func (o *PagedSearchRecipesParams) SetHasNuts(hasNuts *bool) {
	o.HasNuts = hasNuts
}

// WithHasSugar adds the hasSugar to the paged search recipes params
func (o *PagedSearchRecipesParams) WithHasSugar(hasSugar *bool) *PagedSearchRecipesParams {
	o.SetHasSugar(hasSugar)
	return o
}

// SetHasSugar adds the hasSugar to the paged search recipes params
func (o *PagedSearchRecipesParams) SetHasSugar(hasSugar *bool) {
	o.HasSugar = hasSugar
}

// WithHasImage adds the hasImage to the paged search recipes params
func (o *PagedSearchRecipesParams) WithHasImage(hasImage *bool) *PagedSearchRecipesParams {
	o.SetHasImage(hasImage)
	return o
}

// SetHasImage adds the hasImage to the paged search recipes params
func (o *PagedSearchRecipesParams) SetHasImage(hasImage *bool) {
	o.HasImage = hasImage
}

// WithIncludeCommonNames adds the includeCommonNames to the paged search recipes params
func (o *PagedSearchRecipesParams) WithIncludeCommonNames(includeCommonNames *bool) *PagedSearchRecipesParams {
	o.SetIncludeCommonNames(includeCommonNames)
	return o
}

// SetIncludeCommonNames adds the includeCommonNames to the paged search recipes params
func (o *PagedSearchRecipesParams) SetIncludeCommonNames(includeCommonNames *bool) {
	o.IncludeCommonNames = includeCommonNames
}

// WithIncludeFoodID adds the includeFoodID to the paged search recipes params
func (o *PagedSearchRecipesParams) WithIncludeFoodID(includeFoodID *bool) *PagedSearchRecipesParams {
	o.SetIncludeFoodID(includeFoodID)
	return o
}

// SetIncludeFoodID adds the includeFoodId to the paged search recipes params
func (o *PagedSearchRecipesParams) SetIncludeFoodID(includeFoodID *bool) {
	o.IncludeFoodID = includeFoodID
}

// WithIncludeFoodNames adds the includeFoodNames to the paged search recipes params
func (o *PagedSearchRecipesParams) WithIncludeFoodNames(includeFoodNames *bool) *PagedSearchRecipesParams {
	o.SetIncludeFoodNames(includeFoodNames)
	return o
}

// SetIncludeFoodNames adds the includeFoodNames to the paged search recipes params
func (o *PagedSearchRecipesParams) SetIncludeFoodNames(includeFoodNames *bool) {
	o.IncludeFoodNames = includeFoodNames
}

// WithIncludeGda adds the includeGda to the paged search recipes params
func (o *PagedSearchRecipesParams) WithIncludeGda(includeGda *bool) *PagedSearchRecipesParams {
	o.SetIncludeGda(includeGda)
	return o
}

// SetIncludeGda adds the includeGda to the paged search recipes params
func (o *PagedSearchRecipesParams) SetIncludeGda(includeGda *bool) {
	o.IncludeGda = includeGda
}

// WithIncludeNutrition adds the includeNutrition to the paged search recipes params
func (o *PagedSearchRecipesParams) WithIncludeNutrition(includeNutrition *bool) *PagedSearchRecipesParams {
	o.SetIncludeNutrition(includeNutrition)
	return o
}

// SetIncludeNutrition adds the includeNutrition to the paged search recipes params
func (o *PagedSearchRecipesParams) SetIncludeNutrition(includeNutrition *bool) {
	o.IncludeNutrition = includeNutrition
}

// WithIncludeNutritionPerPortion adds the includeNutritionPerPortion to the paged search recipes params
func (o *PagedSearchRecipesParams) WithIncludeNutritionPerPortion(includeNutritionPerPortion *bool) *PagedSearchRecipesParams {
	o.SetIncludeNutritionPerPortion(includeNutritionPerPortion)
	return o
}

// SetIncludeNutritionPerPortion adds the includeNutritionPerPortion to the paged search recipes params
func (o *PagedSearchRecipesParams) SetIncludeNutritionPerPortion(includeNutritionPerPortion *bool) {
	o.IncludeNutritionPerPortion = includeNutritionPerPortion
}

// WithIncludeNutritionTips adds the includeNutritionTips to the paged search recipes params
func (o *PagedSearchRecipesParams) WithIncludeNutritionTips(includeNutritionTips *bool) *PagedSearchRecipesParams {
	o.SetIncludeNutritionTips(includeNutritionTips)
	return o
}

// SetIncludeNutritionTips adds the includeNutritionTips to the paged search recipes params
func (o *PagedSearchRecipesParams) SetIncludeNutritionTips(includeNutritionTips *bool) {
	o.IncludeNutritionTips = includeNutritionTips
}

// WithIncludeRecipeCategories adds the includeRecipeCategories to the paged search recipes params
func (o *PagedSearchRecipesParams) WithIncludeRecipeCategories(includeRecipeCategories *bool) *PagedSearchRecipesParams {
	o.SetIncludeRecipeCategories(includeRecipeCategories)
	return o
}

// SetIncludeRecipeCategories adds the includeRecipeCategories to the paged search recipes params
func (o *PagedSearchRecipesParams) SetIncludeRecipeCategories(includeRecipeCategories *bool) {
	o.IncludeRecipeCategories = includeRecipeCategories
}

// WithIsCondiment adds the isCondiment to the paged search recipes params
func (o *PagedSearchRecipesParams) WithIsCondiment(isCondiment *bool) *PagedSearchRecipesParams {
	o.SetIsCondiment(isCondiment)
	return o
}

// SetIsCondiment adds the isCondiment to the paged search recipes params
func (o *PagedSearchRecipesParams) SetIsCondiment(isCondiment *bool) {
	o.IsCondiment = isCondiment
}

// WithIsDinner adds the isDinner to the paged search recipes params
func (o *PagedSearchRecipesParams) WithIsDinner(isDinner *bool) *PagedSearchRecipesParams {
	o.SetIsDinner(isDinner)
	return o
}

// SetIsDinner adds the isDinner to the paged search recipes params
func (o *PagedSearchRecipesParams) SetIsDinner(isDinner *bool) {
	o.IsDinner = isDinner
}

// WithLimit adds the limit to the paged search recipes params
func (o *PagedSearchRecipesParams) WithLimit(limit *int32) *PagedSearchRecipesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the paged search recipes params
func (o *PagedSearchRecipesParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithLowFat adds the lowFat to the paged search recipes params
func (o *PagedSearchRecipesParams) WithLowFat(lowFat *bool) *PagedSearchRecipesParams {
	o.SetLowFat(lowFat)
	return o
}

// SetLowFat adds the lowFat to the paged search recipes params
func (o *PagedSearchRecipesParams) SetLowFat(lowFat *bool) {
	o.LowFat = lowFat
}

// WithLowSatFat adds the lowSatFat to the paged search recipes params
func (o *PagedSearchRecipesParams) WithLowSatFat(lowSatFat *bool) *PagedSearchRecipesParams {
	o.SetLowSatFat(lowSatFat)
	return o
}

// SetLowSatFat adds the lowSatFat to the paged search recipes params
func (o *PagedSearchRecipesParams) SetLowSatFat(lowSatFat *bool) {
	o.LowSatFat = lowSatFat
}

// WithLowSugar adds the lowSugar to the paged search recipes params
func (o *PagedSearchRecipesParams) WithLowSugar(lowSugar *bool) *PagedSearchRecipesParams {
	o.SetLowSugar(lowSugar)
	return o
}

// SetLowSugar adds the lowSugar to the paged search recipes params
func (o *PagedSearchRecipesParams) SetLowSugar(lowSugar *bool) {
	o.LowSugar = lowSugar
}

// WithNutritionSortby adds the nutritionSortby to the paged search recipes params
func (o *PagedSearchRecipesParams) WithNutritionSortby(nutritionSortby *string) *PagedSearchRecipesParams {
	o.SetNutritionSortby(nutritionSortby)
	return o
}

// SetNutritionSortby adds the nutritionSortby to the paged search recipes params
func (o *PagedSearchRecipesParams) SetNutritionSortby(nutritionSortby *string) {
	o.NutritionSortby = nutritionSortby
}

// WithOffset adds the offset to the paged search recipes params
func (o *PagedSearchRecipesParams) WithOffset(offset *int64) *PagedSearchRecipesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the paged search recipes params
func (o *PagedSearchRecipesParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOwnerHandle adds the ownerHandle to the paged search recipes params
func (o *PagedSearchRecipesParams) WithOwnerHandle(ownerHandle *string) *PagedSearchRecipesParams {
	o.SetOwnerHandle(ownerHandle)
	return o
}

// SetOwnerHandle adds the ownerHandle to the paged search recipes params
func (o *PagedSearchRecipesParams) SetOwnerHandle(ownerHandle *string) {
	o.OwnerHandle = ownerHandle
}

// WithOwnerID adds the ownerID to the paged search recipes params
func (o *PagedSearchRecipesParams) WithOwnerID(ownerID *int64) *PagedSearchRecipesParams {
	o.SetOwnerID(ownerID)
	return o
}

// SetOwnerID adds the ownerId to the paged search recipes params
func (o *PagedSearchRecipesParams) SetOwnerID(ownerID *int64) {
	o.OwnerID = ownerID
}

// WithPescatarian adds the pescatarian to the paged search recipes params
func (o *PagedSearchRecipesParams) WithPescatarian(pescatarian *bool) *PagedSearchRecipesParams {
	o.SetPescatarian(pescatarian)
	return o
}

// SetPescatarian adds the pescatarian to the paged search recipes params
func (o *PagedSearchRecipesParams) SetPescatarian(pescatarian *bool) {
	o.Pescatarian = pescatarian
}

// WithProtein adds the protein to the paged search recipes params
func (o *PagedSearchRecipesParams) WithProtein(protein *string) *PagedSearchRecipesParams {
	o.SetProtein(protein)
	return o
}

// SetProtein adds the protein to the paged search recipes params
func (o *PagedSearchRecipesParams) SetProtein(protein *string) {
	o.Protein = protein
}

// WithQuickAndEasy adds the quickAndEasy to the paged search recipes params
func (o *PagedSearchRecipesParams) WithQuickAndEasy(quickAndEasy *bool) *PagedSearchRecipesParams {
	o.SetQuickAndEasy(quickAndEasy)
	return o
}

// SetQuickAndEasy adds the quickAndEasy to the paged search recipes params
func (o *PagedSearchRecipesParams) SetQuickAndEasy(quickAndEasy *bool) {
	o.QuickAndEasy = quickAndEasy
}

// WithRecipeName adds the recipeName to the paged search recipes params
func (o *PagedSearchRecipesParams) WithRecipeName(recipeName *string) *PagedSearchRecipesParams {
	o.SetRecipeName(recipeName)
	return o
}

// SetRecipeName adds the recipeName to the paged search recipes params
func (o *PagedSearchRecipesParams) SetRecipeName(recipeName *string) {
	o.RecipeName = recipeName
}

// WithSavoryFood adds the savoryFood to the paged search recipes params
func (o *PagedSearchRecipesParams) WithSavoryFood(savoryFood *bool) *PagedSearchRecipesParams {
	o.SetSavoryFood(savoryFood)
	return o
}

// SetSavoryFood adds the savoryFood to the paged search recipes params
func (o *PagedSearchRecipesParams) SetSavoryFood(savoryFood *bool) {
	o.SavoryFood = savoryFood
}

// WithSortby adds the sortby to the paged search recipes params
func (o *PagedSearchRecipesParams) WithSortby(sortby *string) *PagedSearchRecipesParams {
	o.SetSortby(sortby)
	return o
}

// SetSortby adds the sortby to the paged search recipes params
func (o *PagedSearchRecipesParams) SetSortby(sortby *string) {
	o.Sortby = sortby
}

// WithSortdir adds the sortdir to the paged search recipes params
func (o *PagedSearchRecipesParams) WithSortdir(sortdir *string) *PagedSearchRecipesParams {
	o.SetSortdir(sortdir)
	return o
}

// SetSortdir adds the sortdir to the paged search recipes params
func (o *PagedSearchRecipesParams) SetSortdir(sortdir *string) {
	o.Sortdir = sortdir
}

// WithSweetFood adds the sweetFood to the paged search recipes params
func (o *PagedSearchRecipesParams) WithSweetFood(sweetFood *bool) *PagedSearchRecipesParams {
	o.SetSweetFood(sweetFood)
	return o
}

// SetSweetFood adds the sweetFood to the paged search recipes params
func (o *PagedSearchRecipesParams) SetSweetFood(sweetFood *bool) {
	o.SweetFood = sweetFood
}

// WithTotalFat adds the totalFat to the paged search recipes params
func (o *PagedSearchRecipesParams) WithTotalFat(totalFat *string) *PagedSearchRecipesParams {
	o.SetTotalFat(totalFat)
	return o
}

// SetTotalFat adds the totalFat to the paged search recipes params
func (o *PagedSearchRecipesParams) SetTotalFat(totalFat *string) {
	o.TotalFat = totalFat
}

// WithVeganFriendly adds the veganFriendly to the paged search recipes params
func (o *PagedSearchRecipesParams) WithVeganFriendly(veganFriendly *bool) *PagedSearchRecipesParams {
	o.SetVeganFriendly(veganFriendly)
	return o
}

// SetVeganFriendly adds the veganFriendly to the paged search recipes params
func (o *PagedSearchRecipesParams) SetVeganFriendly(veganFriendly *bool) {
	o.VeganFriendly = veganFriendly
}

// WithVegetarian adds the vegetarian to the paged search recipes params
func (o *PagedSearchRecipesParams) WithVegetarian(vegetarian *bool) *PagedSearchRecipesParams {
	o.SetVegetarian(vegetarian)
	return o
}

// SetVegetarian adds the vegetarian to the paged search recipes params
func (o *PagedSearchRecipesParams) SetVegetarian(vegetarian *bool) {
	o.Vegetarian = vegetarian
}

// WriteToRequest writes these params to a swagger request
func (o *PagedSearchRecipesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AllowNumMissingIngredients != nil {

		// query param allowNumMissingIngredients
		var qrAllowNumMissingIngredients int16
		if o.AllowNumMissingIngredients != nil {
			qrAllowNumMissingIngredients = *o.AllowNumMissingIngredients
		}
		qAllowNumMissingIngredients := swag.FormatInt16(qrAllowNumMissingIngredients)
		if qAllowNumMissingIngredients != "" {
			if err := r.SetQueryParam("allowNumMissingIngredients", qAllowNumMissingIngredients); err != nil {
				return err
			}
		}

	}

	if o.Calories != nil {

		// query param calories
		var qrCalories string
		if o.Calories != nil {
			qrCalories = *o.Calories
		}
		qCalories := qrCalories
		if qCalories != "" {
			if err := r.SetQueryParam("calories", qCalories); err != nil {
				return err
			}
		}

	}

	if o.FoodIds != nil {

		// query param foodIds
		var qrFoodIds string
		if o.FoodIds != nil {
			qrFoodIds = *o.FoodIds
		}
		qFoodIds := qrFoodIds
		if qFoodIds != "" {
			if err := r.SetQueryParam("foodIds", qFoodIds); err != nil {
				return err
			}
		}

	}

	if o.GlutenFree != nil {

		// query param gluten-free
		var qrGlutenFree bool
		if o.GlutenFree != nil {
			qrGlutenFree = *o.GlutenFree
		}
		qGlutenFree := swag.FormatBool(qrGlutenFree)
		if qGlutenFree != "" {
			if err := r.SetQueryParam("gluten-free", qGlutenFree); err != nil {
				return err
			}
		}

	}

	if o.HasAlcohol != nil {

		// query param has-alcohol
		var qrHasAlcohol bool
		if o.HasAlcohol != nil {
			qrHasAlcohol = *o.HasAlcohol
		}
		qHasAlcohol := swag.FormatBool(qrHasAlcohol)
		if qHasAlcohol != "" {
			if err := r.SetQueryParam("has-alcohol", qHasAlcohol); err != nil {
				return err
			}
		}

	}

	if o.HasCeral != nil {

		// query param has-ceral
		var qrHasCeral bool
		if o.HasCeral != nil {
			qrHasCeral = *o.HasCeral
		}
		qHasCeral := swag.FormatBool(qrHasCeral)
		if qHasCeral != "" {
			if err := r.SetQueryParam("has-ceral", qHasCeral); err != nil {
				return err
			}
		}

	}

	if o.HasDairy != nil {

		// query param has-dairy
		var qrHasDairy bool
		if o.HasDairy != nil {
			qrHasDairy = *o.HasDairy
		}
		qHasDairy := swag.FormatBool(qrHasDairy)
		if qHasDairy != "" {
			if err := r.SetQueryParam("has-dairy", qHasDairy); err != nil {
				return err
			}
		}

	}

	if o.HasEggs != nil {

		// query param has-eggs
		var qrHasEggs bool
		if o.HasEggs != nil {
			qrHasEggs = *o.HasEggs
		}
		qHasEggs := swag.FormatBool(qrHasEggs)
		if qHasEggs != "" {
			if err := r.SetQueryParam("has-eggs", qHasEggs); err != nil {
				return err
			}
		}

	}

	if o.HasFruit != nil {

		// query param has-fruit
		var qrHasFruit bool
		if o.HasFruit != nil {
			qrHasFruit = *o.HasFruit
		}
		qHasFruit := swag.FormatBool(qrHasFruit)
		if qHasFruit != "" {
			if err := r.SetQueryParam("has-fruit", qHasFruit); err != nil {
				return err
			}
		}

	}

	if o.HasMeat != nil {

		// query param has-meat
		var qrHasMeat bool
		if o.HasMeat != nil {
			qrHasMeat = *o.HasMeat
		}
		qHasMeat := swag.FormatBool(qrHasMeat)
		if qHasMeat != "" {
			if err := r.SetQueryParam("has-meat", qHasMeat); err != nil {
				return err
			}
		}

	}

	if o.HasNuts != nil {

		// query param has-nuts
		var qrHasNuts bool
		if o.HasNuts != nil {
			qrHasNuts = *o.HasNuts
		}
		qHasNuts := swag.FormatBool(qrHasNuts)
		if qHasNuts != "" {
			if err := r.SetQueryParam("has-nuts", qHasNuts); err != nil {
				return err
			}
		}

	}

	if o.HasSugar != nil {

		// query param has-sugar
		var qrHasSugar bool
		if o.HasSugar != nil {
			qrHasSugar = *o.HasSugar
		}
		qHasSugar := swag.FormatBool(qrHasSugar)
		if qHasSugar != "" {
			if err := r.SetQueryParam("has-sugar", qHasSugar); err != nil {
				return err
			}
		}

	}

	if o.HasImage != nil {

		// query param hasImage
		var qrHasImage bool
		if o.HasImage != nil {
			qrHasImage = *o.HasImage
		}
		qHasImage := swag.FormatBool(qrHasImage)
		if qHasImage != "" {
			if err := r.SetQueryParam("hasImage", qHasImage); err != nil {
				return err
			}
		}

	}

	if o.IncludeCommonNames != nil {

		// query param include-common-names
		var qrIncludeCommonNames bool
		if o.IncludeCommonNames != nil {
			qrIncludeCommonNames = *o.IncludeCommonNames
		}
		qIncludeCommonNames := swag.FormatBool(qrIncludeCommonNames)
		if qIncludeCommonNames != "" {
			if err := r.SetQueryParam("include-common-names", qIncludeCommonNames); err != nil {
				return err
			}
		}

	}

	if o.IncludeFoodID != nil {

		// query param include-food-id
		var qrIncludeFoodID bool
		if o.IncludeFoodID != nil {
			qrIncludeFoodID = *o.IncludeFoodID
		}
		qIncludeFoodID := swag.FormatBool(qrIncludeFoodID)
		if qIncludeFoodID != "" {
			if err := r.SetQueryParam("include-food-id", qIncludeFoodID); err != nil {
				return err
			}
		}

	}

	if o.IncludeFoodNames != nil {

		// query param include-food-names
		var qrIncludeFoodNames bool
		if o.IncludeFoodNames != nil {
			qrIncludeFoodNames = *o.IncludeFoodNames
		}
		qIncludeFoodNames := swag.FormatBool(qrIncludeFoodNames)
		if qIncludeFoodNames != "" {
			if err := r.SetQueryParam("include-food-names", qIncludeFoodNames); err != nil {
				return err
			}
		}

	}

	if o.IncludeGda != nil {

		// query param include-gda
		var qrIncludeGda bool
		if o.IncludeGda != nil {
			qrIncludeGda = *o.IncludeGda
		}
		qIncludeGda := swag.FormatBool(qrIncludeGda)
		if qIncludeGda != "" {
			if err := r.SetQueryParam("include-gda", qIncludeGda); err != nil {
				return err
			}
		}

	}

	if o.IncludeNutrition != nil {

		// query param include-nutrition
		var qrIncludeNutrition bool
		if o.IncludeNutrition != nil {
			qrIncludeNutrition = *o.IncludeNutrition
		}
		qIncludeNutrition := swag.FormatBool(qrIncludeNutrition)
		if qIncludeNutrition != "" {
			if err := r.SetQueryParam("include-nutrition", qIncludeNutrition); err != nil {
				return err
			}
		}

	}

	if o.IncludeNutritionPerPortion != nil {

		// query param include-nutrition-per-portion
		var qrIncludeNutritionPerPortion bool
		if o.IncludeNutritionPerPortion != nil {
			qrIncludeNutritionPerPortion = *o.IncludeNutritionPerPortion
		}
		qIncludeNutritionPerPortion := swag.FormatBool(qrIncludeNutritionPerPortion)
		if qIncludeNutritionPerPortion != "" {
			if err := r.SetQueryParam("include-nutrition-per-portion", qIncludeNutritionPerPortion); err != nil {
				return err
			}
		}

	}

	if o.IncludeNutritionTips != nil {

		// query param include-nutrition-tips
		var qrIncludeNutritionTips bool
		if o.IncludeNutritionTips != nil {
			qrIncludeNutritionTips = *o.IncludeNutritionTips
		}
		qIncludeNutritionTips := swag.FormatBool(qrIncludeNutritionTips)
		if qIncludeNutritionTips != "" {
			if err := r.SetQueryParam("include-nutrition-tips", qIncludeNutritionTips); err != nil {
				return err
			}
		}

	}

	if o.IncludeRecipeCategories != nil {

		// query param include-recipe-categories
		var qrIncludeRecipeCategories bool
		if o.IncludeRecipeCategories != nil {
			qrIncludeRecipeCategories = *o.IncludeRecipeCategories
		}
		qIncludeRecipeCategories := swag.FormatBool(qrIncludeRecipeCategories)
		if qIncludeRecipeCategories != "" {
			if err := r.SetQueryParam("include-recipe-categories", qIncludeRecipeCategories); err != nil {
				return err
			}
		}

	}

	if o.IsCondiment != nil {

		// query param is-condiment
		var qrIsCondiment bool
		if o.IsCondiment != nil {
			qrIsCondiment = *o.IsCondiment
		}
		qIsCondiment := swag.FormatBool(qrIsCondiment)
		if qIsCondiment != "" {
			if err := r.SetQueryParam("is-condiment", qIsCondiment); err != nil {
				return err
			}
		}

	}

	if o.IsDinner != nil {

		// query param is-dinner
		var qrIsDinner bool
		if o.IsDinner != nil {
			qrIsDinner = *o.IsDinner
		}
		qIsDinner := swag.FormatBool(qrIsDinner)
		if qIsDinner != "" {
			if err := r.SetQueryParam("is-dinner", qIsDinner); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.LowFat != nil {

		// query param low-fat
		var qrLowFat bool
		if o.LowFat != nil {
			qrLowFat = *o.LowFat
		}
		qLowFat := swag.FormatBool(qrLowFat)
		if qLowFat != "" {
			if err := r.SetQueryParam("low-fat", qLowFat); err != nil {
				return err
			}
		}

	}

	if o.LowSatFat != nil {

		// query param low-sat-fat
		var qrLowSatFat bool
		if o.LowSatFat != nil {
			qrLowSatFat = *o.LowSatFat
		}
		qLowSatFat := swag.FormatBool(qrLowSatFat)
		if qLowSatFat != "" {
			if err := r.SetQueryParam("low-sat-fat", qLowSatFat); err != nil {
				return err
			}
		}

	}

	if o.LowSugar != nil {

		// query param low-sugar
		var qrLowSugar bool
		if o.LowSugar != nil {
			qrLowSugar = *o.LowSugar
		}
		qLowSugar := swag.FormatBool(qrLowSugar)
		if qLowSugar != "" {
			if err := r.SetQueryParam("low-sugar", qLowSugar); err != nil {
				return err
			}
		}

	}

	if o.NutritionSortby != nil {

		// query param nutrition-sortby
		var qrNutritionSortby string
		if o.NutritionSortby != nil {
			qrNutritionSortby = *o.NutritionSortby
		}
		qNutritionSortby := qrNutritionSortby
		if qNutritionSortby != "" {
			if err := r.SetQueryParam("nutrition-sortby", qNutritionSortby); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.OwnerHandle != nil {

		// query param ownerHandle
		var qrOwnerHandle string
		if o.OwnerHandle != nil {
			qrOwnerHandle = *o.OwnerHandle
		}
		qOwnerHandle := qrOwnerHandle
		if qOwnerHandle != "" {
			if err := r.SetQueryParam("ownerHandle", qOwnerHandle); err != nil {
				return err
			}
		}

	}

	if o.OwnerID != nil {

		// query param ownerId
		var qrOwnerID int64
		if o.OwnerID != nil {
			qrOwnerID = *o.OwnerID
		}
		qOwnerID := swag.FormatInt64(qrOwnerID)
		if qOwnerID != "" {
			if err := r.SetQueryParam("ownerId", qOwnerID); err != nil {
				return err
			}
		}

	}

	if o.Pescatarian != nil {

		// query param pescatarian
		var qrPescatarian bool
		if o.Pescatarian != nil {
			qrPescatarian = *o.Pescatarian
		}
		qPescatarian := swag.FormatBool(qrPescatarian)
		if qPescatarian != "" {
			if err := r.SetQueryParam("pescatarian", qPescatarian); err != nil {
				return err
			}
		}

	}

	if o.Protein != nil {

		// query param protein
		var qrProtein string
		if o.Protein != nil {
			qrProtein = *o.Protein
		}
		qProtein := qrProtein
		if qProtein != "" {
			if err := r.SetQueryParam("protein", qProtein); err != nil {
				return err
			}
		}

	}

	if o.QuickAndEasy != nil {

		// query param quick-and-easy
		var qrQuickAndEasy bool
		if o.QuickAndEasy != nil {
			qrQuickAndEasy = *o.QuickAndEasy
		}
		qQuickAndEasy := swag.FormatBool(qrQuickAndEasy)
		if qQuickAndEasy != "" {
			if err := r.SetQueryParam("quick-and-easy", qQuickAndEasy); err != nil {
				return err
			}
		}

	}

	if o.RecipeName != nil {

		// query param recipeName
		var qrRecipeName string
		if o.RecipeName != nil {
			qrRecipeName = *o.RecipeName
		}
		qRecipeName := qrRecipeName
		if qRecipeName != "" {
			if err := r.SetQueryParam("recipeName", qRecipeName); err != nil {
				return err
			}
		}

	}

	if o.SavoryFood != nil {

		// query param savory-food
		var qrSavoryFood bool
		if o.SavoryFood != nil {
			qrSavoryFood = *o.SavoryFood
		}
		qSavoryFood := swag.FormatBool(qrSavoryFood)
		if qSavoryFood != "" {
			if err := r.SetQueryParam("savory-food", qSavoryFood); err != nil {
				return err
			}
		}

	}

	if o.Sortby != nil {

		// query param sortby
		var qrSortby string
		if o.Sortby != nil {
			qrSortby = *o.Sortby
		}
		qSortby := qrSortby
		if qSortby != "" {
			if err := r.SetQueryParam("sortby", qSortby); err != nil {
				return err
			}
		}

	}

	if o.Sortdir != nil {

		// query param sortdir
		var qrSortdir string
		if o.Sortdir != nil {
			qrSortdir = *o.Sortdir
		}
		qSortdir := qrSortdir
		if qSortdir != "" {
			if err := r.SetQueryParam("sortdir", qSortdir); err != nil {
				return err
			}
		}

	}

	if o.SweetFood != nil {

		// query param sweet-food
		var qrSweetFood bool
		if o.SweetFood != nil {
			qrSweetFood = *o.SweetFood
		}
		qSweetFood := swag.FormatBool(qrSweetFood)
		if qSweetFood != "" {
			if err := r.SetQueryParam("sweet-food", qSweetFood); err != nil {
				return err
			}
		}

	}

	if o.TotalFat != nil {

		// query param total-fat
		var qrTotalFat string
		if o.TotalFat != nil {
			qrTotalFat = *o.TotalFat
		}
		qTotalFat := qrTotalFat
		if qTotalFat != "" {
			if err := r.SetQueryParam("total-fat", qTotalFat); err != nil {
				return err
			}
		}

	}

	if o.VeganFriendly != nil {

		// query param vegan-friendly
		var qrVeganFriendly bool
		if o.VeganFriendly != nil {
			qrVeganFriendly = *o.VeganFriendly
		}
		qVeganFriendly := swag.FormatBool(qrVeganFriendly)
		if qVeganFriendly != "" {
			if err := r.SetQueryParam("vegan-friendly", qVeganFriendly); err != nil {
				return err
			}
		}

	}

	if o.Vegetarian != nil {

		// query param vegetarian
		var qrVegetarian bool
		if o.Vegetarian != nil {
			qrVegetarian = *o.Vegetarian
		}
		qVegetarian := swag.FormatBool(qrVegetarian)
		if qVegetarian != "" {
			if err := r.SetQueryParam("vegetarian", qVegetarian); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
