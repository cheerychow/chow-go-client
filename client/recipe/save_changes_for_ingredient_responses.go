// Code generated by go-swagger; DO NOT EDIT.

package recipe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cheerychow/chow-go-client/models"
)

// SaveChangesForIngredientReader is a Reader for the SaveChangesForIngredient structure.
type SaveChangesForIngredientReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SaveChangesForIngredientReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSaveChangesForIngredientOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSaveChangesForIngredientBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewSaveChangesForIngredientNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSaveChangesForIngredientOK creates a SaveChangesForIngredientOK with default headers values
func NewSaveChangesForIngredientOK() *SaveChangesForIngredientOK {
	return &SaveChangesForIngredientOK{}
}

/*SaveChangesForIngredientOK handles this case with default header values.

Description was not specified
*/
type SaveChangesForIngredientOK struct {
	Payload []*models.Ingredient
}

func (o *SaveChangesForIngredientOK) Error() string {
	return fmt.Sprintf("[PUT /recipe/{recipeId}/ingredient/{ingredient-id}][%d] saveChangesForIngredientOK  %+v", 200, o.Payload)
}

func (o *SaveChangesForIngredientOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSaveChangesForIngredientBadRequest creates a SaveChangesForIngredientBadRequest with default headers values
func NewSaveChangesForIngredientBadRequest() *SaveChangesForIngredientBadRequest {
	return &SaveChangesForIngredientBadRequest{}
}

/*SaveChangesForIngredientBadRequest handles this case with default header values.

Description was not specified
*/
type SaveChangesForIngredientBadRequest struct {
	Payload *models.HTTPAPIError
}

func (o *SaveChangesForIngredientBadRequest) Error() string {
	return fmt.Sprintf("[PUT /recipe/{recipeId}/ingredient/{ingredient-id}][%d] saveChangesForIngredientBadRequest  %+v", 400, o.Payload)
}

func (o *SaveChangesForIngredientBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSaveChangesForIngredientNotFound creates a SaveChangesForIngredientNotFound with default headers values
func NewSaveChangesForIngredientNotFound() *SaveChangesForIngredientNotFound {
	return &SaveChangesForIngredientNotFound{}
}

/*SaveChangesForIngredientNotFound handles this case with default header values.

Description was not specified
*/
type SaveChangesForIngredientNotFound struct {
	Payload *models.HTTPAPIError
}

func (o *SaveChangesForIngredientNotFound) Error() string {
	return fmt.Sprintf("[PUT /recipe/{recipeId}/ingredient/{ingredient-id}][%d] saveChangesForIngredientNotFound  %+v", 404, o.Payload)
}

func (o *SaveChangesForIngredientNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
