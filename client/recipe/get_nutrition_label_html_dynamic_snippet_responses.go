// Code generated by go-swagger; DO NOT EDIT.

package recipe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// GetNutritionLabelHTMLDynamicSnippetReader is a Reader for the GetNutritionLabelHTMLDynamicSnippet structure.
type GetNutritionLabelHTMLDynamicSnippetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNutritionLabelHTMLDynamicSnippetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetNutritionLabelHTMLDynamicSnippetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetNutritionLabelHTMLDynamicSnippetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetNutritionLabelHTMLDynamicSnippetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetNutritionLabelHTMLDynamicSnippetOK creates a GetNutritionLabelHTMLDynamicSnippetOK with default headers values
func NewGetNutritionLabelHTMLDynamicSnippetOK() *GetNutritionLabelHTMLDynamicSnippetOK {
	return &GetNutritionLabelHTMLDynamicSnippetOK{}
}

/*GetNutritionLabelHTMLDynamicSnippetOK handles this case with default header values.

Description was not specified
*/
type GetNutritionLabelHTMLDynamicSnippetOK struct {
	Payload string
}

func (o *GetNutritionLabelHTMLDynamicSnippetOK) Error() string {
	return fmt.Sprintf("[GET /recipe/{recipeId}/nutrition-label/dynamic-snippet][%d] getNutritionLabelHtmlDynamicSnippetOK  %+v", 200, o.Payload)
}

func (o *GetNutritionLabelHTMLDynamicSnippetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNutritionLabelHTMLDynamicSnippetBadRequest creates a GetNutritionLabelHTMLDynamicSnippetBadRequest with default headers values
func NewGetNutritionLabelHTMLDynamicSnippetBadRequest() *GetNutritionLabelHTMLDynamicSnippetBadRequest {
	return &GetNutritionLabelHTMLDynamicSnippetBadRequest{}
}

/*GetNutritionLabelHTMLDynamicSnippetBadRequest handles this case with default header values.

Description was not specified
*/
type GetNutritionLabelHTMLDynamicSnippetBadRequest struct {
	Payload string
}

func (o *GetNutritionLabelHTMLDynamicSnippetBadRequest) Error() string {
	return fmt.Sprintf("[GET /recipe/{recipeId}/nutrition-label/dynamic-snippet][%d] getNutritionLabelHtmlDynamicSnippetBadRequest  %+v", 400, o.Payload)
}

func (o *GetNutritionLabelHTMLDynamicSnippetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNutritionLabelHTMLDynamicSnippetNotFound creates a GetNutritionLabelHTMLDynamicSnippetNotFound with default headers values
func NewGetNutritionLabelHTMLDynamicSnippetNotFound() *GetNutritionLabelHTMLDynamicSnippetNotFound {
	return &GetNutritionLabelHTMLDynamicSnippetNotFound{}
}

/*GetNutritionLabelHTMLDynamicSnippetNotFound handles this case with default header values.

Description was not specified
*/
type GetNutritionLabelHTMLDynamicSnippetNotFound struct {
	Payload string
}

func (o *GetNutritionLabelHTMLDynamicSnippetNotFound) Error() string {
	return fmt.Sprintf("[GET /recipe/{recipeId}/nutrition-label/dynamic-snippet][%d] getNutritionLabelHtmlDynamicSnippetNotFound  %+v", 404, o.Payload)
}

func (o *GetNutritionLabelHTMLDynamicSnippetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
