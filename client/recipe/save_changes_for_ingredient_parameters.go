// Code generated by go-swagger; DO NOT EDIT.

package recipe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cheerychow/chow-go-client/models"
)

// NewSaveChangesForIngredientParams creates a new SaveChangesForIngredientParams object
// with the default values initialized.
func NewSaveChangesForIngredientParams() *SaveChangesForIngredientParams {
	var ()
	return &SaveChangesForIngredientParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSaveChangesForIngredientParamsWithTimeout creates a new SaveChangesForIngredientParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSaveChangesForIngredientParamsWithTimeout(timeout time.Duration) *SaveChangesForIngredientParams {
	var ()
	return &SaveChangesForIngredientParams{

		timeout: timeout,
	}
}

// NewSaveChangesForIngredientParamsWithContext creates a new SaveChangesForIngredientParams object
// with the default values initialized, and the ability to set a context for a request
func NewSaveChangesForIngredientParamsWithContext(ctx context.Context) *SaveChangesForIngredientParams {
	var ()
	return &SaveChangesForIngredientParams{

		Context: ctx,
	}
}

// NewSaveChangesForIngredientParamsWithHTTPClient creates a new SaveChangesForIngredientParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSaveChangesForIngredientParamsWithHTTPClient(client *http.Client) *SaveChangesForIngredientParams {
	var ()
	return &SaveChangesForIngredientParams{
		HTTPClient: client,
	}
}

/*SaveChangesForIngredientParams contains all the parameters to send to the API endpoint
for the save changes for ingredient operation typically these are written to a http.Request
*/
type SaveChangesForIngredientParams struct {

	/*IngredientID
	  The ingredient ID for the ingredient being edited.

	*/
	IngredientID int64
	/*RecipeID
	  The recipe ID

	*/
	RecipeID string
	/*RecipeIngredients
	  The recipe ID

	*/
	RecipeIngredients []*models.Ingredient

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the save changes for ingredient params
func (o *SaveChangesForIngredientParams) WithTimeout(timeout time.Duration) *SaveChangesForIngredientParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the save changes for ingredient params
func (o *SaveChangesForIngredientParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the save changes for ingredient params
func (o *SaveChangesForIngredientParams) WithContext(ctx context.Context) *SaveChangesForIngredientParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the save changes for ingredient params
func (o *SaveChangesForIngredientParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the save changes for ingredient params
func (o *SaveChangesForIngredientParams) WithHTTPClient(client *http.Client) *SaveChangesForIngredientParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the save changes for ingredient params
func (o *SaveChangesForIngredientParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIngredientID adds the ingredientID to the save changes for ingredient params
func (o *SaveChangesForIngredientParams) WithIngredientID(ingredientID int64) *SaveChangesForIngredientParams {
	o.SetIngredientID(ingredientID)
	return o
}

// SetIngredientID adds the ingredientId to the save changes for ingredient params
func (o *SaveChangesForIngredientParams) SetIngredientID(ingredientID int64) {
	o.IngredientID = ingredientID
}

// WithRecipeID adds the recipeID to the save changes for ingredient params
func (o *SaveChangesForIngredientParams) WithRecipeID(recipeID string) *SaveChangesForIngredientParams {
	o.SetRecipeID(recipeID)
	return o
}

// SetRecipeID adds the recipeId to the save changes for ingredient params
func (o *SaveChangesForIngredientParams) SetRecipeID(recipeID string) {
	o.RecipeID = recipeID
}

// WithRecipeIngredients adds the recipeIngredients to the save changes for ingredient params
func (o *SaveChangesForIngredientParams) WithRecipeIngredients(recipeIngredients []*models.Ingredient) *SaveChangesForIngredientParams {
	o.SetRecipeIngredients(recipeIngredients)
	return o
}

// SetRecipeIngredients adds the recipeIngredients to the save changes for ingredient params
func (o *SaveChangesForIngredientParams) SetRecipeIngredients(recipeIngredients []*models.Ingredient) {
	o.RecipeIngredients = recipeIngredients
}

// WriteToRequest writes these params to a swagger request
func (o *SaveChangesForIngredientParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param ingredient-id
	if err := r.SetPathParam("ingredient-id", swag.FormatInt64(o.IngredientID)); err != nil {
		return err
	}

	// path param recipeId
	if err := r.SetPathParam("recipeId", o.RecipeID); err != nil {
		return err
	}

	if o.RecipeIngredients != nil {
		if err := r.SetBodyParam(o.RecipeIngredients); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
