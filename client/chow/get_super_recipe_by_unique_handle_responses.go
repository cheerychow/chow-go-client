// Code generated by go-swagger; DO NOT EDIT.

package chow

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cheerychow/chow-go-client/models"
)

// GetSuperRecipeByUniqueHandleReader is a Reader for the GetSuperRecipeByUniqueHandle structure.
type GetSuperRecipeByUniqueHandleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSuperRecipeByUniqueHandleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSuperRecipeByUniqueHandleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetSuperRecipeByUniqueHandleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetSuperRecipeByUniqueHandleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetSuperRecipeByUniqueHandleOK creates a GetSuperRecipeByUniqueHandleOK with default headers values
func NewGetSuperRecipeByUniqueHandleOK() *GetSuperRecipeByUniqueHandleOK {
	return &GetSuperRecipeByUniqueHandleOK{}
}

/*GetSuperRecipeByUniqueHandleOK handles this case with default header values.

Description was not specified
*/
type GetSuperRecipeByUniqueHandleOK struct {
	Payload *models.Recipe
}

func (o *GetSuperRecipeByUniqueHandleOK) Error() string {
	return fmt.Sprintf("[GET /super-chow/{recipename}/{recipenameindex}][%d] getSuperRecipeByUniqueHandleOK  %+v", 200, o.Payload)
}

func (o *GetSuperRecipeByUniqueHandleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Recipe)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSuperRecipeByUniqueHandleBadRequest creates a GetSuperRecipeByUniqueHandleBadRequest with default headers values
func NewGetSuperRecipeByUniqueHandleBadRequest() *GetSuperRecipeByUniqueHandleBadRequest {
	return &GetSuperRecipeByUniqueHandleBadRequest{}
}

/*GetSuperRecipeByUniqueHandleBadRequest handles this case with default header values.

Description was not specified
*/
type GetSuperRecipeByUniqueHandleBadRequest struct {
	Payload *models.HTTPAPIError
}

func (o *GetSuperRecipeByUniqueHandleBadRequest) Error() string {
	return fmt.Sprintf("[GET /super-chow/{recipename}/{recipenameindex}][%d] getSuperRecipeByUniqueHandleBadRequest  %+v", 400, o.Payload)
}

func (o *GetSuperRecipeByUniqueHandleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSuperRecipeByUniqueHandleNotFound creates a GetSuperRecipeByUniqueHandleNotFound with default headers values
func NewGetSuperRecipeByUniqueHandleNotFound() *GetSuperRecipeByUniqueHandleNotFound {
	return &GetSuperRecipeByUniqueHandleNotFound{}
}

/*GetSuperRecipeByUniqueHandleNotFound handles this case with default header values.

Recipe not found
*/
type GetSuperRecipeByUniqueHandleNotFound struct {
	Payload *models.HTTPAPIError
}

func (o *GetSuperRecipeByUniqueHandleNotFound) Error() string {
	return fmt.Sprintf("[GET /super-chow/{recipename}/{recipenameindex}][%d] getSuperRecipeByUniqueHandleNotFound  %+v", 404, o.Payload)
}

func (o *GetSuperRecipeByUniqueHandleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
