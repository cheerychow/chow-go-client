// Code generated by go-swagger; DO NOT EDIT.

package chow

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetRecipeByUniqueHandleParams creates a new GetRecipeByUniqueHandleParams object
// with the default values initialized.
func NewGetRecipeByUniqueHandleParams() *GetRecipeByUniqueHandleParams {
	var (
		includeNutritionDefault = bool(false)
	)
	return &GetRecipeByUniqueHandleParams{
		IncludeNutrition: &includeNutritionDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRecipeByUniqueHandleParamsWithTimeout creates a new GetRecipeByUniqueHandleParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRecipeByUniqueHandleParamsWithTimeout(timeout time.Duration) *GetRecipeByUniqueHandleParams {
	var (
		includeNutritionDefault = bool(false)
	)
	return &GetRecipeByUniqueHandleParams{
		IncludeNutrition: &includeNutritionDefault,

		timeout: timeout,
	}
}

// NewGetRecipeByUniqueHandleParamsWithContext creates a new GetRecipeByUniqueHandleParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRecipeByUniqueHandleParamsWithContext(ctx context.Context) *GetRecipeByUniqueHandleParams {
	var (
		includeNutritionDefault = bool(false)
	)
	return &GetRecipeByUniqueHandleParams{
		IncludeNutrition: &includeNutritionDefault,

		Context: ctx,
	}
}

// NewGetRecipeByUniqueHandleParamsWithHTTPClient creates a new GetRecipeByUniqueHandleParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRecipeByUniqueHandleParamsWithHTTPClient(client *http.Client) *GetRecipeByUniqueHandleParams {
	var (
		includeNutritionDefault = bool(false)
	)
	return &GetRecipeByUniqueHandleParams{
		IncludeNutrition: &includeNutritionDefault,
		HTTPClient:       client,
	}
}

/*GetRecipeByUniqueHandleParams contains all the parameters to send to the API endpoint
for the get recipe by unique handle operation typically these are written to a http.Request
*/
type GetRecipeByUniqueHandleParams struct {

	/*IncludeCommonNames
	  Should the recipe's ingredient common names be included?

	*/
	IncludeCommonNames *bool
	/*IncludeFoodNames
	  Should the recipe's ingredient food names be included (this is different from the common names since the storage is a map, where key is the foodId and value is the ingredient common name.)

	*/
	IncludeFoodNames *bool
	/*IncludeFoodID
	  Should the recipe's ingredient food id's be included?

	*/
	IncludeFoodID *bool
	/*IncludeGda
	  Should the general daily provision for the recipe be included?

	*/
	IncludeGda *bool
	/*IncludeNutrition
	  Should the recipe's nutrition field be populated?

	*/
	IncludeNutrition *bool
	/*IncludeNutritionPerPortion
	  Should the recipe's nutrition per portion be included?

	*/
	IncludeNutritionPerPortion *bool
	/*RecipeName
	  The recipe's unique handle; a name and a number seperated by a forward slash.

	*/
	RecipeName string
	/*RecipeNameIndex
	  An index to differentiate recipes with the same name.

	*/
	RecipeNameIndex int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get recipe by unique handle params
func (o *GetRecipeByUniqueHandleParams) WithTimeout(timeout time.Duration) *GetRecipeByUniqueHandleParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get recipe by unique handle params
func (o *GetRecipeByUniqueHandleParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get recipe by unique handle params
func (o *GetRecipeByUniqueHandleParams) WithContext(ctx context.Context) *GetRecipeByUniqueHandleParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get recipe by unique handle params
func (o *GetRecipeByUniqueHandleParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get recipe by unique handle params
func (o *GetRecipeByUniqueHandleParams) WithHTTPClient(client *http.Client) *GetRecipeByUniqueHandleParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get recipe by unique handle params
func (o *GetRecipeByUniqueHandleParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncludeCommonNames adds the includeCommonNames to the get recipe by unique handle params
func (o *GetRecipeByUniqueHandleParams) WithIncludeCommonNames(includeCommonNames *bool) *GetRecipeByUniqueHandleParams {
	o.SetIncludeCommonNames(includeCommonNames)
	return o
}

// SetIncludeCommonNames adds the includeCommonNames to the get recipe by unique handle params
func (o *GetRecipeByUniqueHandleParams) SetIncludeCommonNames(includeCommonNames *bool) {
	o.IncludeCommonNames = includeCommonNames
}

// WithIncludeFoodNames adds the includeFoodNames to the get recipe by unique handle params
func (o *GetRecipeByUniqueHandleParams) WithIncludeFoodNames(includeFoodNames *bool) *GetRecipeByUniqueHandleParams {
	o.SetIncludeFoodNames(includeFoodNames)
	return o
}

// SetIncludeFoodNames adds the includeFoodNames to the get recipe by unique handle params
func (o *GetRecipeByUniqueHandleParams) SetIncludeFoodNames(includeFoodNames *bool) {
	o.IncludeFoodNames = includeFoodNames
}

// WithIncludeFoodID adds the includeFoodID to the get recipe by unique handle params
func (o *GetRecipeByUniqueHandleParams) WithIncludeFoodID(includeFoodID *bool) *GetRecipeByUniqueHandleParams {
	o.SetIncludeFoodID(includeFoodID)
	return o
}

// SetIncludeFoodID adds the includeFoodId to the get recipe by unique handle params
func (o *GetRecipeByUniqueHandleParams) SetIncludeFoodID(includeFoodID *bool) {
	o.IncludeFoodID = includeFoodID
}

// WithIncludeGda adds the includeGda to the get recipe by unique handle params
func (o *GetRecipeByUniqueHandleParams) WithIncludeGda(includeGda *bool) *GetRecipeByUniqueHandleParams {
	o.SetIncludeGda(includeGda)
	return o
}

// SetIncludeGda adds the includeGda to the get recipe by unique handle params
func (o *GetRecipeByUniqueHandleParams) SetIncludeGda(includeGda *bool) {
	o.IncludeGda = includeGda
}

// WithIncludeNutrition adds the includeNutrition to the get recipe by unique handle params
func (o *GetRecipeByUniqueHandleParams) WithIncludeNutrition(includeNutrition *bool) *GetRecipeByUniqueHandleParams {
	o.SetIncludeNutrition(includeNutrition)
	return o
}

// SetIncludeNutrition adds the includeNutrition to the get recipe by unique handle params
func (o *GetRecipeByUniqueHandleParams) SetIncludeNutrition(includeNutrition *bool) {
	o.IncludeNutrition = includeNutrition
}

// WithIncludeNutritionPerPortion adds the includeNutritionPerPortion to the get recipe by unique handle params
func (o *GetRecipeByUniqueHandleParams) WithIncludeNutritionPerPortion(includeNutritionPerPortion *bool) *GetRecipeByUniqueHandleParams {
	o.SetIncludeNutritionPerPortion(includeNutritionPerPortion)
	return o
}

// SetIncludeNutritionPerPortion adds the includeNutritionPerPortion to the get recipe by unique handle params
func (o *GetRecipeByUniqueHandleParams) SetIncludeNutritionPerPortion(includeNutritionPerPortion *bool) {
	o.IncludeNutritionPerPortion = includeNutritionPerPortion
}

// WithRecipeName adds the recipeName to the get recipe by unique handle params
func (o *GetRecipeByUniqueHandleParams) WithRecipeName(recipeName string) *GetRecipeByUniqueHandleParams {
	o.SetRecipeName(recipeName)
	return o
}

// SetRecipeName adds the recipeName to the get recipe by unique handle params
func (o *GetRecipeByUniqueHandleParams) SetRecipeName(recipeName string) {
	o.RecipeName = recipeName
}

// WithRecipeNameIndex adds the recipeNameIndex to the get recipe by unique handle params
func (o *GetRecipeByUniqueHandleParams) WithRecipeNameIndex(recipeNameIndex int32) *GetRecipeByUniqueHandleParams {
	o.SetRecipeNameIndex(recipeNameIndex)
	return o
}

// SetRecipeNameIndex adds the recipeNameIndex to the get recipe by unique handle params
func (o *GetRecipeByUniqueHandleParams) SetRecipeNameIndex(recipeNameIndex int32) {
	o.RecipeNameIndex = recipeNameIndex
}

// WriteToRequest writes these params to a swagger request
func (o *GetRecipeByUniqueHandleParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IncludeCommonNames != nil {

		// query param include-common-names
		var qrIncludeCommonNames bool
		if o.IncludeCommonNames != nil {
			qrIncludeCommonNames = *o.IncludeCommonNames
		}
		qIncludeCommonNames := swag.FormatBool(qrIncludeCommonNames)
		if qIncludeCommonNames != "" {
			if err := r.SetQueryParam("include-common-names", qIncludeCommonNames); err != nil {
				return err
			}
		}

	}

	if o.IncludeFoodNames != nil {

		// query param include-food-names
		var qrIncludeFoodNames bool
		if o.IncludeFoodNames != nil {
			qrIncludeFoodNames = *o.IncludeFoodNames
		}
		qIncludeFoodNames := swag.FormatBool(qrIncludeFoodNames)
		if qIncludeFoodNames != "" {
			if err := r.SetQueryParam("include-food-names", qIncludeFoodNames); err != nil {
				return err
			}
		}

	}

	if o.IncludeFoodID != nil {

		// query param include-foodId
		var qrIncludeFoodID bool
		if o.IncludeFoodID != nil {
			qrIncludeFoodID = *o.IncludeFoodID
		}
		qIncludeFoodID := swag.FormatBool(qrIncludeFoodID)
		if qIncludeFoodID != "" {
			if err := r.SetQueryParam("include-foodId", qIncludeFoodID); err != nil {
				return err
			}
		}

	}

	if o.IncludeGda != nil {

		// query param include-gda
		var qrIncludeGda bool
		if o.IncludeGda != nil {
			qrIncludeGda = *o.IncludeGda
		}
		qIncludeGda := swag.FormatBool(qrIncludeGda)
		if qIncludeGda != "" {
			if err := r.SetQueryParam("include-gda", qIncludeGda); err != nil {
				return err
			}
		}

	}

	if o.IncludeNutrition != nil {

		// query param include-nutrition
		var qrIncludeNutrition bool
		if o.IncludeNutrition != nil {
			qrIncludeNutrition = *o.IncludeNutrition
		}
		qIncludeNutrition := swag.FormatBool(qrIncludeNutrition)
		if qIncludeNutrition != "" {
			if err := r.SetQueryParam("include-nutrition", qIncludeNutrition); err != nil {
				return err
			}
		}

	}

	if o.IncludeNutritionPerPortion != nil {

		// query param include-nutrition-per-portion
		var qrIncludeNutritionPerPortion bool
		if o.IncludeNutritionPerPortion != nil {
			qrIncludeNutritionPerPortion = *o.IncludeNutritionPerPortion
		}
		qIncludeNutritionPerPortion := swag.FormatBool(qrIncludeNutritionPerPortion)
		if qIncludeNutritionPerPortion != "" {
			if err := r.SetQueryParam("include-nutrition-per-portion", qIncludeNutritionPerPortion); err != nil {
				return err
			}
		}

	}

	// path param recipeName
	if err := r.SetPathParam("recipeName", o.RecipeName); err != nil {
		return err
	}

	// path param recipeNameIndex
	if err := r.SetPathParam("recipeNameIndex", swag.FormatInt32(o.RecipeNameIndex)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
