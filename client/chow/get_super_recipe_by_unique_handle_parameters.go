// Code generated by go-swagger; DO NOT EDIT.

package chow

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSuperRecipeByUniqueHandleParams creates a new GetSuperRecipeByUniqueHandleParams object
// with the default values initialized.
func NewGetSuperRecipeByUniqueHandleParams() *GetSuperRecipeByUniqueHandleParams {
	var (
		includeCommonNamesDefault         = bool(false)
		includeFoodIDDefault              = bool(false)
		includeFoodNamesDefault           = bool(false)
		includeGdaDefault                 = bool(false)
		includeNutritionDefault           = bool(false)
		includeNutritionPerPortionDefault = bool(false)
		includeNutritionTipsDefault       = bool(false)
		includeRecipeCategoriesDefault    = bool(false)
	)
	return &GetSuperRecipeByUniqueHandleParams{
		IncludeCommonNames:         &includeCommonNamesDefault,
		IncludeFoodID:              &includeFoodIDDefault,
		IncludeFoodNames:           &includeFoodNamesDefault,
		IncludeGda:                 &includeGdaDefault,
		IncludeNutrition:           &includeNutritionDefault,
		IncludeNutritionPerPortion: &includeNutritionPerPortionDefault,
		IncludeNutritionTips:       &includeNutritionTipsDefault,
		IncludeRecipeCategories:    &includeRecipeCategoriesDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSuperRecipeByUniqueHandleParamsWithTimeout creates a new GetSuperRecipeByUniqueHandleParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSuperRecipeByUniqueHandleParamsWithTimeout(timeout time.Duration) *GetSuperRecipeByUniqueHandleParams {
	var (
		includeCommonNamesDefault         = bool(false)
		includeFoodIDDefault              = bool(false)
		includeFoodNamesDefault           = bool(false)
		includeGdaDefault                 = bool(false)
		includeNutritionDefault           = bool(false)
		includeNutritionPerPortionDefault = bool(false)
		includeNutritionTipsDefault       = bool(false)
		includeRecipeCategoriesDefault    = bool(false)
	)
	return &GetSuperRecipeByUniqueHandleParams{
		IncludeCommonNames:         &includeCommonNamesDefault,
		IncludeFoodID:              &includeFoodIDDefault,
		IncludeFoodNames:           &includeFoodNamesDefault,
		IncludeGda:                 &includeGdaDefault,
		IncludeNutrition:           &includeNutritionDefault,
		IncludeNutritionPerPortion: &includeNutritionPerPortionDefault,
		IncludeNutritionTips:       &includeNutritionTipsDefault,
		IncludeRecipeCategories:    &includeRecipeCategoriesDefault,

		timeout: timeout,
	}
}

// NewGetSuperRecipeByUniqueHandleParamsWithContext creates a new GetSuperRecipeByUniqueHandleParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSuperRecipeByUniqueHandleParamsWithContext(ctx context.Context) *GetSuperRecipeByUniqueHandleParams {
	var (
		includeCommonNamesDefault         = bool(false)
		includeFoodIdDefault              = bool(false)
		includeFoodNamesDefault           = bool(false)
		includeGdaDefault                 = bool(false)
		includeNutritionDefault           = bool(false)
		includeNutritionPerPortionDefault = bool(false)
		includeNutritionTipsDefault       = bool(false)
		includeRecipeCategoriesDefault    = bool(false)
	)
	return &GetSuperRecipeByUniqueHandleParams{
		IncludeCommonNames:         &includeCommonNamesDefault,
		IncludeFoodID:              &includeFoodIdDefault,
		IncludeFoodNames:           &includeFoodNamesDefault,
		IncludeGda:                 &includeGdaDefault,
		IncludeNutrition:           &includeNutritionDefault,
		IncludeNutritionPerPortion: &includeNutritionPerPortionDefault,
		IncludeNutritionTips:       &includeNutritionTipsDefault,
		IncludeRecipeCategories:    &includeRecipeCategoriesDefault,

		Context: ctx,
	}
}

// NewGetSuperRecipeByUniqueHandleParamsWithHTTPClient creates a new GetSuperRecipeByUniqueHandleParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSuperRecipeByUniqueHandleParamsWithHTTPClient(client *http.Client) *GetSuperRecipeByUniqueHandleParams {
	var (
		includeCommonNamesDefault         = bool(false)
		includeFoodIdDefault              = bool(false)
		includeFoodNamesDefault           = bool(false)
		includeGdaDefault                 = bool(false)
		includeNutritionDefault           = bool(false)
		includeNutritionPerPortionDefault = bool(false)
		includeNutritionTipsDefault       = bool(false)
		includeRecipeCategoriesDefault    = bool(false)
	)
	return &GetSuperRecipeByUniqueHandleParams{
		IncludeCommonNames:         &includeCommonNamesDefault,
		IncludeFoodID:              &includeFoodIdDefault,
		IncludeFoodNames:           &includeFoodNamesDefault,
		IncludeGda:                 &includeGdaDefault,
		IncludeNutrition:           &includeNutritionDefault,
		IncludeNutritionPerPortion: &includeNutritionPerPortionDefault,
		IncludeNutritionTips:       &includeNutritionTipsDefault,
		IncludeRecipeCategories:    &includeRecipeCategoriesDefault,
		HTTPClient:                 client,
	}
}

/*GetSuperRecipeByUniqueHandleParams contains all the parameters to send to the API endpoint
for the get super recipe by unique handle operation typically these are written to a http.Request
*/
type GetSuperRecipeByUniqueHandleParams struct {

	/*IncludeCommonNames
	  Should the recipe's ingredient common names be included?

	*/
	IncludeCommonNames *bool
	/*IncludeFoodID
	  Should the recipe's ingredient food id's be included? This can be useful if you need the names of foods as a map, where the key is the food id, the value the food name.

	*/
	IncludeFoodID *bool
	/*IncludeFoodNames
	  Should the recipe's ingredient food names be included (this is different from the common names since the storage is a map, where key is the foodId and value is the ingredient common name)

	*/
	IncludeFoodNames *bool
	/*IncludeGda
	  Should the general daily provision for the recipe be included?

	*/
	IncludeGda *bool
	/*IncludeNutrition
	  Should the recipe's nutrition field be populated?

	*/
	IncludeNutrition *bool
	/*IncludeNutritionPerPortion
	  Should the recipe's nutrition per portion be included?

	*/
	IncludeNutritionPerPortion *bool
	/*IncludeNutritionTips
	  Provide tips and information regarding the nutritional content for this recipe.

	*/
	IncludeNutritionTips *bool
	/*IncludeRecipeCategories
	  Should the recipe's categories be included? The Recipe categories include; vegan-friendly, vegetarion, pescatarian, gluten-free, low-fat, low-sat-fat, low-sugar.

	*/
	IncludeRecipeCategories *bool
	/*Recipename
	  The recipe's unique name

	*/
	Recipename string
	/*Recipenameindex
	  An index to differentiate recipe's with the same name

	*/
	Recipenameindex int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get super recipe by unique handle params
func (o *GetSuperRecipeByUniqueHandleParams) WithTimeout(timeout time.Duration) *GetSuperRecipeByUniqueHandleParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get super recipe by unique handle params
func (o *GetSuperRecipeByUniqueHandleParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get super recipe by unique handle params
func (o *GetSuperRecipeByUniqueHandleParams) WithContext(ctx context.Context) *GetSuperRecipeByUniqueHandleParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get super recipe by unique handle params
func (o *GetSuperRecipeByUniqueHandleParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get super recipe by unique handle params
func (o *GetSuperRecipeByUniqueHandleParams) WithHTTPClient(client *http.Client) *GetSuperRecipeByUniqueHandleParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get super recipe by unique handle params
func (o *GetSuperRecipeByUniqueHandleParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncludeCommonNames adds the includeCommonNames to the get super recipe by unique handle params
func (o *GetSuperRecipeByUniqueHandleParams) WithIncludeCommonNames(includeCommonNames *bool) *GetSuperRecipeByUniqueHandleParams {
	o.SetIncludeCommonNames(includeCommonNames)
	return o
}

// SetIncludeCommonNames adds the includeCommonNames to the get super recipe by unique handle params
func (o *GetSuperRecipeByUniqueHandleParams) SetIncludeCommonNames(includeCommonNames *bool) {
	o.IncludeCommonNames = includeCommonNames
}

// WithIncludeFoodID adds the includeFoodID to the get super recipe by unique handle params
func (o *GetSuperRecipeByUniqueHandleParams) WithIncludeFoodID(includeFoodID *bool) *GetSuperRecipeByUniqueHandleParams {
	o.SetIncludeFoodID(includeFoodID)
	return o
}

// SetIncludeFoodID adds the includeFoodId to the get super recipe by unique handle params
func (o *GetSuperRecipeByUniqueHandleParams) SetIncludeFoodID(includeFoodID *bool) {
	o.IncludeFoodID = includeFoodID
}

// WithIncludeFoodNames adds the includeFoodNames to the get super recipe by unique handle params
func (o *GetSuperRecipeByUniqueHandleParams) WithIncludeFoodNames(includeFoodNames *bool) *GetSuperRecipeByUniqueHandleParams {
	o.SetIncludeFoodNames(includeFoodNames)
	return o
}

// SetIncludeFoodNames adds the includeFoodNames to the get super recipe by unique handle params
func (o *GetSuperRecipeByUniqueHandleParams) SetIncludeFoodNames(includeFoodNames *bool) {
	o.IncludeFoodNames = includeFoodNames
}

// WithIncludeGda adds the includeGda to the get super recipe by unique handle params
func (o *GetSuperRecipeByUniqueHandleParams) WithIncludeGda(includeGda *bool) *GetSuperRecipeByUniqueHandleParams {
	o.SetIncludeGda(includeGda)
	return o
}

// SetIncludeGda adds the includeGda to the get super recipe by unique handle params
func (o *GetSuperRecipeByUniqueHandleParams) SetIncludeGda(includeGda *bool) {
	o.IncludeGda = includeGda
}

// WithIncludeNutrition adds the includeNutrition to the get super recipe by unique handle params
func (o *GetSuperRecipeByUniqueHandleParams) WithIncludeNutrition(includeNutrition *bool) *GetSuperRecipeByUniqueHandleParams {
	o.SetIncludeNutrition(includeNutrition)
	return o
}

// SetIncludeNutrition adds the includeNutrition to the get super recipe by unique handle params
func (o *GetSuperRecipeByUniqueHandleParams) SetIncludeNutrition(includeNutrition *bool) {
	o.IncludeNutrition = includeNutrition
}

// WithIncludeNutritionPerPortion adds the includeNutritionPerPortion to the get super recipe by unique handle params
func (o *GetSuperRecipeByUniqueHandleParams) WithIncludeNutritionPerPortion(includeNutritionPerPortion *bool) *GetSuperRecipeByUniqueHandleParams {
	o.SetIncludeNutritionPerPortion(includeNutritionPerPortion)
	return o
}

// SetIncludeNutritionPerPortion adds the includeNutritionPerPortion to the get super recipe by unique handle params
func (o *GetSuperRecipeByUniqueHandleParams) SetIncludeNutritionPerPortion(includeNutritionPerPortion *bool) {
	o.IncludeNutritionPerPortion = includeNutritionPerPortion
}

// WithIncludeNutritionTips adds the includeNutritionTips to the get super recipe by unique handle params
func (o *GetSuperRecipeByUniqueHandleParams) WithIncludeNutritionTips(includeNutritionTips *bool) *GetSuperRecipeByUniqueHandleParams {
	o.SetIncludeNutritionTips(includeNutritionTips)
	return o
}

// SetIncludeNutritionTips adds the includeNutritionTips to the get super recipe by unique handle params
func (o *GetSuperRecipeByUniqueHandleParams) SetIncludeNutritionTips(includeNutritionTips *bool) {
	o.IncludeNutritionTips = includeNutritionTips
}

// WithIncludeRecipeCategories adds the includeRecipeCategories to the get super recipe by unique handle params
func (o *GetSuperRecipeByUniqueHandleParams) WithIncludeRecipeCategories(includeRecipeCategories *bool) *GetSuperRecipeByUniqueHandleParams {
	o.SetIncludeRecipeCategories(includeRecipeCategories)
	return o
}

// SetIncludeRecipeCategories adds the includeRecipeCategories to the get super recipe by unique handle params
func (o *GetSuperRecipeByUniqueHandleParams) SetIncludeRecipeCategories(includeRecipeCategories *bool) {
	o.IncludeRecipeCategories = includeRecipeCategories
}

// WithRecipename adds the recipename to the get super recipe by unique handle params
func (o *GetSuperRecipeByUniqueHandleParams) WithRecipename(recipename string) *GetSuperRecipeByUniqueHandleParams {
	o.SetRecipename(recipename)
	return o
}

// SetRecipename adds the recipename to the get super recipe by unique handle params
func (o *GetSuperRecipeByUniqueHandleParams) SetRecipename(recipename string) {
	o.Recipename = recipename
}

// WithRecipenameindex adds the recipenameindex to the get super recipe by unique handle params
func (o *GetSuperRecipeByUniqueHandleParams) WithRecipenameindex(recipenameindex int32) *GetSuperRecipeByUniqueHandleParams {
	o.SetRecipenameindex(recipenameindex)
	return o
}

// SetRecipenameindex adds the recipenameindex to the get super recipe by unique handle params
func (o *GetSuperRecipeByUniqueHandleParams) SetRecipenameindex(recipenameindex int32) {
	o.Recipenameindex = recipenameindex
}

// WriteToRequest writes these params to a swagger request
func (o *GetSuperRecipeByUniqueHandleParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IncludeCommonNames != nil {

		// query param include-common-names
		var qrIncludeCommonNames bool
		if o.IncludeCommonNames != nil {
			qrIncludeCommonNames = *o.IncludeCommonNames
		}
		qIncludeCommonNames := swag.FormatBool(qrIncludeCommonNames)
		if qIncludeCommonNames != "" {
			if err := r.SetQueryParam("include-common-names", qIncludeCommonNames); err != nil {
				return err
			}
		}

	}

	if o.IncludeFoodID != nil {

		// query param include-food-id
		var qrIncludeFoodID bool
		if o.IncludeFoodID != nil {
			qrIncludeFoodID = *o.IncludeFoodID
		}
		qIncludeFoodID := swag.FormatBool(qrIncludeFoodID)
		if qIncludeFoodID != "" {
			if err := r.SetQueryParam("include-food-id", qIncludeFoodID); err != nil {
				return err
			}
		}

	}

	if o.IncludeFoodNames != nil {

		// query param include-food-names
		var qrIncludeFoodNames bool
		if o.IncludeFoodNames != nil {
			qrIncludeFoodNames = *o.IncludeFoodNames
		}
		qIncludeFoodNames := swag.FormatBool(qrIncludeFoodNames)
		if qIncludeFoodNames != "" {
			if err := r.SetQueryParam("include-food-names", qIncludeFoodNames); err != nil {
				return err
			}
		}

	}

	if o.IncludeGda != nil {

		// query param include-gda
		var qrIncludeGda bool
		if o.IncludeGda != nil {
			qrIncludeGda = *o.IncludeGda
		}
		qIncludeGda := swag.FormatBool(qrIncludeGda)
		if qIncludeGda != "" {
			if err := r.SetQueryParam("include-gda", qIncludeGda); err != nil {
				return err
			}
		}

	}

	if o.IncludeNutrition != nil {

		// query param include-nutrition
		var qrIncludeNutrition bool
		if o.IncludeNutrition != nil {
			qrIncludeNutrition = *o.IncludeNutrition
		}
		qIncludeNutrition := swag.FormatBool(qrIncludeNutrition)
		if qIncludeNutrition != "" {
			if err := r.SetQueryParam("include-nutrition", qIncludeNutrition); err != nil {
				return err
			}
		}

	}

	if o.IncludeNutritionPerPortion != nil {

		// query param include-nutrition-per-portion
		var qrIncludeNutritionPerPortion bool
		if o.IncludeNutritionPerPortion != nil {
			qrIncludeNutritionPerPortion = *o.IncludeNutritionPerPortion
		}
		qIncludeNutritionPerPortion := swag.FormatBool(qrIncludeNutritionPerPortion)
		if qIncludeNutritionPerPortion != "" {
			if err := r.SetQueryParam("include-nutrition-per-portion", qIncludeNutritionPerPortion); err != nil {
				return err
			}
		}

	}

	if o.IncludeNutritionTips != nil {

		// query param include-nutrition-tips
		var qrIncludeNutritionTips bool
		if o.IncludeNutritionTips != nil {
			qrIncludeNutritionTips = *o.IncludeNutritionTips
		}
		qIncludeNutritionTips := swag.FormatBool(qrIncludeNutritionTips)
		if qIncludeNutritionTips != "" {
			if err := r.SetQueryParam("include-nutrition-tips", qIncludeNutritionTips); err != nil {
				return err
			}
		}

	}

	if o.IncludeRecipeCategories != nil {

		// query param include-recipe-categories
		var qrIncludeRecipeCategories bool
		if o.IncludeRecipeCategories != nil {
			qrIncludeRecipeCategories = *o.IncludeRecipeCategories
		}
		qIncludeRecipeCategories := swag.FormatBool(qrIncludeRecipeCategories)
		if qIncludeRecipeCategories != "" {
			if err := r.SetQueryParam("include-recipe-categories", qIncludeRecipeCategories); err != nil {
				return err
			}
		}

	}

	// path param recipename
	if err := r.SetPathParam("recipename", o.Recipename); err != nil {
		return err
	}

	// path param recipenameindex
	if err := r.SetPathParam("recipenameindex", swag.FormatInt32(o.Recipenameindex)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
