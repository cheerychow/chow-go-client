// Code generated by go-swagger; DO NOT EDIT.

package nutrition_tips

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetNutritionTipsLabelFromPlainIngredientsHTMLParams creates a new GetNutritionTipsLabelFromPlainIngredientsHTMLParams object
// with the default values initialized.
func NewGetNutritionTipsLabelFromPlainIngredientsHTMLParams() *GetNutritionTipsLabelFromPlainIngredientsHTMLParams {
	var (
		countryDefault  = string("uk")
		portionsDefault = int32(1)
	)
	return &GetNutritionTipsLabelFromPlainIngredientsHTMLParams{
		Country:  &countryDefault,
		Portions: &portionsDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetNutritionTipsLabelFromPlainIngredientsHTMLParamsWithTimeout creates a new GetNutritionTipsLabelFromPlainIngredientsHTMLParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetNutritionTipsLabelFromPlainIngredientsHTMLParamsWithTimeout(timeout time.Duration) *GetNutritionTipsLabelFromPlainIngredientsHTMLParams {
	var (
		countryDefault  = string("uk")
		portionsDefault = int32(1)
	)
	return &GetNutritionTipsLabelFromPlainIngredientsHTMLParams{
		Country:  &countryDefault,
		Portions: &portionsDefault,

		timeout: timeout,
	}
}

// NewGetNutritionTipsLabelFromPlainIngredientsHTMLParamsWithContext creates a new GetNutritionTipsLabelFromPlainIngredientsHTMLParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetNutritionTipsLabelFromPlainIngredientsHTMLParamsWithContext(ctx context.Context) *GetNutritionTipsLabelFromPlainIngredientsHTMLParams {
	var (
		countryDefault  = string("uk")
		portionsDefault = int32(1)
	)
	return &GetNutritionTipsLabelFromPlainIngredientsHTMLParams{
		Country:  &countryDefault,
		Portions: &portionsDefault,

		Context: ctx,
	}
}

// NewGetNutritionTipsLabelFromPlainIngredientsHTMLParamsWithHTTPClient creates a new GetNutritionTipsLabelFromPlainIngredientsHTMLParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetNutritionTipsLabelFromPlainIngredientsHTMLParamsWithHTTPClient(client *http.Client) *GetNutritionTipsLabelFromPlainIngredientsHTMLParams {
	var (
		countryDefault  = string("uk")
		portionsDefault = int32(1)
	)
	return &GetNutritionTipsLabelFromPlainIngredientsHTMLParams{
		Country:    &countryDefault,
		Portions:   &portionsDefault,
		HTTPClient: client,
	}
}

/*GetNutritionTipsLabelFromPlainIngredientsHTMLParams contains all the parameters to send to the API endpoint
for the get nutrition tips label from plain ingredients Html operation typically these are written to a http.Request
*/
type GetNutritionTipsLabelFromPlainIngredientsHTMLParams struct {

	/*Country
	  The country code which the RDA should reflect.

	*/
	Country *string
	/*JSONBody
	  A JSON array of plain english ingredients.

	*/
	JSONBody []string
	/*PortionSize
	  How large do you want the portions to be? The recipe creators will often decide how many portions a recipe will produce, when following the instructions. However, some people have healthier appetites than others, so this parameter allows control of this element of the recipe. This value is in gramms.

	*/
	PortionSize *int32
	/*Portions
	  The number of portions the parsed ingredients will create.

	*/
	Portions *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get nutrition tips label from plain ingredients Html params
func (o *GetNutritionTipsLabelFromPlainIngredientsHTMLParams) WithTimeout(timeout time.Duration) *GetNutritionTipsLabelFromPlainIngredientsHTMLParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get nutrition tips label from plain ingredients Html params
func (o *GetNutritionTipsLabelFromPlainIngredientsHTMLParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get nutrition tips label from plain ingredients Html params
func (o *GetNutritionTipsLabelFromPlainIngredientsHTMLParams) WithContext(ctx context.Context) *GetNutritionTipsLabelFromPlainIngredientsHTMLParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get nutrition tips label from plain ingredients Html params
func (o *GetNutritionTipsLabelFromPlainIngredientsHTMLParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get nutrition tips label from plain ingredients Html params
func (o *GetNutritionTipsLabelFromPlainIngredientsHTMLParams) WithHTTPClient(client *http.Client) *GetNutritionTipsLabelFromPlainIngredientsHTMLParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get nutrition tips label from plain ingredients Html params
func (o *GetNutritionTipsLabelFromPlainIngredientsHTMLParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCountry adds the country to the get nutrition tips label from plain ingredients Html params
func (o *GetNutritionTipsLabelFromPlainIngredientsHTMLParams) WithCountry(country *string) *GetNutritionTipsLabelFromPlainIngredientsHTMLParams {
	o.SetCountry(country)
	return o
}

// SetCountry adds the country to the get nutrition tips label from plain ingredients Html params
func (o *GetNutritionTipsLabelFromPlainIngredientsHTMLParams) SetCountry(country *string) {
	o.Country = country
}

// WithJSONBody adds the jSONBody to the get nutrition tips label from plain ingredients Html params
func (o *GetNutritionTipsLabelFromPlainIngredientsHTMLParams) WithJSONBody(jSONBody []string) *GetNutritionTipsLabelFromPlainIngredientsHTMLParams {
	o.SetJSONBody(jSONBody)
	return o
}

// SetJSONBody adds the jsonBody to the get nutrition tips label from plain ingredients Html params
func (o *GetNutritionTipsLabelFromPlainIngredientsHTMLParams) SetJSONBody(jSONBody []string) {
	o.JSONBody = jSONBody
}

// WithPortionSize adds the portionSize to the get nutrition tips label from plain ingredients Html params
func (o *GetNutritionTipsLabelFromPlainIngredientsHTMLParams) WithPortionSize(portionSize *int32) *GetNutritionTipsLabelFromPlainIngredientsHTMLParams {
	o.SetPortionSize(portionSize)
	return o
}

// SetPortionSize adds the portionSize to the get nutrition tips label from plain ingredients Html params
func (o *GetNutritionTipsLabelFromPlainIngredientsHTMLParams) SetPortionSize(portionSize *int32) {
	o.PortionSize = portionSize
}

// WithPortions adds the portions to the get nutrition tips label from plain ingredients Html params
func (o *GetNutritionTipsLabelFromPlainIngredientsHTMLParams) WithPortions(portions *int32) *GetNutritionTipsLabelFromPlainIngredientsHTMLParams {
	o.SetPortions(portions)
	return o
}

// SetPortions adds the portions to the get nutrition tips label from plain ingredients Html params
func (o *GetNutritionTipsLabelFromPlainIngredientsHTMLParams) SetPortions(portions *int32) {
	o.Portions = portions
}

// WriteToRequest writes these params to a swagger request
func (o *GetNutritionTipsLabelFromPlainIngredientsHTMLParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Country != nil {

		// query param country
		var qrCountry string
		if o.Country != nil {
			qrCountry = *o.Country
		}
		qCountry := qrCountry
		if qCountry != "" {
			if err := r.SetQueryParam("country", qCountry); err != nil {
				return err
			}
		}

	}

	if o.JSONBody != nil {
		if err := r.SetBodyParam(o.JSONBody); err != nil {
			return err
		}
	}

	if o.PortionSize != nil {

		// query param portionSize
		var qrPortionSize int32
		if o.PortionSize != nil {
			qrPortionSize = *o.PortionSize
		}
		qPortionSize := swag.FormatInt32(qrPortionSize)
		if qPortionSize != "" {
			if err := r.SetQueryParam("portionSize", qPortionSize); err != nil {
				return err
			}
		}

	}

	if o.Portions != nil {

		// query param portions
		var qrPortions int32
		if o.Portions != nil {
			qrPortions = *o.Portions
		}
		qPortions := swag.FormatInt32(qrPortions)
		if qPortions != "" {
			if err := r.SetQueryParam("portions", qPortions); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
