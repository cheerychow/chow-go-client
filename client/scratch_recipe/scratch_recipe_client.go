// Code generated by go-swagger; DO NOT EDIT.

package scratch_recipe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new scratch recipe API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for scratch recipe API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ChangeIngredientForScratchPadRecipe adds new ingredients to a scratch recipe
*/
func (a *Client) ChangeIngredientForScratchPadRecipe(params *ChangeIngredientForScratchPadRecipeParams, authInfo runtime.ClientAuthInfoWriter) (*ChangeIngredientForScratchPadRecipeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeIngredientForScratchPadRecipeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeIngredientForScratchPadRecipe",
		Method:             "PUT",
		PathPattern:        "/scratch-recipe/{recipeId}/ingredient/{ingredient-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeIngredientForScratchPadRecipeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChangeIngredientForScratchPadRecipeOK), nil

}

/*
CreateAScratchPadRecipe creates a temp recipe from plain english ingredients
*/
func (a *Client) CreateAScratchPadRecipe(params *CreateAScratchPadRecipeParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAScratchPadRecipeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAScratchPadRecipeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateAScratchPadRecipe",
		Method:             "POST",
		PathPattern:        "/scratch-recipe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAScratchPadRecipeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateAScratchPadRecipeOK), nil

}

/*
DeleteScratchPadRecipe deletes a scratch pad recipe
*/
func (a *Client) DeleteScratchPadRecipe(params *DeleteScratchPadRecipeParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteScratchPadRecipeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteScratchPadRecipeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteScratchPadRecipe",
		Method:             "DELETE",
		PathPattern:        "/scratch-recipe/{recipeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteScratchPadRecipeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteScratchPadRecipeOK), nil

}

/*
GetAllMyScratchRecipes gets all of my scratch recipes
*/
func (a *Client) GetAllMyScratchRecipes(params *GetAllMyScratchRecipesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllMyScratchRecipesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllMyScratchRecipesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAllMyScratchRecipes",
		Method:             "GET",
		PathPattern:        "/scratch-recipe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllMyScratchRecipesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllMyScratchRecipesOK), nil

}

/*
GetAllMyScratchRecipesAndNutrition gets all of my scratch recipes including the nutrition for the recipe
*/
func (a *Client) GetAllMyScratchRecipesAndNutrition(params *GetAllMyScratchRecipesAndNutritionParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllMyScratchRecipesAndNutritionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllMyScratchRecipesAndNutritionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAllMyScratchRecipesAndNutrition",
		Method:             "GET",
		PathPattern:        "/scratch-recipe/nutrition",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllMyScratchRecipesAndNutritionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllMyScratchRecipesAndNutritionOK), nil

}

/*
GetAllMyScratchRecipesSingular gets a specific scratch pad recipe
*/
func (a *Client) GetAllMyScratchRecipesSingular(params *GetAllMyScratchRecipesSingularParams, authInfo runtime.ClientAuthInfoWriter) (*GetAllMyScratchRecipesSingularOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllMyScratchRecipesSingularParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAllMyScratchRecipesSingular",
		Method:             "GET",
		PathPattern:        "/scratch-recipe/{recipeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAllMyScratchRecipesSingularReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllMyScratchRecipesSingularOK), nil

}

/*
GetNutritionForSpecificScratchRecipe gets the nutritional information for a specific scratch recipe
*/
func (a *Client) GetNutritionForSpecificScratchRecipe(params *GetNutritionForSpecificScratchRecipeParams, authInfo runtime.ClientAuthInfoWriter) (*GetNutritionForSpecificScratchRecipeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNutritionForSpecificScratchRecipeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetNutritionForSpecificScratchRecipe",
		Method:             "GET",
		PathPattern:        "/scratch-recipe/{recipeId}/nutrition",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNutritionForSpecificScratchRecipeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNutritionForSpecificScratchRecipeOK), nil

}

/*
GetScratchRecipeIngredientNames gets a list of the common names for a particular recipe
*/
func (a *Client) GetScratchRecipeIngredientNames(params *GetScratchRecipeIngredientNamesParams, authInfo runtime.ClientAuthInfoWriter) (*GetScratchRecipeIngredientNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetScratchRecipeIngredientNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetScratchRecipeIngredientNames",
		Method:             "GET",
		PathPattern:        "/scratch-recipe/{recipeId}/ingredient-names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetScratchRecipeIngredientNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetScratchRecipeIngredientNamesOK), nil

}

/*
PutScratchPadRecipe saves changes to a scratch pad recipe
*/
func (a *Client) PutScratchPadRecipe(params *PutScratchPadRecipeParams, authInfo runtime.ClientAuthInfoWriter) (*PutScratchPadRecipeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutScratchPadRecipeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutScratchPadRecipe",
		Method:             "POST",
		PathPattern:        "/scratch-recipe/{recipeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutScratchPadRecipeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutScratchPadRecipeOK), nil

}

/*
RemoveIngredientFromScratchPadRecipe removes an ingredient from a scratch recipe
*/
func (a *Client) RemoveIngredientFromScratchPadRecipe(params *RemoveIngredientFromScratchPadRecipeParams, authInfo runtime.ClientAuthInfoWriter) (*RemoveIngredientFromScratchPadRecipeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveIngredientFromScratchPadRecipeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RemoveIngredientFromScratchPadRecipe",
		Method:             "DELETE",
		PathPattern:        "/scratch-recipe/{recipeId}/ingredient/{ingredient-id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveIngredientFromScratchPadRecipeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RemoveIngredientFromScratchPadRecipeOK), nil

}

/*
SaveIngredientsInScratchRecipe adds new ingredients to a scratch recipe
*/
func (a *Client) SaveIngredientsInScratchRecipe(params *SaveIngredientsInScratchRecipeParams, authInfo runtime.ClientAuthInfoWriter) (*SaveIngredientsInScratchRecipeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveIngredientsInScratchRecipeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SaveIngredientsInScratchRecipe",
		Method:             "POST",
		PathPattern:        "/scratch-recipe/{recipeId}/ingredient",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SaveIngredientsInScratchRecipeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SaveIngredientsInScratchRecipeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
