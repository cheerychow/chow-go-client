// Code generated by go-swagger; DO NOT EDIT.

package scratch_recipe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cheerychow/go-client/models"
)

// NewChangeIngredientForScratchPadRecipeParams creates a new ChangeIngredientForScratchPadRecipeParams object
// with the default values initialized.
func NewChangeIngredientForScratchPadRecipeParams() *ChangeIngredientForScratchPadRecipeParams {
	var ()
	return &ChangeIngredientForScratchPadRecipeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewChangeIngredientForScratchPadRecipeParamsWithTimeout creates a new ChangeIngredientForScratchPadRecipeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewChangeIngredientForScratchPadRecipeParamsWithTimeout(timeout time.Duration) *ChangeIngredientForScratchPadRecipeParams {
	var ()
	return &ChangeIngredientForScratchPadRecipeParams{

		timeout: timeout,
	}
}

// NewChangeIngredientForScratchPadRecipeParamsWithContext creates a new ChangeIngredientForScratchPadRecipeParams object
// with the default values initialized, and the ability to set a context for a request
func NewChangeIngredientForScratchPadRecipeParamsWithContext(ctx context.Context) *ChangeIngredientForScratchPadRecipeParams {
	var ()
	return &ChangeIngredientForScratchPadRecipeParams{

		Context: ctx,
	}
}

// NewChangeIngredientForScratchPadRecipeParamsWithHTTPClient creates a new ChangeIngredientForScratchPadRecipeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewChangeIngredientForScratchPadRecipeParamsWithHTTPClient(client *http.Client) *ChangeIngredientForScratchPadRecipeParams {
	var ()
	return &ChangeIngredientForScratchPadRecipeParams{
		HTTPClient: client,
	}
}

/*ChangeIngredientForScratchPadRecipeParams contains all the parameters to send to the API endpoint
for the change ingredient for scratch pad recipe operation typically these are written to a http.Request
*/
type ChangeIngredientForScratchPadRecipeParams struct {

	/*IngredientID
	  The ID of the ingredient you want to make changes to.

	*/
	IngredientID int64
	/*JSONBody
	  The ingredient to be changed

	*/
	JSONBody *models.Ingredient
	/*RecipeID
	  The ID of the scratch pad recipe you want to change

	*/
	RecipeID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the change ingredient for scratch pad recipe params
func (o *ChangeIngredientForScratchPadRecipeParams) WithTimeout(timeout time.Duration) *ChangeIngredientForScratchPadRecipeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the change ingredient for scratch pad recipe params
func (o *ChangeIngredientForScratchPadRecipeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the change ingredient for scratch pad recipe params
func (o *ChangeIngredientForScratchPadRecipeParams) WithContext(ctx context.Context) *ChangeIngredientForScratchPadRecipeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the change ingredient for scratch pad recipe params
func (o *ChangeIngredientForScratchPadRecipeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the change ingredient for scratch pad recipe params
func (o *ChangeIngredientForScratchPadRecipeParams) WithHTTPClient(client *http.Client) *ChangeIngredientForScratchPadRecipeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the change ingredient for scratch pad recipe params
func (o *ChangeIngredientForScratchPadRecipeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIngredientID adds the ingredientID to the change ingredient for scratch pad recipe params
func (o *ChangeIngredientForScratchPadRecipeParams) WithIngredientID(ingredientID int64) *ChangeIngredientForScratchPadRecipeParams {
	o.SetIngredientID(ingredientID)
	return o
}

// SetIngredientID adds the ingredientId to the change ingredient for scratch pad recipe params
func (o *ChangeIngredientForScratchPadRecipeParams) SetIngredientID(ingredientID int64) {
	o.IngredientID = ingredientID
}

// WithJSONBody adds the jSONBody to the change ingredient for scratch pad recipe params
func (o *ChangeIngredientForScratchPadRecipeParams) WithJSONBody(jSONBody *models.Ingredient) *ChangeIngredientForScratchPadRecipeParams {
	o.SetJSONBody(jSONBody)
	return o
}

// SetJSONBody adds the jsonBody to the change ingredient for scratch pad recipe params
func (o *ChangeIngredientForScratchPadRecipeParams) SetJSONBody(jSONBody *models.Ingredient) {
	o.JSONBody = jSONBody
}

// WithRecipeID adds the recipeID to the change ingredient for scratch pad recipe params
func (o *ChangeIngredientForScratchPadRecipeParams) WithRecipeID(recipeID string) *ChangeIngredientForScratchPadRecipeParams {
	o.SetRecipeID(recipeID)
	return o
}

// SetRecipeID adds the recipeId to the change ingredient for scratch pad recipe params
func (o *ChangeIngredientForScratchPadRecipeParams) SetRecipeID(recipeID string) {
	o.RecipeID = recipeID
}

// WriteToRequest writes these params to a swagger request
func (o *ChangeIngredientForScratchPadRecipeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param ingredient-id
	if err := r.SetPathParam("ingredient-id", swag.FormatInt64(o.IngredientID)); err != nil {
		return err
	}

	if o.JSONBody != nil {
		if err := r.SetBodyParam(o.JSONBody); err != nil {
			return err
		}
	}

	// path param recipeId
	if err := r.SetPathParam("recipeId", o.RecipeID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
