// Code generated by go-swagger; DO NOT EDIT.

package scratch_recipe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cheerychow/chow-go-client/models"
)

// ChangeIngredientForScratchPadRecipeReader is a Reader for the ChangeIngredientForScratchPadRecipe structure.
type ChangeIngredientForScratchPadRecipeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChangeIngredientForScratchPadRecipeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewChangeIngredientForScratchPadRecipeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewChangeIngredientForScratchPadRecipeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewChangeIngredientForScratchPadRecipeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewChangeIngredientForScratchPadRecipeOK creates a ChangeIngredientForScratchPadRecipeOK with default headers values
func NewChangeIngredientForScratchPadRecipeOK() *ChangeIngredientForScratchPadRecipeOK {
	return &ChangeIngredientForScratchPadRecipeOK{}
}

/*ChangeIngredientForScratchPadRecipeOK handles this case with default header values.

The object which was changed
*/
type ChangeIngredientForScratchPadRecipeOK struct {
	Payload *models.Ingredient
}

func (o *ChangeIngredientForScratchPadRecipeOK) Error() string {
	return fmt.Sprintf("[PUT /scratch-recipe/{recipeId}/ingredient/{ingredient-id}][%d] changeIngredientForScratchPadRecipeOK  %+v", 200, o.Payload)
}

func (o *ChangeIngredientForScratchPadRecipeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Ingredient)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangeIngredientForScratchPadRecipeBadRequest creates a ChangeIngredientForScratchPadRecipeBadRequest with default headers values
func NewChangeIngredientForScratchPadRecipeBadRequest() *ChangeIngredientForScratchPadRecipeBadRequest {
	return &ChangeIngredientForScratchPadRecipeBadRequest{}
}

/*ChangeIngredientForScratchPadRecipeBadRequest handles this case with default header values.

Malformed JSON (this endpoint requires an array of strings
*/
type ChangeIngredientForScratchPadRecipeBadRequest struct {
	Payload *models.HTTPAPIError
}

func (o *ChangeIngredientForScratchPadRecipeBadRequest) Error() string {
	return fmt.Sprintf("[PUT /scratch-recipe/{recipeId}/ingredient/{ingredient-id}][%d] changeIngredientForScratchPadRecipeBadRequest  %+v", 400, o.Payload)
}

func (o *ChangeIngredientForScratchPadRecipeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChangeIngredientForScratchPadRecipeNotFound creates a ChangeIngredientForScratchPadRecipeNotFound with default headers values
func NewChangeIngredientForScratchPadRecipeNotFound() *ChangeIngredientForScratchPadRecipeNotFound {
	return &ChangeIngredientForScratchPadRecipeNotFound{}
}

/*ChangeIngredientForScratchPadRecipeNotFound handles this case with default header values.

Malformed JSON (this endpoint requires an array of strings
*/
type ChangeIngredientForScratchPadRecipeNotFound struct {
	Payload *models.HTTPAPIError
}

func (o *ChangeIngredientForScratchPadRecipeNotFound) Error() string {
	return fmt.Sprintf("[PUT /scratch-recipe/{recipeId}/ingredient/{ingredient-id}][%d] changeIngredientForScratchPadRecipeNotFound  %+v", 404, o.Payload)
}

func (o *ChangeIngredientForScratchPadRecipeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
