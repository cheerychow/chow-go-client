// Code generated by go-swagger; DO NOT EDIT.

package rate_recipe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cheerychow/go-client/models"
)

// GetMyRecipeRatingByRecipeIDReader is a Reader for the GetMyRecipeRatingByRecipeID structure.
type GetMyRecipeRatingByRecipeIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMyRecipeRatingByRecipeIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetMyRecipeRatingByRecipeIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetMyRecipeRatingByRecipeIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetMyRecipeRatingByRecipeIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetMyRecipeRatingByRecipeIDOK creates a GetMyRecipeRatingByRecipeIDOK with default headers values
func NewGetMyRecipeRatingByRecipeIDOK() *GetMyRecipeRatingByRecipeIDOK {
	return &GetMyRecipeRatingByRecipeIDOK{}
}

/*GetMyRecipeRatingByRecipeIDOK handles this case with default header values.

Description was not specified
*/
type GetMyRecipeRatingByRecipeIDOK struct {
	Payload *models.RecipeRating
}

func (o *GetMyRecipeRatingByRecipeIDOK) Error() string {
	return fmt.Sprintf("[GET /rate-recipe/my-rating-by-recipe-id/{recipeId}][%d] getMyRecipeRatingByRecipeIdOK  %+v", 200, o.Payload)
}

func (o *GetMyRecipeRatingByRecipeIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RecipeRating)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMyRecipeRatingByRecipeIDBadRequest creates a GetMyRecipeRatingByRecipeIDBadRequest with default headers values
func NewGetMyRecipeRatingByRecipeIDBadRequest() *GetMyRecipeRatingByRecipeIDBadRequest {
	return &GetMyRecipeRatingByRecipeIDBadRequest{}
}

/*GetMyRecipeRatingByRecipeIDBadRequest handles this case with default header values.

Description was not specified
*/
type GetMyRecipeRatingByRecipeIDBadRequest struct {
	Payload *models.HTTPAPIError
}

func (o *GetMyRecipeRatingByRecipeIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /rate-recipe/my-rating-by-recipe-id/{recipeId}][%d] getMyRecipeRatingByRecipeIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetMyRecipeRatingByRecipeIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMyRecipeRatingByRecipeIDNotFound creates a GetMyRecipeRatingByRecipeIDNotFound with default headers values
func NewGetMyRecipeRatingByRecipeIDNotFound() *GetMyRecipeRatingByRecipeIDNotFound {
	return &GetMyRecipeRatingByRecipeIDNotFound{}
}

/*GetMyRecipeRatingByRecipeIDNotFound handles this case with default header values.

Recipe not found
*/
type GetMyRecipeRatingByRecipeIDNotFound struct {
	Payload *models.HTTPAPIError
}

func (o *GetMyRecipeRatingByRecipeIDNotFound) Error() string {
	return fmt.Sprintf("[GET /rate-recipe/my-rating-by-recipe-id/{recipeId}][%d] getMyRecipeRatingByRecipeIdNotFound  %+v", 404, o.Payload)
}

func (o *GetMyRecipeRatingByRecipeIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
