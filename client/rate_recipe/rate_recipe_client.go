// Code generated by go-swagger; DO NOT EDIT.

package rate_recipe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new rate recipe API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for rate recipe API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteARecipeRating deletes a recipe rating
*/
func (a *Client) DeleteARecipeRating(params *DeleteARecipeRatingParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteARecipeRatingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteARecipeRatingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteARecipeRating",
		Method:             "DELETE",
		PathPattern:        "/rate-recipe/{ratingId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteARecipeRatingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteARecipeRatingOK), nil

}

/*
GetMyRecipeRatingByRatingID gets currently logged in users rating for a recipe by it s id
*/
func (a *Client) GetMyRecipeRatingByRatingID(params *GetMyRecipeRatingByRatingIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMyRecipeRatingByRatingIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMyRecipeRatingByRatingIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMyRecipeRatingByRatingID",
		Method:             "GET",
		PathPattern:        "/rate-recipe/my-rating-by-id/{ratingId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMyRecipeRatingByRatingIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMyRecipeRatingByRatingIDOK), nil

}

/*
GetMyRecipeRatingByRecipeID gets currently logged in users rating for a recipe by recipe url
*/
func (a *Client) GetMyRecipeRatingByRecipeID(params *GetMyRecipeRatingByRecipeIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetMyRecipeRatingByRecipeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMyRecipeRatingByRecipeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMyRecipeRatingByRecipeId",
		Method:             "GET",
		PathPattern:        "/rate-recipe/my-rating-by-recipe-id/{recipeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMyRecipeRatingByRecipeIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMyRecipeRatingByRecipeIDOK), nil

}

/*
GetMyRecipeRatingByURL gets currently logged in users rating for a recipe by recipe url
*/
func (a *Client) GetMyRecipeRatingByURL(params *GetMyRecipeRatingByURLParams, authInfo runtime.ClientAuthInfoWriter) (*GetMyRecipeRatingByURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMyRecipeRatingByURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMyRecipeRatingByUrl",
		Method:             "GET",
		PathPattern:        "/rate-recipe/my-rating-by-url/{url}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMyRecipeRatingByURLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMyRecipeRatingByURLOK), nil

}

/*
GetRecipeRatingByRecipeID gets the rating for a recipe by it s id
*/
func (a *Client) GetRecipeRatingByRecipeID(params *GetRecipeRatingByRecipeIDParams) (*GetRecipeRatingByRecipeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecipeRatingByRecipeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRecipeRatingByRecipeID",
		Method:             "GET",
		PathPattern:        "/rate-recipe/by-id/{recipeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRecipeRatingByRecipeIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRecipeRatingByRecipeIDOK), nil

}

/*
GetRecipeRatingByURL gets the aggregate rating for a recipe by it s url
*/
func (a *Client) GetRecipeRatingByURL(params *GetRecipeRatingByURLParams) (*GetRecipeRatingByURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecipeRatingByURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRecipeRatingByUrl",
		Method:             "GET",
		PathPattern:        "/rate-recipe/by-url/{url}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRecipeRatingByURLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRecipeRatingByURLOK), nil

}

/*
RateARecipe rates a recipe out of 5 the body of this post request requires at least that the rating field be set along with one other rate recipe field to identify the recipe you re rating if the recipe is a recipe already in the database then set the recipe id field if the recipe is an external recipe then you can set the recipe url field
*/
func (a *Client) RateARecipe(params *RateARecipeParams, authInfo runtime.ClientAuthInfoWriter) (*RateARecipeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRateARecipeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RateARecipe",
		Method:             "POST",
		PathPattern:        "/rate-recipe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RateARecipeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RateARecipeCreated), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
