// Code generated by go-swagger; DO NOT EDIT.

package food

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListAbbrevByFoodWithProvidesParams creates a new ListAbbrevByFoodWithProvidesParams object
// with the default values initialized.
func NewListAbbrevByFoodWithProvidesParams() *ListAbbrevByFoodWithProvidesParams {
	var (
		rdacountryDefault = string("uk")
		sortbyDefault     = string("calories")
		sortdirDefault    = string("desc")
	)
	return &ListAbbrevByFoodWithProvidesParams{
		Rdacountry: rdacountryDefault,
		Sortby:     &sortbyDefault,
		Sortdir:    &sortdirDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewListAbbrevByFoodWithProvidesParamsWithTimeout creates a new ListAbbrevByFoodWithProvidesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListAbbrevByFoodWithProvidesParamsWithTimeout(timeout time.Duration) *ListAbbrevByFoodWithProvidesParams {
	var (
		rdacountryDefault = string("uk")
		sortbyDefault     = string("calories")
		sortdirDefault    = string("desc")
	)
	return &ListAbbrevByFoodWithProvidesParams{
		Rdacountry: rdacountryDefault,
		Sortby:     &sortbyDefault,
		Sortdir:    &sortdirDefault,

		timeout: timeout,
	}
}

// NewListAbbrevByFoodWithProvidesParamsWithContext creates a new ListAbbrevByFoodWithProvidesParams object
// with the default values initialized, and the ability to set a context for a request
func NewListAbbrevByFoodWithProvidesParamsWithContext(ctx context.Context) *ListAbbrevByFoodWithProvidesParams {
	var (
		rdacountryDefault = string("uk")
		sortbyDefault     = string("calories")
		sortdirDefault    = string("desc")
	)
	return &ListAbbrevByFoodWithProvidesParams{
		Rdacountry: rdacountryDefault,
		Sortby:     &sortbyDefault,
		Sortdir:    &sortdirDefault,

		Context: ctx,
	}
}

// NewListAbbrevByFoodWithProvidesParamsWithHTTPClient creates a new ListAbbrevByFoodWithProvidesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListAbbrevByFoodWithProvidesParamsWithHTTPClient(client *http.Client) *ListAbbrevByFoodWithProvidesParams {
	var (
		rdacountryDefault = string("uk")
		sortbyDefault     = string("calories")
		sortdirDefault    = string("desc")
	)
	return &ListAbbrevByFoodWithProvidesParams{
		Rdacountry: rdacountryDefault,
		Sortby:     &sortbyDefault,
		Sortdir:    &sortdirDefault,
		HTTPClient: client,
	}
}

/*ListAbbrevByFoodWithProvidesParams contains all the parameters to send to the API endpoint
for the list abbrev by food with provides operation typically these are written to a http.Request
*/
type ListAbbrevByFoodWithProvidesParams struct {

	/*Amount
	  Adjust the nutrition amount to per 'amount' grams. If you want to know the nutritional content in 200g of a particular food, then enter it here as 200.

	*/
	Amount float32
	/*FoodID
	  The id for the food to be fetched

	*/
	FoodID int64
	/*Rdacountry
	  The country RDA to be used when calculating the RDA provided by the food.

	*/
	Rdacountry string
	/*Sortby
	  The nutrition field to sort by.

	*/
	Sortby *string
	/*Sortdir
	  The sort direction for the results.

	*/
	Sortdir *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list abbrev by food with provides params
func (o *ListAbbrevByFoodWithProvidesParams) WithTimeout(timeout time.Duration) *ListAbbrevByFoodWithProvidesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list abbrev by food with provides params
func (o *ListAbbrevByFoodWithProvidesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list abbrev by food with provides params
func (o *ListAbbrevByFoodWithProvidesParams) WithContext(ctx context.Context) *ListAbbrevByFoodWithProvidesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list abbrev by food with provides params
func (o *ListAbbrevByFoodWithProvidesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list abbrev by food with provides params
func (o *ListAbbrevByFoodWithProvidesParams) WithHTTPClient(client *http.Client) *ListAbbrevByFoodWithProvidesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list abbrev by food with provides params
func (o *ListAbbrevByFoodWithProvidesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAmount adds the amount to the list abbrev by food with provides params
func (o *ListAbbrevByFoodWithProvidesParams) WithAmount(amount float32) *ListAbbrevByFoodWithProvidesParams {
	o.SetAmount(amount)
	return o
}

// SetAmount adds the amount to the list abbrev by food with provides params
func (o *ListAbbrevByFoodWithProvidesParams) SetAmount(amount float32) {
	o.Amount = amount
}

// WithFoodID adds the foodID to the list abbrev by food with provides params
func (o *ListAbbrevByFoodWithProvidesParams) WithFoodID(foodID int64) *ListAbbrevByFoodWithProvidesParams {
	o.SetFoodID(foodID)
	return o
}

// SetFoodID adds the foodId to the list abbrev by food with provides params
func (o *ListAbbrevByFoodWithProvidesParams) SetFoodID(foodID int64) {
	o.FoodID = foodID
}

// WithRdacountry adds the rdacountry to the list abbrev by food with provides params
func (o *ListAbbrevByFoodWithProvidesParams) WithRdacountry(rdacountry string) *ListAbbrevByFoodWithProvidesParams {
	o.SetRdacountry(rdacountry)
	return o
}

// SetRdacountry adds the rdacountry to the list abbrev by food with provides params
func (o *ListAbbrevByFoodWithProvidesParams) SetRdacountry(rdacountry string) {
	o.Rdacountry = rdacountry
}

// WithSortby adds the sortby to the list abbrev by food with provides params
func (o *ListAbbrevByFoodWithProvidesParams) WithSortby(sortby *string) *ListAbbrevByFoodWithProvidesParams {
	o.SetSortby(sortby)
	return o
}

// SetSortby adds the sortby to the list abbrev by food with provides params
func (o *ListAbbrevByFoodWithProvidesParams) SetSortby(sortby *string) {
	o.Sortby = sortby
}

// WithSortdir adds the sortdir to the list abbrev by food with provides params
func (o *ListAbbrevByFoodWithProvidesParams) WithSortdir(sortdir *string) *ListAbbrevByFoodWithProvidesParams {
	o.SetSortdir(sortdir)
	return o
}

// SetSortdir adds the sortdir to the list abbrev by food with provides params
func (o *ListAbbrevByFoodWithProvidesParams) SetSortdir(sortdir *string) {
	o.Sortdir = sortdir
}

// WriteToRequest writes these params to a swagger request
func (o *ListAbbrevByFoodWithProvidesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param amount
	if err := r.SetPathParam("amount", swag.FormatFloat32(o.Amount)); err != nil {
		return err
	}

	// path param foodId
	if err := r.SetPathParam("foodId", swag.FormatInt64(o.FoodID)); err != nil {
		return err
	}

	// query param rdacountry
	qrRdacountry := o.Rdacountry
	qRdacountry := qrRdacountry
	if qRdacountry != "" {
		if err := r.SetQueryParam("rdacountry", qRdacountry); err != nil {
			return err
		}
	}

	if o.Sortby != nil {

		// query param sortby
		var qrSortby string
		if o.Sortby != nil {
			qrSortby = *o.Sortby
		}
		qSortby := qrSortby
		if qSortby != "" {
			if err := r.SetQueryParam("sortby", qSortby); err != nil {
				return err
			}
		}

	}

	if o.Sortdir != nil {

		// query param sortdir
		var qrSortdir string
		if o.Sortdir != nil {
			qrSortdir = *o.Sortdir
		}
		qSortdir := qrSortdir
		if qSortdir != "" {
			if err := r.SetQueryParam("sortdir", qSortdir); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
