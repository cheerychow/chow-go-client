// Code generated by go-swagger; DO NOT EDIT.

package food

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewFoodWeightParams creates a new FoodWeightParams object
// with the default values initialized.
func NewFoodWeightParams() *FoodWeightParams {
	var ()
	return &FoodWeightParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewFoodWeightParamsWithTimeout creates a new FoodWeightParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewFoodWeightParamsWithTimeout(timeout time.Duration) *FoodWeightParams {
	var ()
	return &FoodWeightParams{

		timeout: timeout,
	}
}

// NewFoodWeightParamsWithContext creates a new FoodWeightParams object
// with the default values initialized, and the ability to set a context for a request
func NewFoodWeightParamsWithContext(ctx context.Context) *FoodWeightParams {
	var ()
	return &FoodWeightParams{

		Context: ctx,
	}
}

// NewFoodWeightParamsWithHTTPClient creates a new FoodWeightParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewFoodWeightParamsWithHTTPClient(client *http.Client) *FoodWeightParams {
	var ()
	return &FoodWeightParams{
		HTTPClient: client,
	}
}

/*FoodWeightParams contains all the parameters to send to the API endpoint
for the food weight operation typically these are written to a http.Request
*/
type FoodWeightParams struct {

	/*FoodID
	  Food id which you want a list of known foods weights for

	*/
	FoodID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the food weight params
func (o *FoodWeightParams) WithTimeout(timeout time.Duration) *FoodWeightParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the food weight params
func (o *FoodWeightParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the food weight params
func (o *FoodWeightParams) WithContext(ctx context.Context) *FoodWeightParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the food weight params
func (o *FoodWeightParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the food weight params
func (o *FoodWeightParams) WithHTTPClient(client *http.Client) *FoodWeightParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the food weight params
func (o *FoodWeightParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFoodID adds the foodID to the food weight params
func (o *FoodWeightParams) WithFoodID(foodID int32) *FoodWeightParams {
	o.SetFoodID(foodID)
	return o
}

// SetFoodID adds the foodId to the food weight params
func (o *FoodWeightParams) SetFoodID(foodID int32) {
	o.FoodID = foodID
}

// WriteToRequest writes these params to a swagger request
func (o *FoodWeightParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param foodId
	if err := r.SetPathParam("foodId", swag.FormatInt32(o.FoodID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
