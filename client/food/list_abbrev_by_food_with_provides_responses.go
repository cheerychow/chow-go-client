// Code generated by go-swagger; DO NOT EDIT.

package food

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cheerychow/go-client/models"
)

// ListAbbrevByFoodWithProvidesReader is a Reader for the ListAbbrevByFoodWithProvides structure.
type ListAbbrevByFoodWithProvidesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListAbbrevByFoodWithProvidesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListAbbrevByFoodWithProvidesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewListAbbrevByFoodWithProvidesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListAbbrevByFoodWithProvidesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewListAbbrevByFoodWithProvidesOK creates a ListAbbrevByFoodWithProvidesOK with default headers values
func NewListAbbrevByFoodWithProvidesOK() *ListAbbrevByFoodWithProvidesOK {
	return &ListAbbrevByFoodWithProvidesOK{}
}

/*ListAbbrevByFoodWithProvidesOK handles this case with default header values.

Description was not specified
*/
type ListAbbrevByFoodWithProvidesOK struct {
	Payload *models.AbbrevWithProvides
}

func (o *ListAbbrevByFoodWithProvidesOK) Error() string {
	return fmt.Sprintf("[GET /food-nutrition/by-food/{foodId}/{amount}][%d] listAbbrevByFoodWithProvidesOK  %+v", 200, o.Payload)
}

func (o *ListAbbrevByFoodWithProvidesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.AbbrevWithProvides)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAbbrevByFoodWithProvidesBadRequest creates a ListAbbrevByFoodWithProvidesBadRequest with default headers values
func NewListAbbrevByFoodWithProvidesBadRequest() *ListAbbrevByFoodWithProvidesBadRequest {
	return &ListAbbrevByFoodWithProvidesBadRequest{}
}

/*ListAbbrevByFoodWithProvidesBadRequest handles this case with default header values.

Description was not specified
*/
type ListAbbrevByFoodWithProvidesBadRequest struct {
	Payload *models.HTTPAPIError
}

func (o *ListAbbrevByFoodWithProvidesBadRequest) Error() string {
	return fmt.Sprintf("[GET /food-nutrition/by-food/{foodId}/{amount}][%d] listAbbrevByFoodWithProvidesBadRequest  %+v", 400, o.Payload)
}

func (o *ListAbbrevByFoodWithProvidesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAbbrevByFoodWithProvidesNotFound creates a ListAbbrevByFoodWithProvidesNotFound with default headers values
func NewListAbbrevByFoodWithProvidesNotFound() *ListAbbrevByFoodWithProvidesNotFound {
	return &ListAbbrevByFoodWithProvidesNotFound{}
}

/*ListAbbrevByFoodWithProvidesNotFound handles this case with default header values.

Food doesn't exist.
*/
type ListAbbrevByFoodWithProvidesNotFound struct {
	Payload *models.HTTPAPIError
}

func (o *ListAbbrevByFoodWithProvidesNotFound) Error() string {
	return fmt.Sprintf("[GET /food-nutrition/by-food/{foodId}/{amount}][%d] listAbbrevByFoodWithProvidesNotFound  %+v", 404, o.Payload)
}

func (o *ListAbbrevByFoodWithProvidesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
