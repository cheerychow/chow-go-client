// Code generated by go-swagger; DO NOT EDIT.

package food

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new food API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for food API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
FoodWeight returns the measured food proportions for a particular food
*/
func (a *Client) FoodWeight(params *FoodWeightParams) (*FoodWeightOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFoodWeightParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FoodWeight",
		Method:             "GET",
		PathPattern:        "/food/{foodId}/weights",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FoodWeightReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FoodWeightOK), nil

}

/*
FoodWeightNames weights of typical measurements
*/
func (a *Client) FoodWeightNames(params *FoodWeightNamesParams) (*FoodWeightNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFoodWeightNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FoodWeightNames",
		Method:             "GET",
		PathPattern:        "/food/{foodId}/weightnames",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FoodWeightNamesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FoodWeightNamesOK), nil

}

/*
GetFoods lists similar foods
*/
func (a *Client) GetFoods(params *GetFoodsParams) (*GetFoodsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFoodsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetFoods",
		Method:             "GET",
		PathPattern:        "/food/{foodId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFoodsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFoodsOK), nil

}

/*
ListAbbrevByFoodWithProvides retrieves the nutrition for a particular food
*/
func (a *Client) ListAbbrevByFoodWithProvides(params *ListAbbrevByFoodWithProvidesParams) (*ListAbbrevByFoodWithProvidesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAbbrevByFoodWithProvidesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListAbbrevByFoodWithProvides",
		Method:             "GET",
		PathPattern:        "/food-nutrition/by-food/{foodId}/{amount}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAbbrevByFoodWithProvidesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAbbrevByFoodWithProvidesOK), nil

}

/*
ListFoodGroups as list of the food groups
*/
func (a *Client) ListFoodGroups(params *ListFoodGroupsParams) (*ListFoodGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListFoodGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListFoodGroups",
		Method:             "GET",
		PathPattern:        "/food/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListFoodGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListFoodGroupsOK), nil

}

/*
PopularFoods returns a list of the most popular ingredients as food objects
*/
func (a *Client) PopularFoods(params *PopularFoodsParams) (*PopularFoodsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPopularFoodsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PopularFoods",
		Method:             "GET",
		PathPattern:        "/food/popular",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PopularFoodsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PopularFoodsOK), nil

}

/*
SearchAvailableIngredient searches through the known ingredients in the database
*/
func (a *Client) SearchAvailableIngredient(params *SearchAvailableIngredientParams) (*SearchAvailableIngredientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchAvailableIngredientParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SearchAvailableIngredient",
		Method:             "GET",
		PathPattern:        "/food/ingredients",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchAvailableIngredientReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchAvailableIngredientOK), nil

}

/*
SearchCommonFoods searches the available foods by text string
*/
func (a *Client) SearchCommonFoods(params *SearchCommonFoodsParams) (*SearchCommonFoodsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchCommonFoodsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SearchCommonFoods",
		Method:             "GET",
		PathPattern:        "/search-common-foods/{search}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchCommonFoodsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchCommonFoodsOK), nil

}

/*
SearchFoods plains english search for foods
*/
func (a *Client) SearchFoods(params *SearchFoodsParams) (*SearchFoodsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchFoodsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SearchFoods",
		Method:             "GET",
		PathPattern:        "/food/search/{searchTerm}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchFoodsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchFoodsOK), nil

}

/*
SearchIngredients searches common foods and parse the search term as an ingredient this is a convenience end point for auto xcomplete boxes where a user typing in a text can either pick a food item or the ingredient s parsed value from a drop down
*/
func (a *Client) SearchIngredients(params *SearchIngredientsParams) (*SearchIngredientsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchIngredientsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SearchIngredients",
		Method:             "GET",
		PathPattern:        "/search-ingredients/{search}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchIngredientsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchIngredientsOK), nil

}

/*
ShowFoodsContaining simples wildcard food search
*/
func (a *Client) ShowFoodsContaining(params *ShowFoodsContainingParams) (*ShowFoodsContainingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowFoodsContainingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ShowFoodsContaining",
		Method:             "GET",
		PathPattern:        "/autocomplete-foods/{search}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShowFoodsContainingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ShowFoodsContainingOK), nil

}

/*
ShowSearchRecipeCategories provides a list of valid search parameters available when searching for recipes examples include pescatarian or vegan friendly which can be passed to recipe searches as pescatarion 1 to filter only pescatarian recipes in the search results
*/
func (a *Client) ShowSearchRecipeCategories(params *ShowSearchRecipeCategoriesParams) (*ShowSearchRecipeCategoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewShowSearchRecipeCategoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ShowSearchRecipeCategories",
		Method:             "GET",
		PathPattern:        "/search/recipe-category-names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ShowSearchRecipeCategoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ShowSearchRecipeCategoriesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
