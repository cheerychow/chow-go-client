// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new user API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetMyUserMetaInfo fetches all of the logged in user s meta info
*/
func (a *Client) GetMyUserMetaInfo(params *GetMyUserMetaInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetMyUserMetaInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMyUserMetaInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMyUserMetaInfo",
		Method:             "GET",
		PathPattern:        "/user-meta",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMyUserMetaInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMyUserMetaInfoOK), nil

}

/*
GetPublicAccountInfo fetches the public account info for a user the account is an alias to a user with the exception that only publicly available information is passed over this endpoint
*/
func (a *Client) GetPublicAccountInfo(params *GetPublicAccountInfoParams) (*GetPublicAccountInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicAccountInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicAccountInfo",
		Method:             "GET",
		PathPattern:        "/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPublicAccountInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicAccountInfoOK), nil

}

/*
GetSpecificUserMetaInfo fetches a user s meta fields
*/
func (a *Client) GetSpecificUserMetaInfo(params *GetSpecificUserMetaInfoParams, authInfo runtime.ClientAuthInfoWriter) (*GetSpecificUserMetaInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSpecificUserMetaInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSpecificUserMetaInfo",
		Method:             "GET",
		PathPattern:        "/user-meta-fields/{fields}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSpecificUserMetaInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSpecificUserMetaInfoOK), nil

}

/*
GetUserPublicStats fetches a user s public stats info
*/
func (a *Client) GetUserPublicStats(params *GetUserPublicStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserPublicStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserPublicStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetUserPublicStats",
		Method:             "GET",
		PathPattern:        "/user-public-stats/{handle}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserPublicStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserPublicStatsOK), nil

}

/*
SaveUserInfo saves changes to the user object
*/
func (a *Client) SaveUserInfo(params *SaveUserInfoParams, authInfo runtime.ClientAuthInfoWriter) (*SaveUserInfoOK, *SaveUserInfoCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveUserInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SaveUserInfo",
		Method:             "PUT",
		PathPattern:        "/user/{userId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SaveUserInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SaveUserInfoOK:
		return value, nil, nil
	case *SaveUserInfoCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
SaveUserMetaInfo saves changes to the user object
*/
func (a *Client) SaveUserMetaInfo(params *SaveUserMetaInfoParams, authInfo runtime.ClientAuthInfoWriter) (*SaveUserMetaInfoOK, *SaveUserMetaInfoCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveUserMetaInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SaveUserMetaInfo",
		Method:             "PUT",
		PathPattern:        "/user-meta",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SaveUserMetaInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SaveUserMetaInfoOK:
		return value, nil, nil
	case *SaveUserMetaInfoCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
