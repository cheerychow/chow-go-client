// Code generated by go-swagger; DO NOT EDIT.

package fav_recipe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUnfavoriteRecipeByURLParams creates a new UnfavoriteRecipeByURLParams object
// with the default values initialized.
func NewUnfavoriteRecipeByURLParams() *UnfavoriteRecipeByURLParams {
	var ()
	return &UnfavoriteRecipeByURLParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUnfavoriteRecipeByURLParamsWithTimeout creates a new UnfavoriteRecipeByURLParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUnfavoriteRecipeByURLParamsWithTimeout(timeout time.Duration) *UnfavoriteRecipeByURLParams {
	var ()
	return &UnfavoriteRecipeByURLParams{

		timeout: timeout,
	}
}

// NewUnfavoriteRecipeByURLParamsWithContext creates a new UnfavoriteRecipeByURLParams object
// with the default values initialized, and the ability to set a context for a request
func NewUnfavoriteRecipeByURLParamsWithContext(ctx context.Context) *UnfavoriteRecipeByURLParams {
	var ()
	return &UnfavoriteRecipeByURLParams{

		Context: ctx,
	}
}

// NewUnfavoriteRecipeByURLParamsWithHTTPClient creates a new UnfavoriteRecipeByURLParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUnfavoriteRecipeByURLParamsWithHTTPClient(client *http.Client) *UnfavoriteRecipeByURLParams {
	var ()
	return &UnfavoriteRecipeByURLParams{
		HTTPClient: client,
	}
}

/*UnfavoriteRecipeByURLParams contains all the parameters to send to the API endpoint
for the unfavorite recipe by Url operation typically these are written to a http.Request
*/
type UnfavoriteRecipeByURLParams struct {

	/*RecipeURL
	  The recipe url you want to unfavourite.

	*/
	RecipeURL string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the unfavorite recipe by Url params
func (o *UnfavoriteRecipeByURLParams) WithTimeout(timeout time.Duration) *UnfavoriteRecipeByURLParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the unfavorite recipe by Url params
func (o *UnfavoriteRecipeByURLParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the unfavorite recipe by Url params
func (o *UnfavoriteRecipeByURLParams) WithContext(ctx context.Context) *UnfavoriteRecipeByURLParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the unfavorite recipe by Url params
func (o *UnfavoriteRecipeByURLParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the unfavorite recipe by Url params
func (o *UnfavoriteRecipeByURLParams) WithHTTPClient(client *http.Client) *UnfavoriteRecipeByURLParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the unfavorite recipe by Url params
func (o *UnfavoriteRecipeByURLParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRecipeURL adds the recipeURL to the unfavorite recipe by Url params
func (o *UnfavoriteRecipeByURLParams) WithRecipeURL(recipeURL string) *UnfavoriteRecipeByURLParams {
	o.SetRecipeURL(recipeURL)
	return o
}

// SetRecipeURL adds the recipeUrl to the unfavorite recipe by Url params
func (o *UnfavoriteRecipeByURLParams) SetRecipeURL(recipeURL string) {
	o.RecipeURL = recipeURL
}

// WriteToRequest writes these params to a swagger request
func (o *UnfavoriteRecipeByURLParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param recipe-url
	if err := r.SetPathParam("recipe-url", o.RecipeURL); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
