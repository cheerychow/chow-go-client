// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cheerychow/chow-go-client/models"
)

// NewAddPushNoteToAccountParams creates a new AddPushNoteToAccountParams object
// with the default values initialized.
func NewAddPushNoteToAccountParams() *AddPushNoteToAccountParams {
	var ()
	return &AddPushNoteToAccountParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddPushNoteToAccountParamsWithTimeout creates a new AddPushNoteToAccountParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddPushNoteToAccountParamsWithTimeout(timeout time.Duration) *AddPushNoteToAccountParams {
	var ()
	return &AddPushNoteToAccountParams{

		timeout: timeout,
	}
}

// NewAddPushNoteToAccountParamsWithContext creates a new AddPushNoteToAccountParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddPushNoteToAccountParamsWithContext(ctx context.Context) *AddPushNoteToAccountParams {
	var ()
	return &AddPushNoteToAccountParams{

		Context: ctx,
	}
}

// NewAddPushNoteToAccountParamsWithHTTPClient creates a new AddPushNoteToAccountParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddPushNoteToAccountParamsWithHTTPClient(client *http.Client) *AddPushNoteToAccountParams {
	var ()
	return &AddPushNoteToAccountParams{
		HTTPClient: client,
	}
}

/*AddPushNoteToAccountParams contains all the parameters to send to the API endpoint
for the add push note to account operation typically these are written to a http.Request
*/
type AddPushNoteToAccountParams struct {

	/*JSONBody
	  A valid push note token along with the platform the push token is for (ios/android/chrome/safari).

	*/
	JSONBody *models.PushDevice

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add push note to account params
func (o *AddPushNoteToAccountParams) WithTimeout(timeout time.Duration) *AddPushNoteToAccountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add push note to account params
func (o *AddPushNoteToAccountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add push note to account params
func (o *AddPushNoteToAccountParams) WithContext(ctx context.Context) *AddPushNoteToAccountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add push note to account params
func (o *AddPushNoteToAccountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add push note to account params
func (o *AddPushNoteToAccountParams) WithHTTPClient(client *http.Client) *AddPushNoteToAccountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add push note to account params
func (o *AddPushNoteToAccountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithJSONBody adds the jSONBody to the add push note to account params
func (o *AddPushNoteToAccountParams) WithJSONBody(jSONBody *models.PushDevice) *AddPushNoteToAccountParams {
	o.SetJSONBody(jSONBody)
	return o
}

// SetJSONBody adds the jsonBody to the add push note to account params
func (o *AddPushNoteToAccountParams) SetJSONBody(jSONBody *models.PushDevice) {
	o.JSONBody = jSONBody
}

// WriteToRequest writes these params to a swagger request
func (o *AddPushNoteToAccountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.JSONBody != nil {
		if err := r.SetBodyParam(o.JSONBody); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
