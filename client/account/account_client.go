// Code generated by go-swagger; DO NOT EDIT.

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new account API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for account API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AccountInfo thes currently signed in user account info
*/
func (a *Client) AccountInfo(params *AccountInfoParams, authInfo runtime.ClientAuthInfoWriter) (*AccountInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AccountInfo",
		Method:             "GET",
		PathPattern:        "/me",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountInfoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AccountInfoOK), nil

}

/*
AccountSignUp signs a user up to your app
*/
func (a *Client) AccountSignUp(params *AccountSignUpParams) (*AccountSignUpCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountSignUpParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AccountSignUp",
		Method:             "POST",
		PathPattern:        "/signup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountSignUpReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AccountSignUpCreated), nil

}

/*
AccountSignin signs a user in to your app
*/
func (a *Client) AccountSignin(params *AccountSigninParams) (*AccountSigninOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccountSigninParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AccountSignin",
		Method:             "POST",
		PathPattern:        "/signin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AccountSigninReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AccountSigninOK), nil

}

/*
AddPushNoteToAccount signs a user up to your app
*/
func (a *Client) AddPushNoteToAccount(params *AddPushNoteToAccountParams, authInfo runtime.ClientAuthInfoWriter) (*AddPushNoteToAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddPushNoteToAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AddPushNoteToAccount",
		Method:             "POST",
		PathPattern:        "/updatenote",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddPushNoteToAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddPushNoteToAccountOK), nil

}

/*
FacebookSignupSignin usings a valid facebook access token sign the user up or in if the user is already signed up
*/
func (a *Client) FacebookSignupSignin(params *FacebookSignupSigninParams) (*FacebookSignupSigninCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFacebookSignupSigninParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "FacebookSignupSignin",
		Method:             "POST",
		PathPattern:        "/fb_signin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &FacebookSignupSigninReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*FacebookSignupSigninCreated), nil

}

/*
RequestAPIKey gets an API key for the currently logged in user
*/
func (a *Client) RequestAPIKey(params *RequestAPIKeyParams, authInfo runtime.ClientAuthInfoWriter) (*RequestAPIKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestAPIKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RequestApiKey",
		Method:             "GET",
		PathPattern:        "/request-apikey",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RequestAPIKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RequestAPIKeyOK), nil

}

/*
SaveUser usings a valid facebook access token sign the user up or in if the user is already signed up
*/
func (a *Client) SaveUser(params *SaveUserParams) (*SaveUserOK, *SaveUserCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SaveUser",
		Method:             "POST",
		PathPattern:        "/fb_signup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SaveUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SaveUserOK:
		return value, nil, nil
	case *SaveUserCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
SuggestAGuestIDForNewClient requests a user id for a client
*/
func (a *Client) SuggestAGuestIDForNewClient(params *SuggestAGuestIDForNewClientParams, authInfo runtime.ClientAuthInfoWriter) (*SuggestAGuestIDForNewClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSuggestAGuestIDForNewClientParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SuggestAGuestIDForNewClient",
		Method:             "POST",
		PathPattern:        "/request-guestid",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SuggestAGuestIDForNewClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SuggestAGuestIDForNewClientOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
