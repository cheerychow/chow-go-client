// Code generated by go-swagger; DO NOT EDIT.

package recipe_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cheerychow/chow-go-client/models"
)

// NewPutRecipeGroupParams creates a new PutRecipeGroupParams object
// with the default values initialized.
func NewPutRecipeGroupParams() *PutRecipeGroupParams {
	var ()
	return &PutRecipeGroupParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutRecipeGroupParamsWithTimeout creates a new PutRecipeGroupParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutRecipeGroupParamsWithTimeout(timeout time.Duration) *PutRecipeGroupParams {
	var ()
	return &PutRecipeGroupParams{

		timeout: timeout,
	}
}

// NewPutRecipeGroupParamsWithContext creates a new PutRecipeGroupParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutRecipeGroupParamsWithContext(ctx context.Context) *PutRecipeGroupParams {
	var ()
	return &PutRecipeGroupParams{

		Context: ctx,
	}
}

// NewPutRecipeGroupParamsWithHTTPClient creates a new PutRecipeGroupParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutRecipeGroupParamsWithHTTPClient(client *http.Client) *PutRecipeGroupParams {
	var ()
	return &PutRecipeGroupParams{
		HTTPClient: client,
	}
}

/*PutRecipeGroupParams contains all the parameters to send to the API endpoint
for the put recipe group operation typically these are written to a http.Request
*/
type PutRecipeGroupParams struct {

	/*JSONBody
	  The recipe group object.

	*/
	JSONBody *models.RecipeGroup
	/*RecipeGroupID
	  The group ID required

	*/
	RecipeGroupID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put recipe group params
func (o *PutRecipeGroupParams) WithTimeout(timeout time.Duration) *PutRecipeGroupParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put recipe group params
func (o *PutRecipeGroupParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put recipe group params
func (o *PutRecipeGroupParams) WithContext(ctx context.Context) *PutRecipeGroupParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put recipe group params
func (o *PutRecipeGroupParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put recipe group params
func (o *PutRecipeGroupParams) WithHTTPClient(client *http.Client) *PutRecipeGroupParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put recipe group params
func (o *PutRecipeGroupParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithJSONBody adds the jSONBody to the put recipe group params
func (o *PutRecipeGroupParams) WithJSONBody(jSONBody *models.RecipeGroup) *PutRecipeGroupParams {
	o.SetJSONBody(jSONBody)
	return o
}

// SetJSONBody adds the jsonBody to the put recipe group params
func (o *PutRecipeGroupParams) SetJSONBody(jSONBody *models.RecipeGroup) {
	o.JSONBody = jSONBody
}

// WithRecipeGroupID adds the recipeGroupID to the put recipe group params
func (o *PutRecipeGroupParams) WithRecipeGroupID(recipeGroupID int64) *PutRecipeGroupParams {
	o.SetRecipeGroupID(recipeGroupID)
	return o
}

// SetRecipeGroupID adds the recipeGroupId to the put recipe group params
func (o *PutRecipeGroupParams) SetRecipeGroupID(recipeGroupID int64) {
	o.RecipeGroupID = recipeGroupID
}

// WriteToRequest writes these params to a swagger request
func (o *PutRecipeGroupParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.JSONBody != nil {
		if err := r.SetBodyParam(o.JSONBody); err != nil {
			return err
		}
	}

	// path param recipeGroupId
	if err := r.SetPathParam("recipeGroupId", swag.FormatInt64(o.RecipeGroupID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
