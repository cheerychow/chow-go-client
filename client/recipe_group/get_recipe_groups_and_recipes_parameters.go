// Code generated by go-swagger; DO NOT EDIT.

package recipe_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetRecipeGroupsAndRecipesParams creates a new GetRecipeGroupsAndRecipesParams object
// with the default values initialized.
func NewGetRecipeGroupsAndRecipesParams() *GetRecipeGroupsAndRecipesParams {
	var (
		includeMenuItemsDefault = bool(false)
		includeRecipeDefault    = bool(false)
	)
	return &GetRecipeGroupsAndRecipesParams{
		IncludeMenuItems: &includeMenuItemsDefault,
		IncludeRecipe:    &includeRecipeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetRecipeGroupsAndRecipesParamsWithTimeout creates a new GetRecipeGroupsAndRecipesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetRecipeGroupsAndRecipesParamsWithTimeout(timeout time.Duration) *GetRecipeGroupsAndRecipesParams {
	var (
		includeMenuItemsDefault = bool(false)
		includeRecipeDefault    = bool(false)
	)
	return &GetRecipeGroupsAndRecipesParams{
		IncludeMenuItems: &includeMenuItemsDefault,
		IncludeRecipe:    &includeRecipeDefault,

		timeout: timeout,
	}
}

// NewGetRecipeGroupsAndRecipesParamsWithContext creates a new GetRecipeGroupsAndRecipesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetRecipeGroupsAndRecipesParamsWithContext(ctx context.Context) *GetRecipeGroupsAndRecipesParams {
	var (
		includeMenuItemsDefault = bool(false)
		includeRecipeDefault    = bool(false)
	)
	return &GetRecipeGroupsAndRecipesParams{
		IncludeMenuItems: &includeMenuItemsDefault,
		IncludeRecipe:    &includeRecipeDefault,

		Context: ctx,
	}
}

// NewGetRecipeGroupsAndRecipesParamsWithHTTPClient creates a new GetRecipeGroupsAndRecipesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetRecipeGroupsAndRecipesParamsWithHTTPClient(client *http.Client) *GetRecipeGroupsAndRecipesParams {
	var (
		includeMenuItemsDefault = bool(false)
		includeRecipeDefault    = bool(false)
	)
	return &GetRecipeGroupsAndRecipesParams{
		IncludeMenuItems: &includeMenuItemsDefault,
		IncludeRecipe:    &includeRecipeDefault,
		HTTPClient:       client,
	}
}

/*GetRecipeGroupsAndRecipesParams contains all the parameters to send to the API endpoint
for the get recipe groups and recipes operation typically these are written to a http.Request
*/
type GetRecipeGroupsAndRecipesParams struct {

	/*Category
	  Find recipe groups by category.

	*/
	Category *string
	/*IncludeMenuItems
	  Should the recipe-group's menu items (1-to-many relationship) be included in the recipe-group object?

	*/
	IncludeMenuItems *bool
	/*IncludeRecipe
	  Should the menu-item's recipe object (1-to-1 relationship) be included in the menu-item object?

	*/
	IncludeRecipe *bool
	/*Limit
	  Limit the number of results returned.

	*/
	Limit *int32
	/*Offset
	  The offset into search results.

	*/
	Offset *int64
	/*OwnerID
	  The owner's primary key.

	*/
	OwnerID *int64
	/*Slug
	  The slug to search for. You can include a comma seperated list of slugs to perform on OR search on each one.

	*/
	Slug *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get recipe groups and recipes params
func (o *GetRecipeGroupsAndRecipesParams) WithTimeout(timeout time.Duration) *GetRecipeGroupsAndRecipesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get recipe groups and recipes params
func (o *GetRecipeGroupsAndRecipesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get recipe groups and recipes params
func (o *GetRecipeGroupsAndRecipesParams) WithContext(ctx context.Context) *GetRecipeGroupsAndRecipesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get recipe groups and recipes params
func (o *GetRecipeGroupsAndRecipesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get recipe groups and recipes params
func (o *GetRecipeGroupsAndRecipesParams) WithHTTPClient(client *http.Client) *GetRecipeGroupsAndRecipesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get recipe groups and recipes params
func (o *GetRecipeGroupsAndRecipesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCategory adds the category to the get recipe groups and recipes params
func (o *GetRecipeGroupsAndRecipesParams) WithCategory(category *string) *GetRecipeGroupsAndRecipesParams {
	o.SetCategory(category)
	return o
}

// SetCategory adds the category to the get recipe groups and recipes params
func (o *GetRecipeGroupsAndRecipesParams) SetCategory(category *string) {
	o.Category = category
}

// WithIncludeMenuItems adds the includeMenuItems to the get recipe groups and recipes params
func (o *GetRecipeGroupsAndRecipesParams) WithIncludeMenuItems(includeMenuItems *bool) *GetRecipeGroupsAndRecipesParams {
	o.SetIncludeMenuItems(includeMenuItems)
	return o
}

// SetIncludeMenuItems adds the includeMenuItems to the get recipe groups and recipes params
func (o *GetRecipeGroupsAndRecipesParams) SetIncludeMenuItems(includeMenuItems *bool) {
	o.IncludeMenuItems = includeMenuItems
}

// WithIncludeRecipe adds the includeRecipe to the get recipe groups and recipes params
func (o *GetRecipeGroupsAndRecipesParams) WithIncludeRecipe(includeRecipe *bool) *GetRecipeGroupsAndRecipesParams {
	o.SetIncludeRecipe(includeRecipe)
	return o
}

// SetIncludeRecipe adds the includeRecipe to the get recipe groups and recipes params
func (o *GetRecipeGroupsAndRecipesParams) SetIncludeRecipe(includeRecipe *bool) {
	o.IncludeRecipe = includeRecipe
}

// WithLimit adds the limit to the get recipe groups and recipes params
func (o *GetRecipeGroupsAndRecipesParams) WithLimit(limit *int32) *GetRecipeGroupsAndRecipesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get recipe groups and recipes params
func (o *GetRecipeGroupsAndRecipesParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithOffset adds the offset to the get recipe groups and recipes params
func (o *GetRecipeGroupsAndRecipesParams) WithOffset(offset *int64) *GetRecipeGroupsAndRecipesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get recipe groups and recipes params
func (o *GetRecipeGroupsAndRecipesParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithOwnerID adds the ownerID to the get recipe groups and recipes params
func (o *GetRecipeGroupsAndRecipesParams) WithOwnerID(ownerID *int64) *GetRecipeGroupsAndRecipesParams {
	o.SetOwnerID(ownerID)
	return o
}

// SetOwnerID adds the ownerId to the get recipe groups and recipes params
func (o *GetRecipeGroupsAndRecipesParams) SetOwnerID(ownerID *int64) {
	o.OwnerID = ownerID
}

// WithSlug adds the slug to the get recipe groups and recipes params
func (o *GetRecipeGroupsAndRecipesParams) WithSlug(slug *string) *GetRecipeGroupsAndRecipesParams {
	o.SetSlug(slug)
	return o
}

// SetSlug adds the slug to the get recipe groups and recipes params
func (o *GetRecipeGroupsAndRecipesParams) SetSlug(slug *string) {
	o.Slug = slug
}

// WriteToRequest writes these params to a swagger request
func (o *GetRecipeGroupsAndRecipesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Category != nil {

		// query param category
		var qrCategory string
		if o.Category != nil {
			qrCategory = *o.Category
		}
		qCategory := qrCategory
		if qCategory != "" {
			if err := r.SetQueryParam("category", qCategory); err != nil {
				return err
			}
		}

	}

	if o.IncludeMenuItems != nil {

		// query param include-menu-items
		var qrIncludeMenuItems bool
		if o.IncludeMenuItems != nil {
			qrIncludeMenuItems = *o.IncludeMenuItems
		}
		qIncludeMenuItems := swag.FormatBool(qrIncludeMenuItems)
		if qIncludeMenuItems != "" {
			if err := r.SetQueryParam("include-menu-items", qIncludeMenuItems); err != nil {
				return err
			}
		}

	}

	if o.IncludeRecipe != nil {

		// query param include-recipe
		var qrIncludeRecipe bool
		if o.IncludeRecipe != nil {
			qrIncludeRecipe = *o.IncludeRecipe
		}
		qIncludeRecipe := swag.FormatBool(qrIncludeRecipe)
		if qIncludeRecipe != "" {
			if err := r.SetQueryParam("include-recipe", qIncludeRecipe); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.OwnerID != nil {

		// query param ownerId
		var qrOwnerID int64
		if o.OwnerID != nil {
			qrOwnerID = *o.OwnerID
		}
		qOwnerID := swag.FormatInt64(qrOwnerID)
		if qOwnerID != "" {
			if err := r.SetQueryParam("ownerId", qOwnerID); err != nil {
				return err
			}
		}

	}

	if o.Slug != nil {

		// query param slug
		var qrSlug string
		if o.Slug != nil {
			qrSlug = *o.Slug
		}
		qSlug := qrSlug
		if qSlug != "" {
			if err := r.SetQueryParam("slug", qSlug); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
