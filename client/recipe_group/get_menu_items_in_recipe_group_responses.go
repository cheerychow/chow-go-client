// Code generated by go-swagger; DO NOT EDIT.

package recipe_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cheerychow/chow-go-client/models"
)

// GetMenuItemsInRecipeGroupReader is a Reader for the GetMenuItemsInRecipeGroup structure.
type GetMenuItemsInRecipeGroupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMenuItemsInRecipeGroupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetMenuItemsInRecipeGroupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetMenuItemsInRecipeGroupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetMenuItemsInRecipeGroupNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetMenuItemsInRecipeGroupOK creates a GetMenuItemsInRecipeGroupOK with default headers values
func NewGetMenuItemsInRecipeGroupOK() *GetMenuItemsInRecipeGroupOK {
	return &GetMenuItemsInRecipeGroupOK{}
}

/*GetMenuItemsInRecipeGroupOK handles this case with default header values.

The menu items in the group
*/
type GetMenuItemsInRecipeGroupOK struct {
	Payload []*models.MenuItem
}

func (o *GetMenuItemsInRecipeGroupOK) Error() string {
	return fmt.Sprintf("[GET /recipe-group/{recipeGroupId}/menu-items][%d] getMenuItemsInRecipeGroupOK  %+v", 200, o.Payload)
}

func (o *GetMenuItemsInRecipeGroupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMenuItemsInRecipeGroupBadRequest creates a GetMenuItemsInRecipeGroupBadRequest with default headers values
func NewGetMenuItemsInRecipeGroupBadRequest() *GetMenuItemsInRecipeGroupBadRequest {
	return &GetMenuItemsInRecipeGroupBadRequest{}
}

/*GetMenuItemsInRecipeGroupBadRequest handles this case with default header values.

Description was not specified
*/
type GetMenuItemsInRecipeGroupBadRequest struct {
	Payload *models.HTTPAPIError
}

func (o *GetMenuItemsInRecipeGroupBadRequest) Error() string {
	return fmt.Sprintf("[GET /recipe-group/{recipeGroupId}/menu-items][%d] getMenuItemsInRecipeGroupBadRequest  %+v", 400, o.Payload)
}

func (o *GetMenuItemsInRecipeGroupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMenuItemsInRecipeGroupNotFound creates a GetMenuItemsInRecipeGroupNotFound with default headers values
func NewGetMenuItemsInRecipeGroupNotFound() *GetMenuItemsInRecipeGroupNotFound {
	return &GetMenuItemsInRecipeGroupNotFound{}
}

/*GetMenuItemsInRecipeGroupNotFound handles this case with default header values.

Description was not specified
*/
type GetMenuItemsInRecipeGroupNotFound struct {
	Payload *models.HTTPAPIError
}

func (o *GetMenuItemsInRecipeGroupNotFound) Error() string {
	return fmt.Sprintf("[GET /recipe-group/{recipeGroupId}/menu-items][%d] getMenuItemsInRecipeGroupNotFound  %+v", 404, o.Payload)
}

func (o *GetMenuItemsInRecipeGroupNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
