// Code generated by go-swagger; DO NOT EDIT.

package recipe_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cheerychow/chow-go-client/models"
)

// PutMenuItemReader is a Reader for the PutMenuItem structure.
type PutMenuItemReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutMenuItemReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPutMenuItemOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPutMenuItemBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPutMenuItemUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewPutMenuItemNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPutMenuItemOK creates a PutMenuItemOK with default headers values
func NewPutMenuItemOK() *PutMenuItemOK {
	return &PutMenuItemOK{}
}

/*PutMenuItemOK handles this case with default header values.

Description was not specified
*/
type PutMenuItemOK struct {
	Payload *models.MenuItem
}

func (o *PutMenuItemOK) Error() string {
	return fmt.Sprintf("[PUT /menu-item/{menuItemId}][%d] putMenuItemOK  %+v", 200, o.Payload)
}

func (o *PutMenuItemOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MenuItem)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutMenuItemBadRequest creates a PutMenuItemBadRequest with default headers values
func NewPutMenuItemBadRequest() *PutMenuItemBadRequest {
	return &PutMenuItemBadRequest{}
}

/*PutMenuItemBadRequest handles this case with default header values.

Description was not specified
*/
type PutMenuItemBadRequest struct {
	Payload *models.HTTPAPIError
}

func (o *PutMenuItemBadRequest) Error() string {
	return fmt.Sprintf("[PUT /menu-item/{menuItemId}][%d] putMenuItemBadRequest  %+v", 400, o.Payload)
}

func (o *PutMenuItemBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutMenuItemUnauthorized creates a PutMenuItemUnauthorized with default headers values
func NewPutMenuItemUnauthorized() *PutMenuItemUnauthorized {
	return &PutMenuItemUnauthorized{}
}

/*PutMenuItemUnauthorized handles this case with default header values.

Only a recipe group owner can make changes to a recipe group.
*/
type PutMenuItemUnauthorized struct {
	Payload *models.HTTPAPIError
}

func (o *PutMenuItemUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /menu-item/{menuItemId}][%d] putMenuItemUnauthorized  %+v", 401, o.Payload)
}

func (o *PutMenuItemUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutMenuItemNotFound creates a PutMenuItemNotFound with default headers values
func NewPutMenuItemNotFound() *PutMenuItemNotFound {
	return &PutMenuItemNotFound{}
}

/*PutMenuItemNotFound handles this case with default header values.

Group ID not found
*/
type PutMenuItemNotFound struct {
	Payload *models.HTTPAPIError
}

func (o *PutMenuItemNotFound) Error() string {
	return fmt.Sprintf("[PUT /menu-item/{menuItemId}][%d] putMenuItemNotFound  %+v", 404, o.Payload)
}

func (o *PutMenuItemNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
