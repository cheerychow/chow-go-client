// Code generated by go-swagger; DO NOT EDIT.

package recipe_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new recipe group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for recipe group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ChangeAMenuItemsRecipeID changes a menu item s recipe id
*/
func (a *Client) ChangeAMenuItemsRecipeID(params *ChangeAMenuItemsRecipeIDParams) (*ChangeAMenuItemsRecipeIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeAMenuItemsRecipeIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ChangeAMenuItemsRecipeId",
		Method:             "PUT",
		PathPattern:        "/menu-item/{menuItemId}/add-recipe-id/{recipeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangeAMenuItemsRecipeIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChangeAMenuItemsRecipeIDOK), nil

}

/*
DeleteMenuItem deletes a menu item
*/
func (a *Client) DeleteMenuItem(params *DeleteMenuItemParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMenuItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMenuItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteMenuItem",
		Method:             "DELETE",
		PathPattern:        "/menu-item/{menuItemId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMenuItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMenuItemOK), nil

}

/*
DeleteRecipeGroup deletes a recipe group w a r n i n g deleting a group results in all of the recipe group s child menu item s being deleted too
*/
func (a *Client) DeleteRecipeGroup(params *DeleteRecipeGroupParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRecipeGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRecipeGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteRecipeGroup",
		Method:             "DELETE",
		PathPattern:        "/recipe-group/{recipeGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRecipeGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRecipeGroupOK), nil

}

/*
GetMenuItemsInRecipeGroup gets the menu items in the recipe group
*/
func (a *Client) GetMenuItemsInRecipeGroup(params *GetMenuItemsInRecipeGroupParams) (*GetMenuItemsInRecipeGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMenuItemsInRecipeGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMenuItemsInRecipeGroup",
		Method:             "GET",
		PathPattern:        "/recipe-group/{recipeGroupId}/menu-items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMenuItemsInRecipeGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMenuItemsInRecipeGroupOK), nil

}

/*
GetRecipeGroups searches for recipe groups
*/
func (a *Client) GetRecipeGroups(params *GetRecipeGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*GetRecipeGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecipeGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRecipeGroups",
		Method:             "GET",
		PathPattern:        "/recipe-group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRecipeGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRecipeGroupsOK), nil

}

/*
GetRecipeGroupsAndRecipes searches recipe groups
*/
func (a *Client) GetRecipeGroupsAndRecipes(params *GetRecipeGroupsAndRecipesParams, authInfo runtime.ClientAuthInfoWriter) (*GetRecipeGroupsAndRecipesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecipeGroupsAndRecipesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRecipeGroupsAndRecipes",
		Method:             "GET",
		PathPattern:        "/recipe-group-and-menu-items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRecipeGroupsAndRecipesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRecipeGroupsAndRecipesOK), nil

}

/*
GetSingleMenuItem gets a single menu item by its primary key
*/
func (a *Client) GetSingleMenuItem(params *GetSingleMenuItemParams) (*GetSingleMenuItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSingleMenuItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSingleMenuItem",
		Method:             "GET",
		PathPattern:        "/menu-item/{menuItemId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSingleMenuItemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSingleMenuItemOK), nil

}

/*
GetSingleRecipeGroup gets a recipe group by its ID
*/
func (a *Client) GetSingleRecipeGroup(params *GetSingleRecipeGroupParams) (*GetSingleRecipeGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSingleRecipeGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSingleRecipeGroup",
		Method:             "GET",
		PathPattern:        "/recipe-group/{recipeGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSingleRecipeGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSingleRecipeGroupOK), nil

}

/*
PostMenuItem adds a menu item to a recipe group
*/
func (a *Client) PostMenuItem(params *PostMenuItemParams, authInfo runtime.ClientAuthInfoWriter) (*PostMenuItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostMenuItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostMenuItem",
		Method:             "POST",
		PathPattern:        "/recipe-group/{recipeGroupId}/menu-items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostMenuItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostMenuItemOK), nil

}

/*
PostRecipeGroup creates a new recipe group
*/
func (a *Client) PostRecipeGroup(params *PostRecipeGroupParams, authInfo runtime.ClientAuthInfoWriter) (*PostRecipeGroupOK, *PostRecipeGroupCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRecipeGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRecipeGroup",
		Method:             "POST",
		PathPattern:        "/recipe-group",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRecipeGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostRecipeGroupOK:
		return value, nil, nil
	case *PostRecipeGroupCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PostRecipeGroupAndMenuItem adds a menu item or a recipe to a new recipe group

Add a menu item (or a recipe) to a newrecipe group. If the recipe group does not exist, it is created, detemrind by the recipe group's slug parameter.
*/
func (a *Client) PostRecipeGroupAndMenuItem(params *PostRecipeGroupAndMenuItemParams, authInfo runtime.ClientAuthInfoWriter) (*PostRecipeGroupAndMenuItemOK, *PostRecipeGroupAndMenuItemCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRecipeGroupAndMenuItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostRecipeGroupAndMenuItem",
		Method:             "POST",
		PathPattern:        "/recipe-group-and-menu-item",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostRecipeGroupAndMenuItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PostRecipeGroupAndMenuItemOK:
		return value, nil, nil
	case *PostRecipeGroupAndMenuItemCreated:
		return nil, value, nil
	}
	return nil, nil, nil

}

/*
PutMenuItem makes changes to a menu item already in the database
*/
func (a *Client) PutMenuItem(params *PutMenuItemParams, authInfo runtime.ClientAuthInfoWriter) (*PutMenuItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutMenuItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutMenuItem",
		Method:             "PUT",
		PathPattern:        "/menu-item/{menuItemId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutMenuItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutMenuItemOK), nil

}

/*
PutRecipeGroup saves changes to a recipe group
*/
func (a *Client) PutRecipeGroup(params *PutRecipeGroupParams, authInfo runtime.ClientAuthInfoWriter) (*PutRecipeGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutRecipeGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutRecipeGroup",
		Method:             "PUT",
		PathPattern:        "/recipe-group/{recipeGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutRecipeGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutRecipeGroupOK), nil

}

/*
SearchMyRecipeGroupForRecipe searches the logged in user s recipe groups for a particular recipe
*/
func (a *Client) SearchMyRecipeGroupForRecipe(params *SearchMyRecipeGroupForRecipeParams, authInfo runtime.ClientAuthInfoWriter) (*SearchMyRecipeGroupForRecipeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchMyRecipeGroupForRecipeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SearchMyRecipeGroupForRecipe",
		Method:             "GET",
		PathPattern:        "/recipe-group/my-recipes/{recipeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchMyRecipeGroupForRecipeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SearchMyRecipeGroupForRecipeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
