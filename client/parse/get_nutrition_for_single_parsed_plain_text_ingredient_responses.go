// Code generated by go-swagger; DO NOT EDIT.

package parse

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cheerychow/go-client/models"
)

// GetNutritionForSingleParsedPlainTextIngredientReader is a Reader for the GetNutritionForSingleParsedPlainTextIngredient structure.
type GetNutritionForSingleParsedPlainTextIngredientReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNutritionForSingleParsedPlainTextIngredientReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetNutritionForSingleParsedPlainTextIngredientOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetNutritionForSingleParsedPlainTextIngredientBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetNutritionForSingleParsedPlainTextIngredientOK creates a GetNutritionForSingleParsedPlainTextIngredientOK with default headers values
func NewGetNutritionForSingleParsedPlainTextIngredientOK() *GetNutritionForSingleParsedPlainTextIngredientOK {
	return &GetNutritionForSingleParsedPlainTextIngredientOK{}
}

/*GetNutritionForSingleParsedPlainTextIngredientOK handles this case with default header values.

Send a single (or comma seperated many) ingredient line to be parsed, and the ingredient along with the calculated nutrition information for the amount of food identified.
*/
type GetNutritionForSingleParsedPlainTextIngredientOK struct {
	Payload []*models.IngredientWithNutritionAbbrev
}

func (o *GetNutritionForSingleParsedPlainTextIngredientOK) Error() string {
	return fmt.Sprintf("[GET /parse/nutrition/ingredient/{ingredient-line}][%d] getNutritionForSingleParsedPlainTextIngredientOK  %+v", 200, o.Payload)
}

func (o *GetNutritionForSingleParsedPlainTextIngredientOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNutritionForSingleParsedPlainTextIngredientBadRequest creates a GetNutritionForSingleParsedPlainTextIngredientBadRequest with default headers values
func NewGetNutritionForSingleParsedPlainTextIngredientBadRequest() *GetNutritionForSingleParsedPlainTextIngredientBadRequest {
	return &GetNutritionForSingleParsedPlainTextIngredientBadRequest{}
}

/*GetNutritionForSingleParsedPlainTextIngredientBadRequest handles this case with default header values.

Malformed JSON (this endpoint requires an array of strings)
*/
type GetNutritionForSingleParsedPlainTextIngredientBadRequest struct {
	Payload *models.HTTPAPIError
}

func (o *GetNutritionForSingleParsedPlainTextIngredientBadRequest) Error() string {
	return fmt.Sprintf("[GET /parse/nutrition/ingredient/{ingredient-line}][%d] getNutritionForSingleParsedPlainTextIngredientBadRequest  %+v", 400, o.Payload)
}

func (o *GetNutritionForSingleParsedPlainTextIngredientBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
