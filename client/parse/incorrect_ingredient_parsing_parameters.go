// Code generated by go-swagger; DO NOT EDIT.

package parse

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewIncorrectIngredientParsingParams creates a new IncorrectIngredientParsingParams object
// with the default values initialized.
func NewIncorrectIngredientParsingParams() *IncorrectIngredientParsingParams {
	var ()
	return &IncorrectIngredientParsingParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewIncorrectIngredientParsingParamsWithTimeout creates a new IncorrectIngredientParsingParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewIncorrectIngredientParsingParamsWithTimeout(timeout time.Duration) *IncorrectIngredientParsingParams {
	var ()
	return &IncorrectIngredientParsingParams{

		timeout: timeout,
	}
}

// NewIncorrectIngredientParsingParamsWithContext creates a new IncorrectIngredientParsingParams object
// with the default values initialized, and the ability to set a context for a request
func NewIncorrectIngredientParsingParamsWithContext(ctx context.Context) *IncorrectIngredientParsingParams {
	var ()
	return &IncorrectIngredientParsingParams{

		Context: ctx,
	}
}

// NewIncorrectIngredientParsingParamsWithHTTPClient creates a new IncorrectIngredientParsingParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewIncorrectIngredientParsingParamsWithHTTPClient(client *http.Client) *IncorrectIngredientParsingParams {
	var ()
	return &IncorrectIngredientParsingParams{
		HTTPClient: client,
	}
}

/*IncorrectIngredientParsingParams contains all the parameters to send to the API endpoint
for the incorrect ingredient parsing operation typically these are written to a http.Request
*/
type IncorrectIngredientParsingParams struct {

	/*ParsedID
	  The parsed ID, which is either the ingredient object's IngredientID or the ParsedID of the ingredient.

	*/
	ParsedID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the incorrect ingredient parsing params
func (o *IncorrectIngredientParsingParams) WithTimeout(timeout time.Duration) *IncorrectIngredientParsingParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the incorrect ingredient parsing params
func (o *IncorrectIngredientParsingParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the incorrect ingredient parsing params
func (o *IncorrectIngredientParsingParams) WithContext(ctx context.Context) *IncorrectIngredientParsingParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the incorrect ingredient parsing params
func (o *IncorrectIngredientParsingParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the incorrect ingredient parsing params
func (o *IncorrectIngredientParsingParams) WithHTTPClient(client *http.Client) *IncorrectIngredientParsingParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the incorrect ingredient parsing params
func (o *IncorrectIngredientParsingParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithParsedID adds the parsedID to the incorrect ingredient parsing params
func (o *IncorrectIngredientParsingParams) WithParsedID(parsedID string) *IncorrectIngredientParsingParams {
	o.SetParsedID(parsedID)
	return o
}

// SetParsedID adds the parsedId to the incorrect ingredient parsing params
func (o *IncorrectIngredientParsingParams) SetParsedID(parsedID string) {
	o.ParsedID = parsedID
}

// WriteToRequest writes these params to a swagger request
func (o *IncorrectIngredientParsingParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param parsedId
	if err := r.SetPathParam("parsedId", o.ParsedID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
