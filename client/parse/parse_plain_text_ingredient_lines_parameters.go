// Code generated by go-swagger; DO NOT EDIT.

package parse

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewParsePlainTextIngredientLinesParams creates a new ParsePlainTextIngredientLinesParams object
// with the default values initialized.
func NewParsePlainTextIngredientLinesParams() *ParsePlainTextIngredientLinesParams {
	var (
		countryDefault                    = string("uk")
		includeCommonNamesDefault         = bool(false)
		includeFoodIDDefault              = bool(false)
		includeFoodNamesDefault           = bool(false)
		includeGdaDefault                 = bool(false)
		includeNutritionDefault           = bool(false)
		includeNutritionPerPortionDefault = bool(false)
		includeNutritionTipsDefault       = bool(false)
		includeRecipeCategoriesDefault    = bool(false)
	)
	return &ParsePlainTextIngredientLinesParams{
		Country:                    &countryDefault,
		IncludeCommonNames:         &includeCommonNamesDefault,
		IncludeFoodID:              &includeFoodIDDefault,
		IncludeFoodNames:           &includeFoodNamesDefault,
		IncludeGda:                 &includeGdaDefault,
		IncludeNutrition:           &includeNutritionDefault,
		IncludeNutritionPerPortion: &includeNutritionPerPortionDefault,
		IncludeNutritionTips:       &includeNutritionTipsDefault,
		IncludeRecipeCategories:    &includeRecipeCategoriesDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewParsePlainTextIngredientLinesParamsWithTimeout creates a new ParsePlainTextIngredientLinesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewParsePlainTextIngredientLinesParamsWithTimeout(timeout time.Duration) *ParsePlainTextIngredientLinesParams {
	var (
		countryDefault                    = string("uk")
		includeCommonNamesDefault         = bool(false)
		includeFoodIDDefault              = bool(false)
		includeFoodNamesDefault           = bool(false)
		includeGdaDefault                 = bool(false)
		includeNutritionDefault           = bool(false)
		includeNutritionPerPortionDefault = bool(false)
		includeNutritionTipsDefault       = bool(false)
		includeRecipeCategoriesDefault    = bool(false)
	)
	return &ParsePlainTextIngredientLinesParams{
		Country:                    &countryDefault,
		IncludeCommonNames:         &includeCommonNamesDefault,
		IncludeFoodID:              &includeFoodIDDefault,
		IncludeFoodNames:           &includeFoodNamesDefault,
		IncludeGda:                 &includeGdaDefault,
		IncludeNutrition:           &includeNutritionDefault,
		IncludeNutritionPerPortion: &includeNutritionPerPortionDefault,
		IncludeNutritionTips:       &includeNutritionTipsDefault,
		IncludeRecipeCategories:    &includeRecipeCategoriesDefault,

		timeout: timeout,
	}
}

// NewParsePlainTextIngredientLinesParamsWithContext creates a new ParsePlainTextIngredientLinesParams object
// with the default values initialized, and the ability to set a context for a request
func NewParsePlainTextIngredientLinesParamsWithContext(ctx context.Context) *ParsePlainTextIngredientLinesParams {
	var (
		countryDefault                    = string("uk")
		includeCommonNamesDefault         = bool(false)
		includeFoodIdDefault              = bool(false)
		includeFoodNamesDefault           = bool(false)
		includeGdaDefault                 = bool(false)
		includeNutritionDefault           = bool(false)
		includeNutritionPerPortionDefault = bool(false)
		includeNutritionTipsDefault       = bool(false)
		includeRecipeCategoriesDefault    = bool(false)
	)
	return &ParsePlainTextIngredientLinesParams{
		Country:                    &countryDefault,
		IncludeCommonNames:         &includeCommonNamesDefault,
		IncludeFoodID:              &includeFoodIdDefault,
		IncludeFoodNames:           &includeFoodNamesDefault,
		IncludeGda:                 &includeGdaDefault,
		IncludeNutrition:           &includeNutritionDefault,
		IncludeNutritionPerPortion: &includeNutritionPerPortionDefault,
		IncludeNutritionTips:       &includeNutritionTipsDefault,
		IncludeRecipeCategories:    &includeRecipeCategoriesDefault,

		Context: ctx,
	}
}

// NewParsePlainTextIngredientLinesParamsWithHTTPClient creates a new ParsePlainTextIngredientLinesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewParsePlainTextIngredientLinesParamsWithHTTPClient(client *http.Client) *ParsePlainTextIngredientLinesParams {
	var (
		countryDefault                    = string("uk")
		includeCommonNamesDefault         = bool(false)
		includeFoodIdDefault              = bool(false)
		includeFoodNamesDefault           = bool(false)
		includeGdaDefault                 = bool(false)
		includeNutritionDefault           = bool(false)
		includeNutritionPerPortionDefault = bool(false)
		includeNutritionTipsDefault       = bool(false)
		includeRecipeCategoriesDefault    = bool(false)
	)
	return &ParsePlainTextIngredientLinesParams{
		Country:                    &countryDefault,
		IncludeCommonNames:         &includeCommonNamesDefault,
		IncludeFoodID:              &includeFoodIdDefault,
		IncludeFoodNames:           &includeFoodNamesDefault,
		IncludeGda:                 &includeGdaDefault,
		IncludeNutrition:           &includeNutritionDefault,
		IncludeNutritionPerPortion: &includeNutritionPerPortionDefault,
		IncludeNutritionTips:       &includeNutritionTipsDefault,
		IncludeRecipeCategories:    &includeRecipeCategoriesDefault,
		HTTPClient:                 client,
	}
}

/*ParsePlainTextIngredientLinesParams contains all the parameters to send to the API endpoint
for the parse plain text ingredient lines operation typically these are written to a http.Request
*/
type ParsePlainTextIngredientLinesParams struct {

	/*Country
	  The country code which the RDA should reflect.

	*/
	Country *string
	/*IncludeCommonNames
	  Should the recipe's ingredient common names be included?

	*/
	IncludeCommonNames *bool
	/*IncludeFoodID
	  Should the recipe's ingredient food id's be included? This can be useful if you need the names of foods as a map, where the key is the food id, the value the food name.

	*/
	IncludeFoodID *bool
	/*IncludeFoodNames
	  Should the recipe's ingredient food names be included (this is different from the common names since the storage is a map, where key is the foodId and value is the ingredient common name)

	*/
	IncludeFoodNames *bool
	/*IncludeGda
	  Should the general daily provision for the recipe be included?

	*/
	IncludeGda *bool
	/*IncludeNutrition
	  Should the recipe's nutrition field be populated?

	*/
	IncludeNutrition *bool
	/*IncludeNutritionPerPortion
	  Should the recipe's nutrition per portion be included?

	*/
	IncludeNutritionPerPortion *bool
	/*IncludeNutritionTips
	  Provide tips and information regarding the nutritional content for this recipe.

	*/
	IncludeNutritionTips *bool
	/*IncludeRecipeCategories
	  Should the recipe's categories be included? The Recipe categories include; vegan-friendly, vegetarion, pescatarian, gluten-free, low-fat, low-sat-fat, low-sugar.

	*/
	IncludeRecipeCategories *bool
	/*JSONBody
	  A JSON array of plain english ingredients.

	*/
	JSONBody []string
	/*PortionSize
	  How large do you want the portions to be? The recipe creators will often decide how many portions a recipe will produce, when following the instructions. However, some people have healthier appetites than others, so this parameter allows control of this element of the recipe. This value is in gramms.

	*/
	PortionSize *int32
	/*Portions
	  The number of portions the parsed ingredients will create.

	*/
	Portions *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the parse plain text ingredient lines params
func (o *ParsePlainTextIngredientLinesParams) WithTimeout(timeout time.Duration) *ParsePlainTextIngredientLinesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the parse plain text ingredient lines params
func (o *ParsePlainTextIngredientLinesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the parse plain text ingredient lines params
func (o *ParsePlainTextIngredientLinesParams) WithContext(ctx context.Context) *ParsePlainTextIngredientLinesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the parse plain text ingredient lines params
func (o *ParsePlainTextIngredientLinesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the parse plain text ingredient lines params
func (o *ParsePlainTextIngredientLinesParams) WithHTTPClient(client *http.Client) *ParsePlainTextIngredientLinesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the parse plain text ingredient lines params
func (o *ParsePlainTextIngredientLinesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCountry adds the country to the parse plain text ingredient lines params
func (o *ParsePlainTextIngredientLinesParams) WithCountry(country *string) *ParsePlainTextIngredientLinesParams {
	o.SetCountry(country)
	return o
}

// SetCountry adds the country to the parse plain text ingredient lines params
func (o *ParsePlainTextIngredientLinesParams) SetCountry(country *string) {
	o.Country = country
}

// WithIncludeCommonNames adds the includeCommonNames to the parse plain text ingredient lines params
func (o *ParsePlainTextIngredientLinesParams) WithIncludeCommonNames(includeCommonNames *bool) *ParsePlainTextIngredientLinesParams {
	o.SetIncludeCommonNames(includeCommonNames)
	return o
}

// SetIncludeCommonNames adds the includeCommonNames to the parse plain text ingredient lines params
func (o *ParsePlainTextIngredientLinesParams) SetIncludeCommonNames(includeCommonNames *bool) {
	o.IncludeCommonNames = includeCommonNames
}

// WithIncludeFoodID adds the includeFoodID to the parse plain text ingredient lines params
func (o *ParsePlainTextIngredientLinesParams) WithIncludeFoodID(includeFoodID *bool) *ParsePlainTextIngredientLinesParams {
	o.SetIncludeFoodID(includeFoodID)
	return o
}

// SetIncludeFoodID adds the includeFoodId to the parse plain text ingredient lines params
func (o *ParsePlainTextIngredientLinesParams) SetIncludeFoodID(includeFoodID *bool) {
	o.IncludeFoodID = includeFoodID
}

// WithIncludeFoodNames adds the includeFoodNames to the parse plain text ingredient lines params
func (o *ParsePlainTextIngredientLinesParams) WithIncludeFoodNames(includeFoodNames *bool) *ParsePlainTextIngredientLinesParams {
	o.SetIncludeFoodNames(includeFoodNames)
	return o
}

// SetIncludeFoodNames adds the includeFoodNames to the parse plain text ingredient lines params
func (o *ParsePlainTextIngredientLinesParams) SetIncludeFoodNames(includeFoodNames *bool) {
	o.IncludeFoodNames = includeFoodNames
}

// WithIncludeGda adds the includeGda to the parse plain text ingredient lines params
func (o *ParsePlainTextIngredientLinesParams) WithIncludeGda(includeGda *bool) *ParsePlainTextIngredientLinesParams {
	o.SetIncludeGda(includeGda)
	return o
}

// SetIncludeGda adds the includeGda to the parse plain text ingredient lines params
func (o *ParsePlainTextIngredientLinesParams) SetIncludeGda(includeGda *bool) {
	o.IncludeGda = includeGda
}

// WithIncludeNutrition adds the includeNutrition to the parse plain text ingredient lines params
func (o *ParsePlainTextIngredientLinesParams) WithIncludeNutrition(includeNutrition *bool) *ParsePlainTextIngredientLinesParams {
	o.SetIncludeNutrition(includeNutrition)
	return o
}

// SetIncludeNutrition adds the includeNutrition to the parse plain text ingredient lines params
func (o *ParsePlainTextIngredientLinesParams) SetIncludeNutrition(includeNutrition *bool) {
	o.IncludeNutrition = includeNutrition
}

// WithIncludeNutritionPerPortion adds the includeNutritionPerPortion to the parse plain text ingredient lines params
func (o *ParsePlainTextIngredientLinesParams) WithIncludeNutritionPerPortion(includeNutritionPerPortion *bool) *ParsePlainTextIngredientLinesParams {
	o.SetIncludeNutritionPerPortion(includeNutritionPerPortion)
	return o
}

// SetIncludeNutritionPerPortion adds the includeNutritionPerPortion to the parse plain text ingredient lines params
func (o *ParsePlainTextIngredientLinesParams) SetIncludeNutritionPerPortion(includeNutritionPerPortion *bool) {
	o.IncludeNutritionPerPortion = includeNutritionPerPortion
}

// WithIncludeNutritionTips adds the includeNutritionTips to the parse plain text ingredient lines params
func (o *ParsePlainTextIngredientLinesParams) WithIncludeNutritionTips(includeNutritionTips *bool) *ParsePlainTextIngredientLinesParams {
	o.SetIncludeNutritionTips(includeNutritionTips)
	return o
}

// SetIncludeNutritionTips adds the includeNutritionTips to the parse plain text ingredient lines params
func (o *ParsePlainTextIngredientLinesParams) SetIncludeNutritionTips(includeNutritionTips *bool) {
	o.IncludeNutritionTips = includeNutritionTips
}

// WithIncludeRecipeCategories adds the includeRecipeCategories to the parse plain text ingredient lines params
func (o *ParsePlainTextIngredientLinesParams) WithIncludeRecipeCategories(includeRecipeCategories *bool) *ParsePlainTextIngredientLinesParams {
	o.SetIncludeRecipeCategories(includeRecipeCategories)
	return o
}

// SetIncludeRecipeCategories adds the includeRecipeCategories to the parse plain text ingredient lines params
func (o *ParsePlainTextIngredientLinesParams) SetIncludeRecipeCategories(includeRecipeCategories *bool) {
	o.IncludeRecipeCategories = includeRecipeCategories
}

// WithJSONBody adds the jSONBody to the parse plain text ingredient lines params
func (o *ParsePlainTextIngredientLinesParams) WithJSONBody(jSONBody []string) *ParsePlainTextIngredientLinesParams {
	o.SetJSONBody(jSONBody)
	return o
}

// SetJSONBody adds the jsonBody to the parse plain text ingredient lines params
func (o *ParsePlainTextIngredientLinesParams) SetJSONBody(jSONBody []string) {
	o.JSONBody = jSONBody
}

// WithPortionSize adds the portionSize to the parse plain text ingredient lines params
func (o *ParsePlainTextIngredientLinesParams) WithPortionSize(portionSize *int32) *ParsePlainTextIngredientLinesParams {
	o.SetPortionSize(portionSize)
	return o
}

// SetPortionSize adds the portionSize to the parse plain text ingredient lines params
func (o *ParsePlainTextIngredientLinesParams) SetPortionSize(portionSize *int32) {
	o.PortionSize = portionSize
}

// WithPortions adds the portions to the parse plain text ingredient lines params
func (o *ParsePlainTextIngredientLinesParams) WithPortions(portions *int32) *ParsePlainTextIngredientLinesParams {
	o.SetPortions(portions)
	return o
}

// SetPortions adds the portions to the parse plain text ingredient lines params
func (o *ParsePlainTextIngredientLinesParams) SetPortions(portions *int32) {
	o.Portions = portions
}

// WriteToRequest writes these params to a swagger request
func (o *ParsePlainTextIngredientLinesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Country != nil {

		// query param country
		var qrCountry string
		if o.Country != nil {
			qrCountry = *o.Country
		}
		qCountry := qrCountry
		if qCountry != "" {
			if err := r.SetQueryParam("country", qCountry); err != nil {
				return err
			}
		}

	}

	if o.IncludeCommonNames != nil {

		// query param include-common-names
		var qrIncludeCommonNames bool
		if o.IncludeCommonNames != nil {
			qrIncludeCommonNames = *o.IncludeCommonNames
		}
		qIncludeCommonNames := swag.FormatBool(qrIncludeCommonNames)
		if qIncludeCommonNames != "" {
			if err := r.SetQueryParam("include-common-names", qIncludeCommonNames); err != nil {
				return err
			}
		}

	}

	if o.IncludeFoodID != nil {

		// query param include-food-id
		var qrIncludeFoodID bool
		if o.IncludeFoodID != nil {
			qrIncludeFoodID = *o.IncludeFoodID
		}
		qIncludeFoodID := swag.FormatBool(qrIncludeFoodID)
		if qIncludeFoodID != "" {
			if err := r.SetQueryParam("include-food-id", qIncludeFoodID); err != nil {
				return err
			}
		}

	}

	if o.IncludeFoodNames != nil {

		// query param include-food-names
		var qrIncludeFoodNames bool
		if o.IncludeFoodNames != nil {
			qrIncludeFoodNames = *o.IncludeFoodNames
		}
		qIncludeFoodNames := swag.FormatBool(qrIncludeFoodNames)
		if qIncludeFoodNames != "" {
			if err := r.SetQueryParam("include-food-names", qIncludeFoodNames); err != nil {
				return err
			}
		}

	}

	if o.IncludeGda != nil {

		// query param include-gda
		var qrIncludeGda bool
		if o.IncludeGda != nil {
			qrIncludeGda = *o.IncludeGda
		}
		qIncludeGda := swag.FormatBool(qrIncludeGda)
		if qIncludeGda != "" {
			if err := r.SetQueryParam("include-gda", qIncludeGda); err != nil {
				return err
			}
		}

	}

	if o.IncludeNutrition != nil {

		// query param include-nutrition
		var qrIncludeNutrition bool
		if o.IncludeNutrition != nil {
			qrIncludeNutrition = *o.IncludeNutrition
		}
		qIncludeNutrition := swag.FormatBool(qrIncludeNutrition)
		if qIncludeNutrition != "" {
			if err := r.SetQueryParam("include-nutrition", qIncludeNutrition); err != nil {
				return err
			}
		}

	}

	if o.IncludeNutritionPerPortion != nil {

		// query param include-nutrition-per-portion
		var qrIncludeNutritionPerPortion bool
		if o.IncludeNutritionPerPortion != nil {
			qrIncludeNutritionPerPortion = *o.IncludeNutritionPerPortion
		}
		qIncludeNutritionPerPortion := swag.FormatBool(qrIncludeNutritionPerPortion)
		if qIncludeNutritionPerPortion != "" {
			if err := r.SetQueryParam("include-nutrition-per-portion", qIncludeNutritionPerPortion); err != nil {
				return err
			}
		}

	}

	if o.IncludeNutritionTips != nil {

		// query param include-nutrition-tips
		var qrIncludeNutritionTips bool
		if o.IncludeNutritionTips != nil {
			qrIncludeNutritionTips = *o.IncludeNutritionTips
		}
		qIncludeNutritionTips := swag.FormatBool(qrIncludeNutritionTips)
		if qIncludeNutritionTips != "" {
			if err := r.SetQueryParam("include-nutrition-tips", qIncludeNutritionTips); err != nil {
				return err
			}
		}

	}

	if o.IncludeRecipeCategories != nil {

		// query param include-recipe-categories
		var qrIncludeRecipeCategories bool
		if o.IncludeRecipeCategories != nil {
			qrIncludeRecipeCategories = *o.IncludeRecipeCategories
		}
		qIncludeRecipeCategories := swag.FormatBool(qrIncludeRecipeCategories)
		if qIncludeRecipeCategories != "" {
			if err := r.SetQueryParam("include-recipe-categories", qIncludeRecipeCategories); err != nil {
				return err
			}
		}

	}

	if o.JSONBody != nil {
		if err := r.SetBodyParam(o.JSONBody); err != nil {
			return err
		}
	}

	if o.PortionSize != nil {

		// query param portionSize
		var qrPortionSize int32
		if o.PortionSize != nil {
			qrPortionSize = *o.PortionSize
		}
		qPortionSize := swag.FormatInt32(qrPortionSize)
		if qPortionSize != "" {
			if err := r.SetQueryParam("portionSize", qPortionSize); err != nil {
				return err
			}
		}

	}

	if o.Portions != nil {

		// query param portions
		var qrPortions int32
		if o.Portions != nil {
			qrPortions = *o.Portions
		}
		qPortions := swag.FormatInt32(qrPortions)
		if qPortions != "" {
			if err := r.SetQueryParam("portions", qPortions); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
