// Code generated by go-swagger; DO NOT EDIT.

package parse

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cheerychow/chow-go-client/models"
)

// ParseRecipeByURLGetReader is a Reader for the ParseRecipeByURLGet structure.
type ParseRecipeByURLGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ParseRecipeByURLGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewParseRecipeByURLGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewParseRecipeByURLGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewParseRecipeByURLGetOK creates a ParseRecipeByURLGetOK with default headers values
func NewParseRecipeByURLGetOK() *ParseRecipeByURLGetOK {
	return &ParseRecipeByURLGetOK{}
}

/*ParseRecipeByURLGetOK handles this case with default header values.

No response was specified
*/
type ParseRecipeByURLGetOK struct {
	Payload *models.Recipe
}

func (o *ParseRecipeByURLGetOK) Error() string {
	return fmt.Sprintf("[GET /parse/via-url/recipe/{recipe-url}][%d] parseRecipeByUrlGetOK  %+v", 200, o.Payload)
}

func (o *ParseRecipeByURLGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Recipe)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewParseRecipeByURLGetBadRequest creates a ParseRecipeByURLGetBadRequest with default headers values
func NewParseRecipeByURLGetBadRequest() *ParseRecipeByURLGetBadRequest {
	return &ParseRecipeByURLGetBadRequest{}
}

/*ParseRecipeByURLGetBadRequest handles this case with default header values.

Description was not specified
*/
type ParseRecipeByURLGetBadRequest struct {
	Payload *models.HTTPAPIError
}

func (o *ParseRecipeByURLGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /parse/via-url/recipe/{recipe-url}][%d] parseRecipeByUrlGetBadRequest  %+v", 400, o.Payload)
}

func (o *ParseRecipeByURLGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HTTPAPIError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
