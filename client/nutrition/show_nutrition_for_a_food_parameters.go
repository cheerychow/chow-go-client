// Code generated by go-swagger; DO NOT EDIT.

package nutrition

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewShowNutritionForAFoodParams creates a new ShowNutritionForAFoodParams object
// with the default values initialized.
func NewShowNutritionForAFoodParams() *ShowNutritionForAFoodParams {
	var ()
	return &ShowNutritionForAFoodParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewShowNutritionForAFoodParamsWithTimeout creates a new ShowNutritionForAFoodParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewShowNutritionForAFoodParamsWithTimeout(timeout time.Duration) *ShowNutritionForAFoodParams {
	var ()
	return &ShowNutritionForAFoodParams{

		timeout: timeout,
	}
}

// NewShowNutritionForAFoodParamsWithContext creates a new ShowNutritionForAFoodParams object
// with the default values initialized, and the ability to set a context for a request
func NewShowNutritionForAFoodParamsWithContext(ctx context.Context) *ShowNutritionForAFoodParams {
	var ()
	return &ShowNutritionForAFoodParams{

		Context: ctx,
	}
}

// NewShowNutritionForAFoodParamsWithHTTPClient creates a new ShowNutritionForAFoodParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewShowNutritionForAFoodParamsWithHTTPClient(client *http.Client) *ShowNutritionForAFoodParams {
	var ()
	return &ShowNutritionForAFoodParams{
		HTTPClient: client,
	}
}

/*ShowNutritionForAFoodParams contains all the parameters to send to the API endpoint
for the show nutrition for a food operation typically these are written to a http.Request
*/
type ShowNutritionForAFoodParams struct {

	/*Amount
	  The amount of food in grams

	*/
	Amount float32
	/*FoodID
	  Food ID

	*/
	FoodID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the show nutrition for a food params
func (o *ShowNutritionForAFoodParams) WithTimeout(timeout time.Duration) *ShowNutritionForAFoodParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the show nutrition for a food params
func (o *ShowNutritionForAFoodParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the show nutrition for a food params
func (o *ShowNutritionForAFoodParams) WithContext(ctx context.Context) *ShowNutritionForAFoodParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the show nutrition for a food params
func (o *ShowNutritionForAFoodParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the show nutrition for a food params
func (o *ShowNutritionForAFoodParams) WithHTTPClient(client *http.Client) *ShowNutritionForAFoodParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the show nutrition for a food params
func (o *ShowNutritionForAFoodParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAmount adds the amount to the show nutrition for a food params
func (o *ShowNutritionForAFoodParams) WithAmount(amount float32) *ShowNutritionForAFoodParams {
	o.SetAmount(amount)
	return o
}

// SetAmount adds the amount to the show nutrition for a food params
func (o *ShowNutritionForAFoodParams) SetAmount(amount float32) {
	o.Amount = amount
}

// WithFoodID adds the foodID to the show nutrition for a food params
func (o *ShowNutritionForAFoodParams) WithFoodID(foodID int64) *ShowNutritionForAFoodParams {
	o.SetFoodID(foodID)
	return o
}

// SetFoodID adds the foodId to the show nutrition for a food params
func (o *ShowNutritionForAFoodParams) SetFoodID(foodID int64) {
	o.FoodID = foodID
}

// WriteToRequest writes these params to a swagger request
func (o *ShowNutritionForAFoodParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param amount
	if err := r.SetPathParam("amount", swag.FormatFloat32(o.Amount)); err != nil {
		return err
	}

	// path param foodId
	if err := r.SetPathParam("foodId", swag.FormatInt64(o.FoodID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
