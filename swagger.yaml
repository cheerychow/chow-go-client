---
host: api.cheerychow.com
schemes:
- https
consumes:
- application/json
produces: 
- "application/json"
basePath: "/"
swagger: '2.0'
info:
  title: Cheery Chow Recipe API
  version: 0.4.0
  description: Food, nutrition and recipe management API.
  contact:
    email: john@cheerychow.com
  license:
    name: AsR
    url: http://asr-aad.org/
  termsOfService: http://www.cheerychow.com/terms.html
tags:
- name: labels
  description: A collection of endpoints for querying data such as the currently known Nutrient json field names and other developer API related features.
- name: rate-recipe
  description: End points for rating recipes and fetching recipe review data.
- name: food
  description: 'Endpoints for searching the food items in the database, including known ingredients and autocomplete
  functions for use in auto completing text boxes. Nutrition endpoints are also available which provide functions
  for fetching how much nutrition foods offer.'
- name: recipe
  description: Recipe management endpoints include saving recipes, adding/changing ingredients and updating
   many other recipe related details. Endpoints are also available for generating HTML Nutrition Label content.
- name: scratch-recipe
  description: Scratch recipes are recipes which aren't yet publically viewable and WIP. Once work is completed on a scratch recipe, it can then put 'published' i.e. made publically viewable to all.
- name: rda
  description: View the various RDA (Recommended Daily Allowances) currently available in the database. These are important when generating the RDA .Provides field on the recipe objects. The .Provides is generated based on an RDA object. For example, the UK RDA for men and women is different to that offically recognised in other countries, such as the USA. So, when requesting a Recipe object, it's important to understand this when interpreting the data seen in the Recipe object's .Provides field.
- name: fav-recipe
  description: List the logged in user's fav recipes.
- name: alternatives
  description: List similar foods. This is useful when looking at foods that are similar and migt be swapped in recipes (such as rice, basmati rice or brown rice).
- name: parse
  description: A collection of endpoints for parsing ingredients in recipes. Each endpoint can take natural english ingredient lines and parse them into quantities of food with their nutritional content.
- name: recipe-group
  description: A schema for grouping collections of recipes together, for any purpose.
- name: convert
  description: A collection of endpoints for converting recipes into various other formats; including and not limited to XML, MealMaster and Recipe Markup Language.
- name: account
  description: Account management endpoints, including API key creation, account validation and login functionality.
- name: user
  description: User management endpoints for adding new users and updating their account information.
- name: chow
  description: Get a particular recipe via a unique name and index
paths:
  "/search-ingredients/{search}":
    get:
      tags:
      - food
      operationId: SearchIngredients
      summary: Search common foods and parse the search term as an ingredient. This
        is a convenience end point for auto xcomplete boxes where a user typing in
        a text can either pick a food item or the ingredient's parsed value from a
        drop down.
      parameters:
      - in: path
        description: Case insensitive search term, for ingredients or foods. Ingredients
          will be parsed as ingredient lines and returned as IngredientWithNutritionAbbrev
          objects.
        name: search
        required: true
        type: string
        minLength: 1
        maxLength: 255
      produces:
      - application/json
      responses:
        '200':
          description: An array of NutritionAbbrev objects with the amount of food
            & nutrition as parsed by the sous bot, or per 100g of food if the search
            result is simply food.
          schema:
            type: array
            items:
              "$ref": "#/definitions/IngredientWithNutritionAbbrev"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/search-common-foods/{search}":
    get:
      tags:
      - food
      operationId: SearchCommonFoods
      summary: Search the available foods by text string
      parameters:
      - in: path
        description: Case insensitive search term, for ingredients or foods. Ingredients
          will be parsed as ingredient lines and returned as IngredientWithNutritionAbbrev
          objects.
        name: search
        required: true
        type: string
        minLength: 1
        maxLength: 254
      - "$ref" : "#/parameters/offset"
      - "$ref" : "#/parameters/limit"
      produces:
      - application/json
      responses:
        '200':
          description: An array of NutritionAbbrev objects with the amount of food
            & nutrition as parsed by the sous bot, or per 100g of food if the search
            result is simply food.
          schema:
            type: array
            items:
              "$ref": "#/definitions/NutritionAbbrevWithName"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/search/recipe-category-names":
    get:
      tags:
      - food
      operationId: ShowSearchRecipeCategories
      summary: Provide a list of valid search parameters available when searching for recipes; examples include pescatarian or vegan-friendly which can be passed to recipe searches as 'pescatarion=1' to filter only pescatarian recipes in the search results.
      produces:
      - application/json
      responses:
        '200':
          description: An array of the available recipe search categories.
          schema:
            type: array
            items:
              type: string
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/labels/nutrient-definitions":
    get:
      tags:
      - labels
      operationId: NutrientDefinitions
      summary: List the nutrient's currently known to cheery chow.
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            type: array
            items:
              "$ref": "#/definitions/NutrDef"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/labels/nutrient-abbrevs":
    get:
      tags:
      - labels
      operationId: NutrientAbbrevs
      summary: List the nutrient's field names that appear in json objects
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            type: array
            items:
              type: string
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/rate-recipe":
    post:
      tags:
      - rate-recipe
      operationId: RateARecipe
      summary: Rate a recipe out of 5. The body of this post request requires at least that the rating field be set, along with one other RateRecipe field to identify the recipe you're rating. If the recipe is a recipe already in the database, then set the recipe_id field. If the recipe is an external recipe then you can set the recipe_url field.
      parameters:
      - in: body
        description: Rating out of 5
        name: jsonBody
        required: true
        schema:
          "$ref": "#/definitions/RecipeRating"
      produces:
      - application/json
      responses:
        '201':
          description: The recipe rating.
          schema:
            "$ref": "#/definitions/RecipeRatingResult"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
  "/rate-recipe/my-rating-by-id/{ratingId}":
    get:
      tags:
      - rate-recipe
      operationId: GetMyRecipeRatingByRatingID
      summary: Get currently logged in users rating for a recipe, by it's id
      parameters:
      - in: path
        description: The id of the rating.
        name: ratingId
        required: true
        type: integer
        format: int32
        minimum: 1
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/RecipeRating"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Recipe not found
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
  "/rate-recipe/my-rating-by-url/{url}":
    get:
      tags:
      - rate-recipe
      operationId: GetMyRecipeRatingByUrl
      summary: Get currently logged in users rating for a recipe, by recipe url
      parameters:
      - in: path
        description: The url of the recipe, if it's already in the database.
        name: url
        required: true
        type: string
        minLength: 1
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/RecipeRating"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Recipe not found
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
  "/rate-recipe/my-rating-by-recipe-id/{recipeId}":
    get:
      tags:
      - rate-recipe
      operationId: GetMyRecipeRatingByRecipeId
      summary: Get currently logged in users rating for a recipe, by recipe url
      parameters:
      - in: path
        description: The url of the recipe, if it's already in the database.
        name: recipeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/RecipeRating"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Recipe not found
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
  "/rate-recipe/by-url/{url}":
    get:
      tags:
      - rate-recipe
      operationId: GetRecipeRatingByUrl
      summary: Get the aggregate rating for a recipe, by it's url
      parameters:
      - in: path
        description: The url of the recipe you want to rate.
        name: url
        required: true
        type: string
        minLength: 1
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/AvgTotal"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Recipe not found
          schema:
            "$ref": "#/definitions/HttpAPIError"
  # "/rate-recipe/{recipeId}":
      # put:
      #   tags:
      #   - rate-recipe
      #   operationId: SaveARecipeRating
      #   summary: Make a change to an already set recipe rating.
      #   parameters:
      #   - in: path
      #     description: The url of the recipe, if it's already in the database.
      #     name: recipeId
      #     required: true
      #     type: string
      #   - in: body
      #     description: Rating out of 5
      #     name: jsonBody
      #     required: true
      #     schema:
      #       "$ref": "#/definitions/RecipeRating"
      #   produces:
      #   - application/json
      #   responses:
      #     '200':
      #       description: The recipe rating.
      #       schema:
      #         "$ref": "#/definitions/RecipeRating"
      #     '400':
      #       description: Illegal value.
      #       schema:
      #         "$ref": "#/definitions/HttpAPIError"
      #     '404':
      #       description: Recipe or rating not found.
      #       schema:
      #         "$ref": "#/definitions/HttpAPIError"
      #   security:
      #   - chow_auth:
      #     - AuthRequired
  "/rate-recipe/by-id/{recipeId}":
    get:
      tags:
      - rate-recipe
      operationId: GetRecipeRatingByRecipeID
      summary: Get the rating for a recipe, by it's id
      parameters:
      - in: path
        description: The id of the recipe, if it's already in the database.
        name: recipeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/AvgTotal"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Recipe not found
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/rate-recipe/{ratingId}":
    delete:
      tags:
      - rate-recipe
      operationId: DeleteARecipeRating
      summary: Delete a recipe rating
      parameters:
      - in: path
        description: The id of the rating object you want to delete
        name: ratingId
        required: true
        type: integer
        format: int64
        minimum: 1
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIResponse"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Rating not found.
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '403':
          description: You're not the owner of this rating.
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
  "/autocomplete-foods/{search}":
    get:
      tags:
      - food
      operationId: ShowFoodsContaining
      summary: Simple wildcard food search.
      parameters:
      - in: path
        description: Food ID
        name: search
        required: true
        type: string
        minLength: 1
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            type: object
            additionalProperties:
              type: string
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/food/ingredients":
    get:
      tags:
      - food
      operationId: SearchAvailableIngredient
      summary: Search through the known ingredients in the database
      parameters:
      - in: query
        description: The search term to use when searching through ingredient names
        name: search-term
        required: false
        type: string
        minLength: 0
      - "$ref" : "#/parameters/offset"
      - in: query
        description: Limit the number of results returned.
        name: limit
        default: 1000
        required: false
        type: integer
        format: int32
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            type: array
            items:
              "$ref": "#/definitions/IngredientFood"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/food/{foodId}":
    get:
      tags:
      - food
      operationId: GetFoods
      summary: List similar foods
      parameters:
      - in: path
        description: The Food ID of the food object you want to fetch
        name: foodId
        required: true
        type: integer
        format: int64
        minimum: 1
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/FoodDes"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Food not found
          schema:
            "$ref": "#/definitions/HttpAPIError"
#  "/food/{food_id}/nutrition/{amount_grams}":
#    get:
#      tags:
#      - food
#      operationId: CalculateNutritionalInfo
#      summary: Get an API key
#      parameters:
#      - in: path
#        description: Food ID
#        name: food_id
#        required: true
#        type: integer
#        format: int32
#        minimum: 1
#      - in: path
#        description: Amount in grams
#        name: amount_grams
#        required: true
#        type: number
#        format: float
#        minimum: 1
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: Description was not specified
#          schema:
#            "$ref": "#/definitions/NutritionAbbrev"
#        '400':
#          description: Description was not specified
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
#  "/food/{food_id}/nutrition-provides/{amount_grams}":
#    get:
#      tags:
#      - food
#      operationId: CalculateNutritionalAndRDAProviddesInfo
#      summary: Get an API key
#      parameters:
#      - in: path
#        description: Food ID
#        name: food_id
#        required: true
#        type: integer
#        format: int32
#        minimum: 1
#      - in: path
#        description: Amount in grams
#        name: amount_grams
#        required: true
#        type: number
#        format: float
#        minimum: 1
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: Description was not specified
#          schema:
#            "$ref": "#/definitions/NutritionAbbrev"
#        '400':
#          description: Description was not specified
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
  "/food/search/{searchTerm}":
    get:
      tags:
      - food
      operationId: SearchFoods
      summary: Plain english search for foods.
      parameters:
      - in: path
        description: A search term for searching for foods.
        name: searchTerm
        required: true
        type: string
        minLength: 2
      - in: query
        description: The offset into search results.
        name: offset
        required: false
        type: integer
        format: int64
        minimum: 0
      - in: query
        description: Limit the number of results returned.
        name: limit
        required: false
        type: integer
        format: int32
        minimum: 0
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            type: array
            items:
              "$ref": "#/definitions/FoodDes"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/food/{foodId}/weights":
    get:
      tags:
      - food
      operationId: FoodWeight
      summary: Return the measured food proportions for a particular food.
      parameters:
      - in: path
        description: Food id which you want a list of known foods weights for
        name: foodId
        required: true
        type: integer
        format: int32
        minimum: 1
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            type: array
            items:
              type: string
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/food/groups":
    get:
      tags:
      - food
      operationId: ListFoodGroups
      summary: A list of the food groups
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            type: array
            items:
              "$ref": "#/definitions/FoodGroup"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/food/popular":
    get:
      tags:
      - food
      operationId: PopularFoods
      summary: Return a list of the most popular ingredients as food objects
      parameters:
      - in: query
        description: Limit the number of results returned.
        name: limit
        default: 1000
        required: false
        type: integer
        format: int32
      - "$ref" : "#/parameters/offset"
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            type: array
            items:
              "$ref": "#/definitions/PopularFood"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/food/{foodId}/weightnames":
    get:
      tags:
      - food
      operationId: FoodWeightNames
      summary: Weights of typical measurements
      parameters:
      - in: path
        description: Food id which you want a list of known foods weights for
        name: foodId
        required: true
        type: integer
        format: int32
        minimum: 1
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            type: array
            items:
              type: string
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/recipe/{recipeId}/image":
    get:
      tags:
      - recipe
      operationId: GetRecipePNG
      summary: Get the URL for a recipe's image
      parameters:
      - in: path
        description: The recipe ID of the recipe which the image is to be fetched.
        name: recipeId
        required: true
        type: string
      produces:
      - image/png
      responses:
        '200':
          description: The image
#          type: string
#          format: binary
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
#  "/recipe/{recipeId}/image-url":
#    get:
#      tags:
#      - recipe
#      operationId: GetImageURL
#      summary: Get the URL for a recipe's image
#      parameters:
#      - in: path
#        description: The recipe ID of the recipe which the image is to be fetched.
#        name: recipeId
#        required: true
#        type: integer
#        format: int64
#        minimum: 1
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: Description was not specified
#          schema:
#            type: string
#        '400':
#          description: Description was not specified
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
#        '404':
#          description: Description was not specified
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
#  "/recipe/{recipeId}/qr-image-url":
#    get:
#      tags:
#      - recipe
#      operationId: GetImageQRCodeURL
#      summary: Get the QR code image
#      parameters:
#      - in: path
#        description: The recipe ID of the recipe which the image is to be fetched.
#        name: recipeId
#        required: true
#        type: integer
#        format: int64
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: Description was not specified
#          schema:
#            type: object
#            additionalProperties:
#              type: array
#              items:
#                type: string
#        '400':
#          description: Description was not specified
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
#        '404':
#          description: Description was not specified
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
  "/recipe/{recipeId}/qr-image/png":
    get:
      tags:
      - recipe
      operationId: GetImageQRCodePNG
      summary: Get the QR code image
      parameters:
      - in: path
        description: The recipe ID of the recipe which the image is to be fetched.
        name: recipeId
        required: true
        type: string
      produces:
      - image/png
      responses:
        '200':
          description: Here's the image
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
#  "/recipe/{recipeId}/nutrition-label/png":
#    get:
#      tags:
#      - recipe
#      operationId: GetNutritionLabelImage
#      summary: Get a PNG of the nutrition label
#      parameters:
#      - in: path
#        description: The recipe ID which the nutritional label should be calculated
#          from.
#        name: recipeId
#        required: true
#        type: string
#      - in: query
#        description: The number of portions the parsed ingredients will create.
#        name: portions
#        required: false
#        type: integer
#        format: int32
#        default: 1
#        minimum: 1
#      - "$ref" : "#/parameters/country"
#      produces:
#      - image/png
#      responses:
#        '200':
#          description: Description was not specified
#          schema:
#            type: integer
#            format: int32
#        '400':
#          description: Description was not specified
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
#        '404':
#          description: Description was not specified
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
  "/parse/nutrition-label/html":
    post:
      tags:
      - parse
      operationId: GetNutritionLabelFromPlainIngredientsHtml
      summary: Get HTML source which draws a static HTML version of the nutrition
        label, from plain text ingredients passed to the endpoint as a json array
        where each item in the array is an ingredient line. You should pass the
        header 'Accept' text/html in the request to receive the HTML text in raw
        requests to the server.
      parameters:
      - in: body
        description: A JSON array of plain english ingredients.
        name: jsonBody
        required: true
        schema:
          type: array
          items:
            type: string
      - in: query
        description: The number of portions the parsed ingredients will create.
        name: portions
        required: false
        type: integer
        format: int32
        default: 1
        minimum: 1
      - "$ref" : "#/parameters/saveRecipe"
      - "$ref" : "#/parameters/recipeName"
      - "$ref" : "#/parameters/portionSize"
      - "$ref" : "#/parameters/country"
      produces:
      - text/html
      security:
      - chow_optional_auth:
        - AuthOptional
      responses:
        '200':
          description: HTML code for the nutrition label.
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            type: string
        '404':
          description: Description was not specified
          schema:
            type: string
  "/parse/nutrition-label/dynamic-html":
    post:
      tags:
      - parse
      operationId: GetNutritionLabelFromPlainIngredientsDynamicHtml
      summary: Get HTML source which draws a dynamic (javascript operated) version
        of the nutrition label, from plain text ingredients passed to the endpoint
        as a json array where each item in the array is an ingredient line. You
        should pass the header 'Accept' text/html in the request to receive the
        HTML text in raw requests to the server.
      parameters:
      - in: body
        description: A JSON array of plain english ingredients.
        name: jsonBody
        required: true
        schema:
          type: array
          items:
            type: string
      - in: query
        description: The number of portions the parsed ingredients will create.
        name: portions
        required: false
        type: integer
        format: int32
        default: 1
        minimum: 1
      - "$ref" : "#/parameters/saveRecipe"
      - "$ref" : "#/parameters/recipeName"
      - "$ref" : "#/parameters/portionSize"
      - "$ref" : "#/parameters/country"
      produces:
      - text/html
      security:
      - chow_optional_auth:
        - AuthOptional
      responses:
        '200':
          description: Description was not specified
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            type: string
        '404':
          description: Description was not specified
          schema:
            type: string
  "/parse/nutrition-tips-label/html":
    post:
      tags:
      - nutrition-tips
      operationId: GetNutritionTipsLabelFromPlainIngredientsHtml
      summary: Get the HTML source for a nutrition tips panel that can be embedded into a web page.
      parameters:
      - in: body
        description: A JSON array of plain english ingredients.
        name: jsonBody
        required: true
        schema:
          type: array
          items:
            type: string
      - in: query
        description: The number of portions the parsed ingredients will create.
        name: portions
        required: false
        type: integer
        format: int32
        default: 1
        minimum: 1
      - "$ref" : "#/parameters/portionSize"
      - "$ref" : "#/parameters/country"
      produces:
      - text/html
      responses:
        '200':
          description: Description was not specified
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            type: string
        '404':
          description: Description was not specified
          schema:
            type: string
  "/recipe/{recipeId}/nutrition-tip":
    get:
      tags:
      - recipe
      operationId: GetNutritionTipsForRecipe
      summary: Get a list of the nutrient tips for a particular recipe.
      parameters:
      - in: path
        description: The recipe ID and it's nutrition tips.
        name: recipeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            type: array
            items:
              "$ref": "#/definitions/NutritionTip"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Recipe not found
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/recipe/{recipeId}/nutrition-label/html":
    get:
      tags:
      - recipe
      operationId: GetNutritionLabelHtml
      summary: Get HTML source which draws a dynamic (javascript operated) version
        of the nutrition label. You should pass the header 'Accept' text/html in the request
         to receive the HTML text in raw requests to the server.
      parameters:
      - "$ref" : "#/parameters/recipeId"
      - "$ref" : "#/parameters/portions"
      - "$ref" : "#/parameters/portionSize"
      - "$ref" : "#/parameters/country"
      produces:
      - text/html
      responses:
        '200':
          description: Description was not specified
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            type: string
        '404':
          description: Description was not specified
          schema:
            type: string
  "/recipe/{recipeId}/nutrition-label/dynamic-snippet":
    get:
      tags:
      - recipe
      operationId: GetNutritionLabelHtmlDynamicSnippet
      summary: Get HTML source which draws a dynamic (javascript operated) version
        of the nutrition label. This produces a <div> with the nutrition label
        drawn inside it. The nutrients can be extended to show the food's producing
        the total food nutrition.
      parameters:
      - "$ref" : "#/parameters/recipeId"
      - "$ref" : "#/parameters/portions"
      - "$ref" : "#/parameters/portionSize"
      - "$ref" : "#/parameters/country"
      produces:
      - text/html
      responses:
        '200':
          description: Description was not specified
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            type: string
        '404':
          description: Description was not specified
          schema:
            type: string
  "/recipe/{recipeId}/nutrition-label/static-snippet":
    get:
      tags:
      - recipe
      operationId: GetNutritionLabelHtmlStaticSnippet
      summary: Get HTML source which draws a static version of the nutrition label. 
        This produces a <div> with the nutrition label drawn inside it. 
      parameters:
      - "$ref" : "#/parameters/recipeId"
      - "$ref" : "#/parameters/portions"
      - "$ref" : "#/parameters/portionSize"
      - "$ref" : "#/parameters/country"
      produces:
      - text/html
      responses:
        '200':
          description: Description was not specified
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            type: string
        '404':
          description: Description was not specified
          schema:
            type: string
  "/js/nutritionLabel.js":
    get:
      tags:
      - recipe
      operationId: GetNutritionLabelJs
      summary: Get HTML source which draws a dynamic (javascript operated) version
        of the nutrition label. You should pass the header 'Accept' text/html in the request
         to receive the HTML text in raw requests to the server.
      produces:
      - text/html
      responses:
        '200':
          description: Description was not specified
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            type: string
        '404':
          description: Description was not specified
          schema:
            type: string
  "/css/nutritionLabel.css":
    get:
      tags:
      - recipe
      operationId: GetNutritionLabelCss
      summary: Get the Nutrition label CSS.
      produces:
      - text/html
      responses:
        '200':
          description: Description was not specified
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            type: string
        '404':
          description: Description was not specified
          schema:
            type: string
  "/recipe/{recipeId}/nutrition-tips-label/html":
    get:
      tags:
      - nutrition-tips
      operationId: GetNutritionTipsLabelHtml
      summary: Get HTML source which draws a Nutrition Tips panel for embedding into a webpage.
      parameters:
      - "$ref" : "#/parameters/recipeId"
      - "$ref" : "#/parameters/portions"
      - "$ref" : "#/parameters/portionSize"
      - "$ref" : "#/parameters/country"
      produces:
      - text/html
      responses:
        '200':
          description: Description was not specified
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            type: string
        '404':
          description: Description was not specified
          schema:
            type: string
  "/recipe/{recipeId}/csv":
    get:
      tags:
      - recipe
      operationId: GetRecipeCSV
      summary: Create a detailed CSV file from a Recipe. Includes data on the calories
        per portion, and calorie for each ingredient in the recipe.
      parameters:
      - "$ref" : "#/parameters/recipeId"
      - "$ref" : "#/parameters/portions"
      - "$ref" : "#/parameters/portionSize"
      - "$ref" : "#/parameters/country"
      produces:
      - text/csv
      security:
      - chow_auth:
        - AuthRequired
      responses:
        '200':
          description: Description was not specified
          schema:
            type: string
            format: string
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/recipe/copy/{recipeId}":
    get:
      tags:
      - recipe
      operationId: CopyRecipeExactly
      summary: Allows you to make a copy of a recipe, which you're free to make changes
        to as if it were your own.
      parameters:
      - in: path
        description: The recipe you want to make changes to
        name: recipeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/Recipe"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
    post:
      tags:
      - recipe
      operationId: CopyRecipeToMyRecipesWithChanges
      summary: Allows you to make a copy of a recipe, which you're free to make changes
        to as if it were your own.
      parameters:
      - in: path
        description: The recipe you want to make changes to
        name: recipeId
        required: true
        type: string
      - in: body
        description: The recipe object with changes you want to make to the original
          recipe.
        name: jsonBody
        required: true
        schema:
          "$ref": "#/definitions/Recipe"
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/Recipe"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
#  "/super-recipe/{recipeId}":
#    get:
#      tags:
#      - recipe
#      operationId: GetRecipeSuperobject
#      summary: Get the recipe object, and include the nutrition information for the
#        ingredients in this object.
#      parameters:
#      - in: path
#        description: Recipe ID
#        name: recipeId
#        required: true
#        type: integer
#      - application/json
#      responses:
#        '200':
#          description: Description was not specified
#          schema:
#            "$ref": "#/definitions/Recipe"
#        '400':
#          description: Description was not specified
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
  "/recipe/{recipeId}/ingredient-names":
    get:
      tags:
      - recipe
      operationId: GetRecipeIngredientNames
      summary: Get a list of the common names for a particular recipe
      parameters:
      - in: path
        description: Recipe ID
        name: recipeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            type: array
            items:
              type: string
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/recipe/{recipeId}/categories":
    get:
      tags:
      - recipe
      operationId: GetCategoriesForRecipe
      summary: Get a list of the categories the food belongs to
      parameters:
      - in: path
        description: Recipe ID
        name: recipeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            type: array
            items:
              type: string
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/nutrition-tip/{nutrientId}":
    get:
      tags:
      - nutrition
      operationId: GetNutritionTipsForNutrient
      summary: Get a list of the nutrient tips for a particular nutrient.
      parameters:
      - in: path
        description: The nutrient ID, either the nutrient ID number of the key name for the nutrient (string).
        name: nutrientId
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            type: array
            items:
              "$ref": "#/definitions/NutritionTip"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/recipe/{recipeId}":
    put:
      tags:
      - recipe
      operationId: SaveRecipe
      summary: Save changes to a recipe
      parameters:
      - in: path
        description: The recipe ID of the recipe you're updating, either the unique Recipe ID int64 or the oid string may be used here.
        name: recipeId
        required: true
        type: string
      - in: body
        description: The recipe to be saved.
        name: jsonBody
        required: true
        schema:
          "$ref": "#/definitions/Recipe"
      produces:
      - application/json
      responses:
        '200':
          description: No response was specified
          schema:
            "$ref": "#/definitions/Recipe"
        '201':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/Recipe"
        '401':
          description: Not logged in
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Recipe doesn't exist.
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
    delete:
      tags:
      - recipe
      operationId: DeleteRecipe
      summary: Remove one of your recipes
      parameters:
      - in: path
        description: Recipe ID
        name: recipeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIResponse"
        '401':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
    get:
      tags:
      - recipe
      operationId: GetRecipeByID
      summary: Get a recipe object and include the total recipe nutrition
      parameters:
      - in: path
        description: Recipe id
        name: recipeId
        required: true
        type: string
      - "$ref" : "#/parameters/includeNutritionParam"
      - "$ref" : "#/parameters/include-common-names"
      - "$ref" : "#/parameters/include-recipe-categories"
      - "$ref" : "#/parameters/include-nutrition-per-portion"
      - "$ref" : "#/parameters/include-gda"
      - "$ref" : "#/parameters/include-nutrition-tips"
      - "$ref" : "#/parameters/include-food-names"
      - "$ref" : "#/parameters/include-food-id"
      - "$ref" : "#/parameters/country"
      - "$ref" : "#/parameters/portionSize"
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/Recipe"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/recipe":
    get:
      tags:
      - recipe
      operationId: GetMyRecipes
      summary: Get all of the recipes owned by the currently logged in or authorised
        user. Include the recipe's nutrition per portion.
      parameters:
      - "$ref" : "#/parameters/includeNutritionParam"
      - "$ref" : "#/parameters/include-common-names"
      - "$ref" : "#/parameters/include-recipe-categories"
      - "$ref" : "#/parameters/include-nutrition-per-portion"
      - "$ref" : "#/parameters/include-gda"
      - "$ref" : "#/parameters/include-nutrition-tips"
      - "$ref" : "#/parameters/include-food-names"
      - "$ref" : "#/parameters/include-food-id"
      - "$ref" : "#/parameters/offset"
      - "$ref" : "#/parameters/limit"
      security:
      - chow_auth:
        - AuthRequired
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            type: array
            items:
              "$ref": "#/definitions/Recipe"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/recipe/{recipeId}/food":
    get:
      tags:
      - recipe
      operationId: GetRecipeFoodNames
      summary: Get a recipe object's food names
      parameters:
      - in: path
        description: Recipe id
        name: recipeId
        required: true
        type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            type: array
            items:
              "$ref": "#/definitions/FoodWithID"
        '400':
          description: Malformed recipe id
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Recipe doesn't exist.
          schema:
            "$ref": "#/definitions/HttpAPIError"
#  "/recipe/{recipeId}/ingredient/nutrition":
#    post:
#      tags:
#      - recipe
#      operationId: SaveIngredientToRecipe
#      summary: Adds new ingredients to a scratch recipe
#      parameters:
#      - in: path
#        description: The ID of the recipe you want to change
#        name: recipeId
#        required: true
#        type: integer
#        format: int64
#        minimum: 1
#      - in: body
#        description: The ingredient you want to add to the recipe
#        name: jsonBody
#        required: true
#        schema:
#          "$ref": "#/definitions/Ingredient"
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: The objects which new exist in the scratch pad recipe
#          schema:
#            type: array
#            items:
#              "$ref": "#/definitions/Ingredient"
#        '400':
#          description: Malformed JSON (this endpoint requires an array of strings
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
#      security:
#      - chow_auth:
#        - AuthRequired
  "/recipe/{recipeId}/ingredient/nutrition":
    get:
      tags:
      - recipe
      operationId: ListIngredientsWithNutrition
      summary: Get a list of ingredients in a recipe
      parameters:
      - in: path
        description: The recipe ID
        name: recipeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            type: array
            items:
              "$ref": "#/definitions/IngredientWithNutritionAbbrev"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
#  "/recipe/search-by-food-id/{foodIds}":
#    get:
#      tags:
#      - recipe
#      operationId: SearchRecipesByFoodIdsWithNutrition
#      summary: Search for recipes with particular ingredients
#      parameters:
#      - in: query
#        description: Search the recipe name, used as a wild card on the name column
#          like so; '%name%'
#        name: name
#        required: false
#        type: string
#      - in: path
#        description: A comma separated list of food IDs which each recipe MUST contain.
#        name: foodIds
#        required: true
#        type: string
#        minLength: 1
#      - name:   include-nutrition
#        in: query
#        description: Should the recipe's nutrition field be populated?
#        required: false
#        default: false
#        type: boolean
#      - in: query
#        description: Should the recipe's ingredient common names be included?
#        name: include-common-names
#        required: false
#        type: boolean
#      - in: query
#        description: Should the recipe's ingredient food names be included (this is
#          different from the common names since the storage is a map, where key is
#          the foodId and value is the ingredient common name)
#        name: include-food-names
#        required: false
#        type: boolean
#      - in: query
#        description: Should the recipe's ingredient food id's be included?
#        name: include-foodId
#        required: falsecategory
#        type: boolean
#      - in: query
#        description: The offset into search results.
#        name: offset
#        required: false
#        type: integer
#        format: int64
#        minimum: 0
#      - in: query
#        description: Limit the number of results returned.
#        name: limit
#        required: false
#        type: integer
#        format: int32
#        minimum: 0
#      - in: query
#        description: The nutrition field to sort by.
#        name: sortby
#        default: calories
#        type: string
#      - in: query
#        description: The sort direction for the results.
#        name: sortdir
#        default: desc
#        type: string
#      - "$ref" : "#/parameters/hasImage"
#      - "$ref" : "#/parameters/allowNumMissingIngredients"
#      responses:
#        '200':
#          description: Description was not specified
#          schema:
#            type: array
#            items:
#              "$ref": "#/definitions/Recipe"
#        '400':
#          description: Description was not specified
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
#  "/recipe/rss":
#    get:
#      produces:
#      - application/xml
#      tags:
#      - recipe
#      operationId: SearchRecipesAndOutputRss
#      summary: Produce a list of recipes, in xml/rss format.
#      parameters:
#      - "$ref" : "#/parameters/recipeName"
#      - "$ref" : "#/parameters/foodIds"
#      - "$ref" : "#/parameters/calories"
#      - "$ref" : "#/parameters/protein"
#      - "$ref" : "#/parameters/total-fat"
#      - "$ref" : "#/parameters/vegetarian"
#      - "$ref" : "#/parameters/vegan-friendly"
#      - "$ref" : "#/parameters/pescatarian"
#      - "$ref" : "#/parameters/gluten-free"
#      - "$ref" : "#/parameters/quick-and-easy"
#      - "$ref" : "#/parameters/low-fat"
#      - "$ref" : "#/parameters/low-sugar"
#      - "$ref" : "#/parameters/low-sat-fat"
#      - "$ref" : "#/parameters/has-nuts"
#      - "$ref" : "#/parameters/has-eggs"
#      - "$ref" : "#/parameters/has-sugar"
#      - "$ref" : "#/parameters/has-fruit"
#      - "$ref" : "#/parameters/has-dairy"
#      - "$ref" : "#/parameters/has-meat"
#      - "$ref" : "#/parameters/has-ceral"
#      - "$ref" : "#/parameters/has-alcohol"
#      - "$ref" : "#/parameters/sweet-food"
#      - "$ref" : "#/parameters/is-dinner"
#      - "$ref" : "#/parameters/is-condiment"
#      - "$ref" : "#/parameters/savory-food"
#      - "$ref" : "#/parameters/includeNutritionParam"
#      - "$ref" : "#/parameters/include-common-names"
#      - "$ref" : "#/parameters/include-recipe-categories"
#      - "$ref" : "#/parameters/include-nutrition-per-portion"
#      - "$ref" : "#/parameters/include-gda"
#      - "$ref" : "#/parameters/include-nutrition-tips"
#      - "$ref" : "#/parameters/include-food-names"
#      - "$ref" : "#/parameters/include-food-id"
#      - "$ref" : "#/parameters/offset"
#      - "$ref" : "#/parameters/ownerId"
#      - "$ref" : "#/parameters/ownerHandle"
#      - "$ref" : "#/parameters/limit"
#      - "$ref" : "#/parameters/recipeSortby"
#      - "$ref" : "#/parameters/sortdir"
#      - "$ref" : "#/parameters/hasImage"
#      - "$ref" : "#/parameters/allowNumMissingIngredients"
#      responses:
#        '200':
#          description: Description was not specified
#          schema:
#            type: array
#            items:
#              "$ref": "#/definitions/Recipe"
#        '400':
#          description: Description was not specified
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
  "/recipe/search":
    get:
      produces:
      - application/json
      tags:
      - recipe
      operationId: PagedSearchRecipes
      summary: Search for recipes, and include paging info in the response.
      parameters:
      - "$ref" : "#/parameters/recipeName"
      - "$ref" : "#/parameters/foodIds"
      - "$ref" : "#/parameters/calories"
      - "$ref" : "#/parameters/protein"
      - "$ref" : "#/parameters/total-fat"
      - "$ref" : "#/parameters/vegetarian"
      - "$ref" : "#/parameters/vegan-friendly"
      - "$ref" : "#/parameters/pescatarian"
      - "$ref" : "#/parameters/gluten-free"
      - "$ref" : "#/parameters/quick-and-easy"
      - "$ref" : "#/parameters/low-fat"
      - "$ref" : "#/parameters/low-sugar"
      - "$ref" : "#/parameters/low-sat-fat"
      - "$ref" : "#/parameters/has-nuts"
      - "$ref" : "#/parameters/has-eggs"
      - "$ref" : "#/parameters/has-sugar"
      - "$ref" : "#/parameters/has-fruit"
      - "$ref" : "#/parameters/has-dairy"
      - "$ref" : "#/parameters/has-meat"
      - "$ref" : "#/parameters/has-ceral"
      - "$ref" : "#/parameters/has-alcohol"
      - "$ref" : "#/parameters/sweet-food"
      - "$ref" : "#/parameters/is-dinner"
      - "$ref" : "#/parameters/is-condiment"
      - "$ref" : "#/parameters/savory-food"
      - "$ref" : "#/parameters/includeNutritionParam"
      - "$ref" : "#/parameters/include-common-names"
      - "$ref" : "#/parameters/include-recipe-categories"
      - "$ref" : "#/parameters/include-nutrition-per-portion"
      - "$ref" : "#/parameters/include-gda"
      - "$ref" : "#/parameters/include-nutrition-tips"
      - "$ref" : "#/parameters/include-food-names"
      - "$ref" : "#/parameters/include-food-id"
      - "$ref" : "#/parameters/offset"
      - "$ref" : "#/parameters/ownerId"
      - "$ref" : "#/parameters/ownerHandle"
      - "$ref" : "#/parameters/limit"
      - "$ref" : "#/parameters/recipeSortby"
      - "$ref" : "#/parameters/sortdir"
      - "$ref" : "#/parameters/hasImage"
      - "$ref" : "#/parameters/allowNumMissingIngredients"
      - "$ref" : "#/parameters/nutritionSortby"
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/PagedRecipeResults"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/recipe/narrow-search":
    get:
      produces:
      - application/json
      tags:
      - recipe
      operationId: NarrowSearchRecipe
      summary: Search for recipe data, and receive only specific fields back. Nutritional information isn't available, as only the Recipe object is included in searches and response.
      parameters:
      - "$ref" : "#/parameters/recipeName"
      - "$ref" : "#/parameters/offset"
      - "$ref" : "#/parameters/ownerId"
      - "$ref" : "#/parameters/ownerHandle"
      - "$ref" : "#/parameters/limit"
      - "$ref" : "#/parameters/narrowRecipeSortby"
      - "$ref" : "#/parameters/sortdir"
      - "$ref" : "#/parameters/responseFields"
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/PagedRecipeResults"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/recipe/latest":
    get:
      tags:
      - recipe
      operationId: LatestRecipes
      summary: Get the latest recipe object (with nutrition data), and include the
        nutrition information for the ingredients in this object.
      parameters:
      - "$ref" : "#/parameters/includeNutritionParam"
      - "$ref" : "#/parameters/include-common-names"
      - "$ref" : "#/parameters/include-recipe-categories"
      - "$ref" : "#/parameters/include-nutrition-per-portion"
      - "$ref" : "#/parameters/include-gda"
      - "$ref" : "#/parameters/include-nutrition-tips"
      - "$ref" : "#/parameters/include-food-names"
      - "$ref" : "#/parameters/include-food-id"
      - "$ref" : "#/parameters/offset"
      - "$ref" : "#/parameters/limit"
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            type: array
            items:
              "$ref": "#/definitions/Recipe"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/recipe/{recipeId}/ingredient/{ingredient-id}":
    get:
      tags:
      - recipe
      operationId: GetIngredientFromRecipeWithNutrition
      summary: Get a particular ingredient in a recipe.
      parameters:
      - in: path
        description: The recipe ID
        name: recipeId
        required: true
        type: string
      - in: path
        description: The ingredient ID, if you want a particular ingredient in the
          recipe.
        name: ingredient-id
        required: true
        type: integer
        format: int64
        minimum: 1
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/IngredientWithNutritionAbbrev"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
    put:
      tags:
      - recipe
      operationId: SaveChangesForIngredient
      summary: Make changes to a particular ingredient in a recipe.
      parameters:
      - in: path
        description: The recipe ID
        name: recipeId
        required: true
        type: string
      - in: path
        description: The ingredient ID for the ingredient being edited.
        name: ingredient-id
        required: true
        type: integer
        format: int64
        minimum: 1
      - in: body
        description: The recipe ID
        name: recipeIngredients
        required: true
        schema:
          type: array
          items:
            "$ref": "#/definitions/Ingredient"
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            type: array
            items:
              "$ref": "#/definitions/Ingredient"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
    delete:
      tags:
      - recipe
      operationId: DeleteIngredientFromRecipe
      summary: Delete an ingredient from a recipe.
      parameters:
      - in: path
        description: The recipe ID
        name: recipeId
        required: true
        type: string
      - in: path
        description: The ingredient ID for the ingredient being edited.
        name: ingredient-id
        required: true
        type: integer
        format: int64
        minimum: 1
      produces:
      - application/json
      responses:
        '201':
          description: Ingredient successfully deleted.
          schema:
            type: string
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/recipe/{recipeId}/ingredient":
    get:
      tags:
      - recipe
      operationId: GetIngredientsForRecipe
      summary: Get a particular recipe's ingredients.
      parameters:
      - in: path
        description: The recipe ID
        name: recipeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            type: array
            items:
              "$ref": "#/definitions/Ingredient"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
    post:
      tags:
      - recipe
      operationId: AddIngredientsToRecipe
      summary: Save a particular recipe's ingredients en masse
      parameters:
      - in: path
        description: The recipe ID
        name: recipeId
        required: true
        type: string
      - in: body
        description: The recipe ID
        name: recipeIngredients
        required: true
        schema:
          type: array
          items:
            "$ref": "#/definitions/Ingredient"
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            type: array
            items:
              "$ref": "#/definitions/Ingredient"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
    put:
      tags:
      - recipe
      operationId: EditIngredientForRecipe
      summary: Save a particular recipe's ingredients en masse
      parameters:
      - in: path
        description: The recipe ID
        name: recipeId
        required: true
        type: string
      - in: body
        description: The recipe ID
        name: recipeIngredients
        required: true
        schema:
          type: array
          items:
            "$ref": "#/definitions/Ingredient"
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            type: array
            items:
              "$ref": "#/definitions/Ingredient"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/scratch-recipe/{recipeId}":
    post:
      tags:
      - scratch-recipe
      operationId: PutScratchPadRecipe
      summary: Save changes to a scratch pad recipe
      parameters:
      - in: path
        description: The ID of the scratch pad recipe you want to change
        name: recipeId
        required: true
        type: string
      - in: body
        description: The recipe data to be changed.
        name: jsonBody
        required: true
        schema:
          "$ref": "#/definitions/Recipe"
      produces:
      - application/json
      responses:
        '200':
          description: The recipe object with your changes.
          schema:
            "$ref": "#/definitions/Recipe"
        '400':
          description: Malformed JSON (this endpoint requires an array of strings
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
    delete:
      tags:
      - scratch-recipe
      operationId: DeleteScratchPadRecipe
      summary: Delete a scratch pad recipe
      parameters:
      - in: path
        description: The ID of the recipe you want to delete
        name: recipeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIResponse"
        '400':
          description: Malformed JSON (this endpoint requires an array of strings
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
    get:
      tags:
      - scratch-recipe
      operationId: GetAllMyScratchRecipesSingular
      summary: Get a specific scratch pad recipe
      parameters:
      - in: path
        description: The ID of the recipe that you want to fetch
        name: recipeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Fetch a recipe from the scratch pad.
          schema:
            "$ref": "#/definitions/Recipe"
        '400':
          description: Malformed JSON (this endpoint requires an array of strings
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Malformed JSON (this endpoint requires an array of strings
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
  "/scratch-recipe/{recipeId}/ingredient/{ingredient-id}":
    put:
      tags:
      - scratch-recipe
      operationId: ChangeIngredientForScratchPadRecipe
      summary: Adds new ingredients to a scratch recipe
      parameters:
      - in: path
        description: The ID of the scratch pad recipe you want to change
        name: recipeId
        required: true
        type: string
      - in: path
        description: The ID of the ingredient you want to make changes to.
        name: ingredient-id
        required: true
        type: integer
        format: int64
        minimum: 1
      - in: body
        description: The ingredient to be changed
        name: jsonBody
        required: true
        schema:
          "$ref": "#/definitions/Ingredient"
      produces:
      - application/json
      responses:
        '200':
          description: The object which was changed
          schema:
            "$ref": "#/definitions/Ingredient"
        '400':
          description: Malformed JSON (this endpoint requires an array of strings
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Malformed JSON (this endpoint requires an array of strings
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
    delete:
      tags:
      - scratch-recipe
      operationId: RemoveIngredientFromScratchPadRecipe
      summary: Removes an ingredient from a scratch recipe
      parameters:
      - in: path
        description: The ID of the recipe that the ingredient belongs to
        name: recipeId
        required: true
        type: string
      - in: path
        description: The ID of the ingredient that you want to delete
        name: ingredient-id
        required: true
        type: integer
        format: int64
        minimum: 1
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIResponse"
        '400':
          description: Malformed JSON (this endpoint requires an array of strings
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
  "/scratch-recipe/{recipeId}/ingredient":
    post:
      tags:
      - scratch-recipe
      operationId: SaveIngredientsInScratchRecipe
      summary: Adds new ingredients to a scratch recipe
      parameters:
      - in: path
        description: The ID of the recipe you want to change
        name: recipeId
        required: true
        type: string
      - in: body
        description: The ingredient to be added to the recipe.
        name: jsonBody
        required: true
        schema:
          type: array
          items:
            "$ref": "#/definitions/Ingredient"
      produces:
      - application/json
      responses:
        '200':
          description: The objects which new exist in the scratch pad recipe
          schema:
            type: array
            items:
              "$ref": "#/definitions/Ingredient"
        '400':
          description: Malformed JSON (this endpoint requires an array of strings
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
  "/scratch-recipe/{recipeId}/ingredient-names":
    get:
      tags:
      - scratch-recipe
      operationId: GetScratchRecipeIngredientNames
      summary: Get a list of the common names for a particular recipe
      parameters:
      - in: path
        description: Recipe ID
        name: recipeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            type: array
            items:
              type: string
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '403':
          description: You're not the recipe owner.
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
  "/scratch-recipe/{recipeId}/nutrition":
    get:
      tags:
      - scratch-recipe
      operationId: GetNutritionForSpecificScratchRecipe
      summary: Get the nutritional information for a specific Scratch Recipe
      parameters:
      - in: path
        description: The ID of the recipe that you want to change
        name: recipeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Fetch a recipe from the scratch pad, and include the recipe's
            total nutrition.
          schema:
            "$ref": "#/definitions/Recipe"
        '400':
          description: Malformed JSON (this endpoint requires an array of strings
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '403':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
  "/scratch-recipe/nutrition":
    get:
      tags:
      - scratch-recipe
      operationId: GetAllMyScratchRecipesAndNutrition
      summary: Get all of my scratch recipes, including the nutrition for the recipe
      parameters:
      - "$ref" : "#/parameters/includeNutritionParam"
      - "$ref" : "#/parameters/include-common-names"
      - "$ref" : "#/parameters/include-recipe-categories"
      - "$ref" : "#/parameters/include-nutrition-per-portion"
      - "$ref" : "#/parameters/include-gda"
      - "$ref" : "#/parameters/include-nutrition-tips"
      - "$ref" : "#/parameters/include-food-names"
      - "$ref" : "#/parameters/include-food-id"
      - "$ref" : "#/parameters/offset"
      - "$ref" : "#/parameters/limit"
      produces:
      - application/json
      responses:
        '200':
          description: Retreives a list of the currenty logged in user's scratch pad
          schema:
            type: array
            items:
              "$ref": "#/definitions/Recipe"
        '400':
          description: Malformed JSON (this endpoint requires an array of strings
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '403':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
  "/scratch-recipe":
    get:
      tags:
      - scratch-recipe
      operationId: GetAllMyScratchRecipes
      summary: Get all of my scratch recipes
      parameters:
      - "$ref" : "#/parameters/includeNutritionParam"
      - "$ref" : "#/parameters/include-common-names"
      - "$ref" : "#/parameters/include-recipe-categories"
      - "$ref" : "#/parameters/include-nutrition-per-portion"
      - "$ref" : "#/parameters/include-gda"
      - "$ref" : "#/parameters/include-nutrition-tips"
      - "$ref" : "#/parameters/include-food-names"
      - "$ref" : "#/parameters/include-food-id"
      - "$ref" : "#/parameters/offset"
      - "$ref" : "#/parameters/limit"
      produces:
      - application/json
      responses:
        '200':
          description: Retreives a list of the currenty logged in user's scratch pad
          schema:
            type: array
            items:
              "$ref": "#/definitions/Recipe"
        '400':
          description: Malformed JSON (this endpoint requires an array of strings
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '403':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
    post:
      tags:
      - scratch-recipe
      operationId: CreateAScratchPadRecipe
      summary: Create a temp recipe from plain english ingredients.
      parameters:
      - in: body
        description: The recipe to be created.
        name: jsonBody
        required: true
        schema:
          "$ref": "#/definitions/Recipe"
      produces:
      - application/json
      responses:
        '200':
          description: Retreives a list of ingredients, including the nutritional
            content of the ingredient
          schema:
            "$ref": "#/definitions/Recipe"
        '400':
          description: Malformed JSON (this endpoint requires an array of strings
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '403':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
  "/menu-item/{menuItemId}":
    get:
      tags:
      - recipe-group
      operationId: GetSingleMenuItem
      summary: Get a single menu item by its primary key.
      parameters:
      - in: path
        description: The id of the menu item to be fetched.
        name: menuItemId
        required: true
        type: integer
        format: int64
        minimum: 1
      - "$ref" : "#/parameters/include-recipe"
      produces:
      - application/json
      responses:
        '200':
          description: The meu item to be fetched.
          schema:
            "$ref": "#/definitions/MenuItem"
        '400':
          description: Description was not specified.
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Menu item not found.
          schema:
            "$ref": "#/definitions/HttpAPIError"
    put:
      tags:
      - recipe-group
      operationId: PutMenuItem
      summary: Make changes to a menu item already in the database
      parameters:
      - in: path
        description: The menu item ID of the item you want to change.
        name: menuItemId
        required: true
        type: integer
        format: int64
      - in: body
        description: The menu item data to be changed.
        name: jsonBody
        required: true
        schema:
          "$ref": "#/definitions/MenuItem"
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/MenuItem"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '401':
          description: Only a recipe group owner can make changes to a recipe group.
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Group ID not found
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
    delete:
      tags:
      - recipe-group
      operationId: DeleteMenuItem
      summary: Delete a menu item
      parameters:
      - in: path
        description: The primary key of the menu item to be deleted.
        required: true
        name: menuItemId
        type: integer
        format: int64
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/MenuItem"
        '403':
          description: You're not the group owner.
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Menu item doesn't exist
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
  "/menu-item/{menuItemId}/add-recipe-id/{recipeId}":
    put:
      tags:
      - recipe-group
      operationId: ChangeAMenuItemsRecipeId
      summary: Change a menu item's recipe id.
      parameters:
      - in: path
        description: The id of the menu item to be change.
        name: menuItemId
        required: true
        type: integer
        format: int64
        minimum: 1
      - in: path
        description: The recipe id to be assigned.
        name: recipeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: The meu item to be fetched.
          schema:
            "$ref": "#/definitions/MenuItem"
        '400':
          description: Description was not specified.
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Menu item or recipe id not found.
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/recipe-group/{recipeGroupId}/menu-items":
    get:
      tags:
      - recipe-group
      operationId: GetMenuItemsInRecipeGroup
      summary: Get the menu items in the recipe group
      parameters:
      - in: path
        description: The group ID required
        name: recipeGroupId
        required: true
        type: integer
        format: int64
        minimum: 1
      - "$ref" : "#/parameters/include-recipe"
      produces:
      - application/json
      responses:
        '200':
          description: The menu items in the group
          schema:
            type: array
            items:
              "$ref": "#/definitions/MenuItem"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
    post:
      tags:
      - recipe-group
      operationId: PostMenuItem
      summary: Add a menu item to a recipe group.
      parameters:
      - in: path
        description: The group ID required
        name: recipeGroupId
        required: true
        type: integer
        format: int64
        minimum: 1
      - in: body
        description: The recipe group data. Some additional parameters are provide finer control over the recipe group insertion. Such as overwriting a previous slug, making sure only one ever exists, or is inserted. The maximum number of menu-items per recipe group is 100.
        name: jsonBody
        required: true
        schema:
          "$ref": "#/definitions/MenuItem"
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/MenuItem"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Recipe group not found
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
  "/rda/{country}":
    get:
      tags:
      - rda
      operationId: GetRDAData
      summary: Get the rating for a recipe, by it's id
      parameters:
      - in: path
        description: The country code which the RDA should reflect.
        name: country
        default: uk
        required: true
        type: string
        minLength: 1
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/RDA"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
#  "/available-recipes/{foodids}":
#    get:
#      tags:
#      - availables-recipes
#      operationId: AvailableRecipes
#      summary: Find recipes which contain the supplied food ids
#      parameters:
#      - in: path
#        description: A comma deliminated list of Food IDs
#        name: foodids
#        required: true
#        type: string
#        minLength: 1
#      - in: query
#        description: A term to be used for searching in the recipe name.
#        name: searchterm
#        required: false
#        type: string
#        minLength: 1
#      - "$ref" : "#/parameters/includeNutritionParam"
#      - "$ref" : "#/parameters/include-common-names"
#      - "$ref" : "#/parameters/include-recipe-categories"
#      - "$ref" : "#/parameters/include-nutrition-per-portion"
#      - "$ref" : "#/parameters/include-gda"
#      - "$ref" : "#/parameters/include-nutrition-tips"
#      - "$ref" : "#/parameters/include-food-names"
#      - "$ref" : "#/parameters/include-food-id"
#      - "$ref" : "#/parameters/offset"
#      - "$ref" : "#/parameters/limit"
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: Description was not specified
#          schema:
#            type: array
#            items:
#              "$ref": "#/definitions/Recipe"
#        '400':
#          description: Description was not specified
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
  "/fav-recipe":
    get:
      tags:
      - fav-recipe
      operationId: FavoriteRecipes
      summary: List the logged in user's fav recipes.
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            type: array
            items:
              "$ref": "#/definitions/FavRecipe"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
    post:
      tags:
      - fav-recipe
      operationId: FavoriteARecipe
      summary: Favorite a recipe
      parameters:
      - in: body
        description: The recipe information (either the recipe's url or the recipeId
          from the cheerychow DB) you want to favourite..
        name: jsonBody
        required: true
        schema:
          "$ref": "#/definitions/FavRecipe"
      produces:
      - application/json
      responses:
        '201':
          description: Object created.
          schema:
            "$ref": "#/definitions/FavRecipe"
        '400':
          description: Either a recipe id or a recipe url is needed
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Recipe doesn't exist.
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
  "/fav-recipe/by-id/{fav-recipeId}":
    delete:
      tags:
      - fav-recipe
      operationId: UnfavoriteARecipeByID
      summary: Remove a favorite recipe entry into the database, for a particular
        recipe.
      parameters:
      - in: path
        description: Favorite recipe ID to be deleted
        name: fav-recipeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIResponse"
        '404':
          description: Fav recipe not found
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
  "/fav-recipe/by-recipe-id/{recipeId}":
    delete:
      tags:
      - fav-recipe
      operationId: UnfavoriteARecipeByRecipeID
      summary: Remove a favorite recipe entry into the database, for a particular
        recipe.
      parameters:
      - in: path
        description: The recipe ID to be unfavourited.
        name: recipeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIResponse"
        '404':
          description: Fav recipe not found
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
  "/fav-recipe/by-recipe-url/{recipe-url}":
    delete:
      tags:
      - fav-recipe
      operationId: UnfavoriteRecipeByUrl
      summary: Remove3 a favorite recipe entry into the database, for a particular
        recipe.
      parameters:
      - in: path
        description: The recipe url you want to unfavourite.
        name: recipe-url
        required: true
        type: string
        minLength: 5
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIResponse"
        '404':
          description: Fav recipe not found
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '400':
          description: Invalid url
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
#  "/alternatives/recipe/summary/{recipeId}":
#    get:
#      tags:
#      - alternatives
#      operationId: ListAlternativeIngredientsForRecipe
#      summary: List similar foods
#      parameters:
#      - in: path
#        description: The recipe ID of the object you want to fetch.
#        name: recipeId
#        required: true
#        type: string
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: Description was not specified
#          schema:
#            type: array
#            items:
#              "$ref": "#/definitions/NutritionAbbrev"
#        '400':
#          description: Description was not specified
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
#  "/alternatives/nutrients/{foodId}/{amount}":
#    get:
#      tags:
#      - alternatives
#      operationId: GetFoodAlternativesNutritionAndAmount
#      summary: List similar foods, include nutrition
#      parameters:
#      - in: path
#        description: 'Food ID you want the alternative foods for Example: 1'
#        name: foodId
#        required: true
#        type: integer
#        format: int32
#        minimum: 1
#      - in: path
#        description: 'The amount in grams you want the nutritional information to
#          be based on Example: 58'
#        name: amount
#        required: true
#        type: number
#        format: float
#        minimum: 1
#      - in: query
#        description: 'Which model column do you want to sort by Example: calories'
#        name: sort-by
#        required: false
#        default: calories
#        type: string
#      - in: query
#        description: 'The direction that you want the sort to occur Example: asc'
#        name: desc
#        default: desc
#        required: false
#        type: string
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: Description was not specified
#          schema:
#            type: array
#            items:
#              "$ref": "#/definitions/NutritionAbbrev"
#        '400':
#          description: Description was not specified
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
#  "/alternatives/nutrients/{foodId}":
#    get:
#      tags:
#      - alternatives
#      operationId: GetFoodAlternativesNutrition
#      summary: List similar foods, include nutrition
#      parameters:
#      - in: path
#        description: 'Food ID you want the alternative foods for Example: 1'
#        name: foodId
#        required: true
#        type: integer
#        format: int32
#        minimum: 1
#      - in: path
#        description: The amount, in grams, of food to compare. Defaults to 100g.
#        name: amount
#        required: true
#        type: number
#        format: float
#        minimum: 1
#      - in: query
#        description: 'Which model column do you want to sort by Example: calories'
#        name: sort-by
#        default: food_id
#        required: false
#        type: string
#      - in: query
#        description: 'The direction that you want the sort to occur Example: asc'
#        name: desc
#        default: desc
#        required: false
#        type: string
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: Description was not specified
#          schema:
#            type: array
#            items:
#              "$ref": "#/definitions/NutritionAbbrevWithName"
#        '400':
#          description: Description was not specified
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
#  "/alternatives/foodnames/{food_id}":
#    get:
#      tags:
#      - alternatives
#      operationId: ListAlternativeFoodnames
#      summary: List similar foods
#      parameters:
#      - in: path
#        description: 'Food ID you want the alternative foods for Example: 1'
#        name: food_id
#        required: true
#        type: integer
#        format: int32
#        minimum: 1
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: Description was not specified
#          schema:
#            type: object
#            additionalProperties:
#              type: string
#        '400':
#          description: Description was not specified
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
  "/parse/via-url/recipe":
    post:
      tags:
      - parse
      operationId: ParseRecipeByUrlPost
      summary: Takes a URL of a recipe on the internet, a sous bot will parse it (if
        it can), and then spit out a recipe object as the result.
      parameters:
      - in: body
        description: A url to a recipe, which a sous bot will download and attempt,
          as best it can to parse into a recipe object and a list of ingredients.
        name: jsonBody
        required: true
        schema:
          "$ref": "#/definitions/PlainString"
      produces:
      - application/json
      responses:
        '200':
          description: No response was specified
          schema:
            "$ref": "#/definitions/Recipe"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
  "/parse/via-url/recipe/{recipe-url}":
    get:
      tags:
      - parse
      operationId: ParseRecipeByUrlGet
      summary: Takes a URL of a recipe on the internet, a sous bot will parse it (if
        it can), and then spit out a recipe object as the result.
      parameters:
      - in: path
        description: A url to a recipe, which a sous bot will download and attempt,
          as best it can to parse into a recipe object and a list of ingredients.
        name: recipe-url
        required: true
        type: string
        minLength: 1
      produces:
      - application/json
      responses:
        '200':
          description: No response was specified
          schema:
            "$ref": "#/definitions/Recipe"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/parse/via-page-content/recipe":
    post:
      tags:
      - parse
      operationId: ParseRecipeViaPageContent
      summary: Takes a URL of a recipe on the internet, a sous bot will parse it (if
        it can), and then spit out a recipe object as the result.
      parameters:
      - in: body
        description: An object describing a recipe to be parsed into seperate ingredients.
        name: jsonBody
        required: true
        schema:
          "$ref": "#/definitions/RecipeParseRequest"
      produces:
      - application/json
      responses:
        '200':
          description: New recipe object parsed.
          schema:
            "$ref": "#/definitions/Recipe"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
#  "/parse/single-ingredient":
#    post:
#      tags:
#      - parse
#      operationId: ParseSinglePlainTextIngredient
#      summary: Parse a single ingredient
#      parameters:
#      - in: body
#        description: A simple endpoint which accepts a JSON array containing 1 plain
#          english ingredient. And returns only the parsed ingredient object instead
#          of a recipe object.
#        name: jsonBody
#        required: true
#        schema:
#          "$ref": "#/definitions/PlainString"
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: 'Retrieves a list of ingredients, including the nutritional content of the ingredient. The list of ingredients is contained within a standard RecipeWithFood object. WARNING: This assumes a number of portions=1. You'll need to divide up the values received in this object to find the actual nutrition per portion.'
#          schema:
#            "$ref": "#/definitions/Ingredient"
#        '400':
#          description: Only 1 ingredient line is supported.
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
#      security:
#      - chow_auth:
#        - AuthRequired
#  "/parse/single-ingredient/debug":
#    post:
#      tags:
#      - parse
#      operationId: ParseSinglePlainTextIngredientIncludeDebug
#      summary: Parse a single ingredient
#      parameters:
#      - in: body
#        description: A simple endpoint which accepts a JSON array containing 1 plain
#          english ingredient. And returns only the parsed ingredient object instead
#          of a recipe object.
#        name: jsonBody
#        required: true
#        schema:
#          "$ref": "#/definitions/PlainString"
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: Returns the output from the sous bot, and how it derived an
#            ingredient's value from a line of text.
#          schema:
#            "$ref": "#/definitions/IngredientDebug"
#        '400':
#          description: Malformed JSON (this endpoint requires an array of strings)
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
#      security:
#      - chow_auth:
#        - AuthRequired
  "/parse/ingredients/{ingredient-line}":
    get:
      tags:
      - parse
      operationId: ParseSinglePlainTextIngredientLineRequest
      summary: Retrieves a list of ingredients and nutritional info.
      parameters:
      - in: path
        description: Comma separated plain text list of ingredients to parse
        name: ingredient-line
        required: true
        type: string
        minLength: 1
      produces:
      - application/json
      responses:
        '200':
          description: Retrieves a list of ingredients, including the nutritional
            content of the ingredient
          schema:
            type: array
            items:
              "$ref": "#/definitions/IngredientDebug"
        '400':
          description: Malformed JSON (this endpoint requires an array of strings)
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/debug/parse/ingredients":
    post:
      tags:
      - parse
      operationId: ParseManyPlainTextIngredientLineRequest
      summary: Retrieves a list of ingredients and nutritional info.
      parameters:
      - in: body
        description: A JSON array of plain english ingredients.
        name: jsonBody
        required: true
        schema:
          type: array
          items:
            type: string
      produces:
      - application/json
      responses:
        '200':
          description: Retrieves a list of ingredients, including the nutritional
            content of the ingredient
          schema:
            type: array
            items:
              "$ref": "#/definitions/IngredientDebug"
        '400':
          description: Malformed JSON (this endpoint requires an array of strings)
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/parse/ingredients":
    post:
      tags:
      - parse
      operationId: ParsePlainTextIngredientLines
      summary: Retrieves a list of ingredients and nutritional info.
      parameters:
      - in: body
        description: A JSON array of plain english ingredients.
        name: jsonBody
        required: true
        schema:
          type: array
          items:
            type: string
      - "$ref" : "#/parameters/includeNutritionParam"
      - "$ref" : "#/parameters/include-common-names"
      - "$ref" : "#/parameters/include-recipe-categories"
      - "$ref" : "#/parameters/include-nutrition-per-portion"
      - "$ref" : "#/parameters/include-gda"
      - "$ref" : "#/parameters/include-nutrition-tips"
      - "$ref" : "#/parameters/include-food-names"
      - "$ref" : "#/parameters/include-food-id"
      - "$ref" : "#/parameters/country"
      - "$ref" : "#/parameters/portions"
      - "$ref" : "#/parameters/portionSize"
      produces:
      - application/json
      responses:
        '200':
          description: Retrieves a list of ingredients, including the nutritional content of the ingredient. The list of ingredients is contained within a standard RecipeWithFood object. WARNING- This assumes a number of portions=1. You'll need to divide up the values received in this object to find the actual nutrition per portion.
          schema:
            "$ref": "#/definitions/Recipe"
        '400':
          description: Malformed JSON (this endpoint requires an array of strings)
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
  "/parse/nutrition/ingredient/{ingredient-line}":
    get:
      tags:
      - parse
      operationId: GetNutritionForSingleParsedPlainTextIngredient
      summary: Retrieves a list of ingredients and nutritional info.
      parameters:
      - in: path
        description: Comma separated plain text list of ingredients to parse
        name: ingredient-line
        required: true
        type: string
        minLength: 1
      produces:
      - application/json
      responses:
        '200':
          description: Send a single (or comma seperated many) ingredient line to be parsed, and the ingredient along with the calculated nutrition information for the amount of food identified.
          schema:
            type: array
            items:
              "$ref": "#/definitions/IngredientWithNutritionAbbrev"
        '400':
          description: Malformed JSON (this endpoint requires an array of strings)
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
  "/parse/notify-error/{parsedId}":
    get:
      tags:
      - parse
      operationId: IncorrectIngredientParsing
      summary: A human can notify the server when a parsed ingredient is wrong.
      parameters:
      - in: path
        description: The parsed ID, which is either the ingredient object's IngredientID or the ParsedID of the ingredient.
        name: parsedId
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Notification received
  "/recipe-group/{recipeGroupId}":
    get:
      tags:
      - recipe-group
      operationId: GetSingleRecipeGroup
      summary: Get a recipe group by its ID.
      parameters:
      - in: path
        description: The group ID required
        name: recipeGroupId
        required: true
        type: integer
        format: int64
        minimum: 1
      - "$ref" : "#/parameters/include-menu-items"
      - "$ref" : "#/parameters/include-recipe"
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/RecipeGroup"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
    put:
      tags:
      - recipe-group
      operationId: PutRecipeGroup
      summary: Save changes to a recipe group.
      parameters:
      - in: path
        description: The group ID required
        name: recipeGroupId
        required: true
        type: integer
        format: int64
        minimum: 1
      - in: body
        description: The recipe group object.
        name: jsonBody
        required: true
        schema:
          "$ref": "#/definitions/RecipeGroup"
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/RecipeGroup"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
    delete:
      tags:
      - recipe-group
      operationId: DeleteRecipeGroup
      summary: Delete a recipe group. WARNING. Deleting a group results in all of the recipe group's child menu item's being deleted too.
      parameters:
      - in: path
        description: Rating out of 5
        name: recipeGroupId
        required: true
        type: integer
        format: int64
        minimum: 1
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/RecipeGroup"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '403':
          description: You're not the group owner.
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: You're not the group owner.
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
  "/recipe-group":
    get:
      tags:
      - recipe-group
      operationId: GetRecipeGroups
      summary: Search for recipe groups.
      parameters:
      - in: query
        description: The slug to search for. You can include a comma seperated list of slugs to perform an OR search on each one.
        name: slug
        required: false
        type: string
      - in: query
        description: Find recipe groups by category.
        name: category
        required: false
        type: string
      - in: query
        description: Find recipe group by reference ID. When this parameter is included included in the query, a preceeding =, >=, <=, >, < or != must be included to indicate how the searching should be done.
        name: reference_id
        required: false
        type: string
      - in: query
        description: Find recipe groups's g3r
         to the user. This will only provided publicly available lists. The API also needs a user id to search against, which can either be this value, or the logged in user's id (i.e. searching for their own).
        name: userId
        required: false
        type: integer
        format: int64
      - "$ref" : "#/parameters/include-menu-items"
      - "$ref" : "#/parameters/include-recipe"
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            type: array
            items:
              "$ref": "#/definitions/RecipeGroup"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_optional_auth:
        - AuthOptional
    post:
      tags:
      - recipe-group
      operationId: PostRecipeGroup
      summary: Create a new recipe group.
      parameters:
      - in: body
        description: 'The recipe group data. Some additional parameters are provide
          finer control over the recipe group insertion. Such as overwriting a previous
          slug, making sure only one ever exists, or is inserted '
        name: jsonBody
        required: true
        schema:
          "$ref": "#/definitions/RecipeGroup"
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/RecipeGroup"
        '201':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/RecipeGroup"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
  "/recipe-group/my-recipes/{recipeId}":
    get:
      tags:
      - recipe-group
      operationId: SearchMyRecipeGroupForRecipe
      summary: Search the logged in user's recipe groups for a particular recipe.
      parameters:
      - in: path
        description: The recipe ID to fetch
        name: recipeId
        required: true
        type: string
      - "$ref" : "#/parameters/include-menu-items"
      - "$ref" : "#/parameters/include-recipe"
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            type: array
            items:
              "$ref": "#/definitions/RecipeGroup"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
  "/recipe-group-and-menu-items":
    get:
      tags:
      - recipe-group
      operationId: GetRecipeGroupsAndRecipes
      summary: Search recipe groups.
      security:
      - chow_optional_auth:
        - AuthOptional
      parameters:
      - in: query
        description: The slug to search for. You can include a comma seperated list of slugs to perform on OR search on each one.
        name: slug
        required: false
        type: string
      - in: query
        description: Find recipe groups by category.
        name: category
        required: false
        type: string
      - "$ref" : "#/parameters/include-recipe"
      - "$ref" : "#/parameters/ownerId"
      - "$ref" : "#/parameters/include-menu-items"
      - "$ref" : "#/parameters/limit"
      - "$ref" : "#/parameters/offset"
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            type: array
            items:
              "$ref": "#/definitions/RecipeGroup"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/recipe-group-and-menu-item":
    post:
      tags:
      - recipe-group
      operationId: PostRecipeGroupAndMenuItem
      summary: Add a menu item (or a recipe) to a new recipe group.
      description: Add a menu item (or a recipe) to a newrecipe group. If the recipe group does not exist, it is created, detemrind by the recipe group's slug parameter.
      parameters:
      - in: body
        description: 'The recipe group data. Some additional parameters are provide
          finer control over the recipe group insertion. Such as overwriting a previous
          slug, making sure only one ever exists, or is inserted '
        name: jsonBody
        required: true
        schema:
          "$ref": "#/definitions/RecipeGroupInserter"
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            type: array
            items:
              "$ref": "#/definitions/MenuItem"
        '201':
          description: Description was not specified
          schema:
            type: array
            items:
              "$ref": "#/definitions/MenuItem"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
  "/food-nutrition/by-food/{foodId}/{amount}":
    get:
      tags:
      - food
      operationId: ListAbbrevByFoodWithProvides
      summary: Retrieves the nutrition for a particular food.
      parameters:
      - in: path
        description: The id for the food to be fetched
        name: foodId
        required: true
        type: integer
        format: int64
        minimum: 1
      - in: path
        description: Adjust the nutrition amount to per 'amount' grams. If you want
          to know the nutritional content in 200g of a particular food, then enter
          it here as 200.
        name: amount
        required: true
        type: number
        format: float
        minimum: 1
      - in: query
        description: The country RDA to be used when calculating the RDA provided by the food.
        name: rdacountry
        required: true
        default: uk
        type: string
      - in: query
        description: The nutrition field to sort by.
        name: sortby
        default: calories
        type: string
      - in: query
        description: The sort direction for the results.
        name: sortdir
        default: desc
        type: string
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/AbbrevWithProvides"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Food doesn't exist.
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/food-nutrition/food/{foodId}/{amount}":
    get:
      tags:
      - nutrition
      operationId: ShowNutritionForAFood
      summary: Retrieves the nutrition present in a particular food, present in 'amount'
        grams of the food.
      parameters:
      - in: path
        description: Food ID
        name: foodId
        required: true
        type: integer
        format: int64
        minimum: 1
      - in: path
        description: The amount of food in grams
        name: amount
        required: true
        type: number
        format: float
        minimum: 1
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/NutritionAbbrev"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
#  "/nutrient-density/nutrient/{nutrient}":
#    get:
#      tags:
#      - food-nutrition
#      operationId: GetFoodNutrition
#      summary: Find foods high in a particular nutrient
#      parameters:
#      - in: path
#        description: 'A valid nutrient label. See end point /labels/nutrient-abbrevs
#          for an upto date list of the supported values TODO: Include the latest valid
#          nutrient labels.'
#        name: nutrient
#        required: true
#        type: string
#        minLength: 1
#      - in: path
#        description: Adjust the nutrition amount to per 'amount' grams. If you want
#          to know the nutritional content in 200g of a particular food, then enter
#          it here as 200.
#        name: amount
#        required: true
#        type: number
#        format: float
#        minimum: 1
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: Description was not specified
#          schema:
#            type: array
#            items:
#              "$ref": "#/definitions/NutritionAbbrev"
#        '400':
#          description: Description was not specified
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
#  "/nutrient-density/calorie/{nutrient}":
#    get:
#      tags:
#      - food-nutrition
#      operationId: GetFoodNutritionByCalorieDensity
#      summary: Find foods high or low in calories per gram of food
#      parameters:
#      - in: path
#        description: Nutrient name
#        name: nutrient
#        required: true
#        type: string
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: Description was not specified
#          schema:
#            type: array
#            items:
#              "$ref": "#/definitions/NutritionAbbrev"
#        '400':
#          description: Description was not specified
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
#  "/nutrient-density/protein/{nutrient}":
#    get:
#      tags:
#      - food-nutrition
#      operationId: GetFoodNutritionByProteinDensity
#      summary: Find foods high or low in Protein per gram of food
#      parameters:
#      - in: path
#        description: Nutrient name
#        name: nutrient
#        required: true
#        type: string
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: Description was not specified
#          schema:
#            type: array
#            items:
#              "$ref": "#/definitions/NutritionAbbrev"
#        '400':
#          description: Description was not specified
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
#  "/nutrient-density/fat/{nutrient}":
#    get:
#      tags:
#      - food-nutrition
#      operationId: GetFoodNutritionByFatDensity
#      summary: Find foods high or low in total fat per gram of food
#      parameters:
#      - in: path
#        description: Nutrient name
#        name: nutrient
#        required: true
#        type: string
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: Description was not specified
#          schema:
#            type: array
#            items:
#              "$ref": "#/definitions/NutritionAbbrev"
#        '400':
#          description: Description was not specified
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
#  "/nutrient-density/carbs/{nutrient}":
#    get:
#      tags:
#      - food-nutrition
#      operationId: GetFoodNutritionByCarbDensity
#      summary: Find foods high or low in carbs per gram of food
#      parameters:
#      - in: path
#        description: Nutrient name
#        name: nutrient
#        required: true
#        type: string
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: Description was not specified
#          schema:
#            type: array
#            items:
#              "$ref": "#/definitions/NutritionAbbrev"
#        '400':
#          description: Description was not specified
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
#  "/nutrient-density/sugar/{nutrient}":
#    get:
#      tags:
#      - food-nutrition
#      operationId: GetFoodNutritionBySugarDensity
#      summary: Find foods high or low in sugar per gram of food
#      parameters:
#      - in: path
#        description: Nutrient name
#        name: nutrient
#        required: true
#        type: string
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: Description was not specified
#          schema:
#            type: array
#            items:
#              "$ref": "#/definitions/NutritionAbbrev"
#        '400':
#          description: Description was not specified
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
#  "/nutrient-density/sat-fat/{nutrient}":
#    get:
#      tags:
#      - food-nutrition
#      operationId: GetFoodNutritionBySatFatDensity
#      summary: Find foods high or low in saturated fat per gram of food
#      parameters:
#      - in: path
#        description: Nutrient name
#        name: nutrient
#        required: true
#        type: string
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: Description was not specified
#          schema:
#            type: array
#            items:
#              "$ref": "#/definitions/NutritionAbbrev"
#        '400':
#          description: Description was not specified
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
#  "/nutrient-density/mono-fat/{nutrient}":
#    get:
#      tags:
#      - food-nutrition
#      operationId: GetFoodNutritionByMonoFatDensity
#      summary: Find foods high or low in monounsaturated fat per gram of food
#      parameters:
#      - in: path
#        description: Nutrient name
#        name: nutrient
#        required: true
#        type: string
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: Description was not specified
#          schema:
#            type: array
#            items:
#              "$ref": "#/definitions/NutritionAbbrev"
#        '400':
#          description: Description was not specified
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
#  "/nutrient-density/poly-fat/{nutrient}":
#    get:
#      tags:
#      - food-nutrition
#      operationId: GetFoodNutritionByPolyFatDensity
#      summary: Find foods high or low in polyunsaturated fat per gram of food
#      parameters:
#      - in: path
#        description: Nutrient name
#        name: nutrient
#        required: true
#        type: string
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: Description was not specified
#          schema:
#            type: array
#            items:
#              "$ref": "#/definitions/NutritionAbbrev"
#        '400':
#          description: Description was not specified
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
#  "/export/meal-master/{recipeIds}":
#    get:
#      tags:
#      - export
#      operationId: ExportSpecificMealMasterRecipes
#      summary: Export a recipe from the database to the meal master format
#      parameters:
#      - in: path
#        description: A comma deliminted list of recipes to be exported.
#        name: recipeIds
#        required: true
#        type: string
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: Retrieves a list of ingredients, including the nutritional
#            content of the ingredient
#          schema:
#            type: array
#            items:
#              "$ref": "#/definitions/Recipe"
#        '400':
#          description: Malformed JSON (this endpoint requires an array of strings)
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
#  "/export/meal-master":
#    get:
#      tags:
#      - export
#      operationId: ExportMealMasterRecipe
#      summary: Export your recipes as meal master compatiable file, ready for download.
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: Retrieves a list of ingredients, including the nutritional
#            content of the ingredient
#          schema:
#            type: array
#            items:
#              "$ref": "#/definitions/Recipe"
#        '400':
#          description: Malformed JSON (this endpoint requires an array of strings)
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
#  "/import/meal-master/{num-recipes}":
#    post:
#      tags:
#      - import
#      operationId: ImportMultipleMealMasterRecipe
#      summary: Retrieves a list of ingredients and nutritional info.
#      parameters:
#      - in: path
#        description: The number of recipes to parse. Defaults to 1. Fails if the {num_recipes}
#          parameter doesn't match with the number of recipes found in the request
#          body.
#        name: num-recipes
#        required: true
#        type: integer
#        format: int32
#        minimum: 1

#      - in: body
#        description: The flat file meal master file to be parsed.
#        name: jsonBody
#        required: true
#        schema:
#          "$ref": "#/definitions/PlainString"
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: Retrieves a list of the parsed recipes.
#          schema:
#            type: array
#            items:
#              "$ref": "#/definitions/Recipe"
#        '400':
#          description: Malformed JSON (this endpoint requires an array of strings)
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
#      security:
#      - chow_auth:
#        - AuthRequired
#  "/import/meal-master":
#    post:
#      tags:
#      - import
#      operationId: ImportMealMasterRecipe
#      summary: Retrieves a list of ingredients and nutritional info.
#      parameters:
#      - in: body
#        description: The flat file meal master file to be parsed.
#        name: jsonBody
#        required: true
#        schema:
#          "$ref": "#/definitions/PlainString"
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: Retrieves a list of the parsed recipes.
#          schema:
#            type: array
#            items:
#              "$ref": "#/definitions/Recipe"
#        '400':
#          description: Malformed JSON (this endpoint requires an array of strings)
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
#      security:
#      - chow_auth:
#        - AuthRequired
  "/request-apikey":
    get:
      security:
      - chow_auth:
        - AuthRequired
      tags:
      - account
      operationId: RequestApiKey
      summary: Get an API key, for the currently logged in user.
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/ApiKey"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/me":
    get:
      tags:
      - account
      operationId: AccountInfo
      summary: The currently signed in user account info.
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/User"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
  "/fb_signin":
    post:
      tags:
      - account
      operationId: FacebookSignupSignin
      summary: Using a valid Facebook access token, sign the user up (or in if the
        user is already signed up).
      parameters:
      - in: body
        description: A valid facebook access token which will be used to sign the
          user up.
        name: jsonBody
        required: true
        schema:
          "$ref": "#/definitions/FacebookSigninObject"
      produces:
      - application/json
      responses:
        '201':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/User"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/fb_signup":
    post:
      tags:
      - account
      operationId: SaveUser
      summary: Using a valid Facebook access token, sign the user up (or in if the
        user is already signed up).
      parameters:
      - in: body
        description: A valid facebook access token which will be used to sign the
          user up.
        name: jsonBody
        required: true
        schema:
          "$ref": "#/definitions/FacebookSignupObject"
      produces:
      - application/json
      responses:
        '200':
          description: No response was specified
          schema:
            "$ref": "#/definitions/User"
        '201':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/User"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/signin":
    post:
      tags:
      - account
      operationId: AccountSignin
      summary: Sign a user in to your app.
      parameters:
      - in: body
        description: The username, must be unique and the password for the account.
        name: jsonBody
        required: true
        schema:
          "$ref": "#/definitions/SigninObject"
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/User"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/updatenote":
    post:
      tags:
      - account
      operationId: AddPushNoteToAccount
      summary: Sign a user up to your app.
      parameters:
      - in: body
        description: A valid push note token along with the platform the push token
          is for (ios/android/chrome/safari).
        name: jsonBody
        required: true
        schema:
          "$ref": "#/definitions/PushDevice"
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/PushDevice"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
  "/signup":
    post:
      tags:
      - account
      operationId: AccountSignUp
      summary: Sign a user up to your app.
      parameters:
      - in: body
        description: The username, must be unique.
        name: jsonBody
        required: true
        schema:
          "$ref": "#/definitions/User"
      produces:
      - application/json
      responses:
        '201':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/User"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/request-guestid":
    post:
      tags:
      - account
      operationId: SuggestAGuestIDForNewClient
      summary: Request a user id for a client.
      parameters:
      - in: body
        description: A valid push note token.
        name: jsonBody
        required: true
        schema:
          "$ref": "#/definitions/SuggestUser"
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/User"
        '400':
          description: Not signed in.
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
  "/user/{userId}":
    put:
      tags:
      - user
      operationId: SaveUserInfo
      summary: Save changes to the user object.
      parameters:
      - in: path
        description: The ID of the user to which is to be changed.
        name: userId
        required: true
        type: integer
        format: int64
        minimum: 1
      - in: body
        description: A user object containing the changes to be made.
        name: jsonBody
        required: true
        schema:
          "$ref": "#/definitions/SuggestUser"
      produces:
      - application/json
      responses:
        '200':
          description: No response was specified
          schema:
            "$ref": "#/definitions/User"
        '201':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/User"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '401':
          description: Not authorised
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
  "/user-meta-fields/{fields}":
    get:
      tags:
      - user
      operationId: GetSpecificUserMetaInfo
      summary: Fetch a user's meta fields.
      parameters:
      - in: path
        description: A comma deliminated list of meta keys
        name: fields
        required: true
        type: string
      produces:
      - application/json
      security:
      - chow_auth:
        - AuthRequired
      responses:
        '200':
          description: Description was not specified
          schema:
            type: array
            items:
              "$ref": "#/definitions/UserMeta"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/account":
    get:
      tags:
      - user
      operationId: GetPublicAccountInfo
      summary: Fetch the public account info for a user. The account is an alias to a user, with the exception that only publicly available information is passed over this endpoint.
      produces:
      - application/json
      parameters:
      - in: query
        description: The account handle of the user to fetch.
        name: handle
        required: false
        type: string
      - in: query
        description: The account's primary key of the user to fetch.
        name: userId
        required: false
        type: integer
        format: int64
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/User"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/user-public-stats/{handle}":
    get:
      tags:
      - user
      operationId: GetUserPublicStats
      summary: Fetch a user's public stats info.
      parameters:
      - in: path
        description: The account handle of the user to fetch.
        name: handle
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/UserStats"
        '404':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
  "/user-meta":
    get:
      tags:
      - user
      operationId: GetMyUserMetaInfo
      summary: Fetch all of the logged in user's meta info.
      produces:
      - application/json
      security:
      - chow_auth:
        - AuthRequired
      responses:
        '200':
          description: Description was not specified
          schema:
            type: array
            items:
              "$ref": "#/definitions/UserMeta"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
    put:
      tags:
      - user
      operationId: SaveUserMetaInfo
      summary: Save changes to the user object.
      parameters:
#      - in: path
#        description: The ID of the user to which the user-meta is to be added to
#        name: userId
#        required: true
#        type: integer
#        format: int64
#        minimum: 1
      - in: body
        description: A user object containing the changes to be made.
        name: jsonBody
        required: true
        schema:
          type: array
          items:
            "$ref": "#/definitions/UserMeta"
      produces:
      - application/json
      responses:
        '200':
          description: No response was specified
          schema:
            type: array
            items:
              "$ref": "#/definitions/UserMeta"
        '201':
          description: Description was not specified
          schema:
            type: array
            items:
              "$ref": "#/definitions/UserMeta"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
      security:
      - chow_auth:
        - AuthRequired
  "/chow/{recipeName}/{recipeNameIndex}":
    get:
      tags:
      - chow
      operationId: GetRecipeByUniqueHandle
      summary: Get a particular recipe via a unique name and index
      parameters:
      - in: path
        description: The recipe's unique handle; a name and a number seperated by a forward slash.
        name: recipeName
        required: true
        type: string
        minLength: 1
      - in: path
        description: An index to differentiate recipes with the same name.
        name: recipeNameIndex
        required: true
        type: integer
        format: int32
        minimum: 1
      - name: include-nutrition
        in: query
        description: Should the recipe's nutrition field be populated?
        required: false
        default: false
        type: boolean
      - in: query
        description: Should the recipe's ingredient common names be included?
        name: include-common-names
        required: false
        type: boolean
      - in: query
        description: Should the recipe's nutrition per portion be included?
        name: include-nutrition-per-portion
        required: false
        type: boolean
      - in: query
        description: Should the general daily provision for the recipe be included?
        name: include-gda
        required: false
        type: boolean
      - in: query
        description: Should the recipe's ingredient food names be included (this is
          different from the common names since the storage is a map, where key is
          the foodId and value is the ingredient common name.)
        name: include-food-names
        required: false
        type: boolean
      - in: query
        description: Should the recipe's ingredient food id's be included?
        name: include-foodId
        required: false
        type: boolean
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/Recipe"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
  "/super-chow/{recipename}/{recipenameindex}":
    get:
      tags:
      - chow
      operationId: GetSuperRecipeByUniqueHandle
      summary: Get a particular recipe via a unique name and index
      parameters:
      - in: path
        description: The recipe's unique name
        name: recipename
        required: true
        type: string
      - in: path
        description: An index to differentiate recipe's with the same name
        name: recipenameindex
        required: true
        type: integer
        format: int32
        minimum: 1
      - "$ref" : "#/parameters/includeNutritionParam"
      - "$ref" : "#/parameters/include-common-names"
      - "$ref" : "#/parameters/include-recipe-categories"
      - "$ref" : "#/parameters/include-nutrition-per-portion"
      - "$ref" : "#/parameters/include-gda"
      - "$ref" : "#/parameters/include-nutrition-tips"
      - "$ref" : "#/parameters/include-food-names"
      - "$ref" : "#/parameters/include-food-id"
      produces:
      - application/json
      responses:
        '200':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/Recipe"
        '400':
          description: Description was not specified
          schema:
            "$ref": "#/definitions/HttpAPIError"
        '404':
          description: Recipe not found
          schema:
            "$ref": "#/definitions/HttpAPIError"
#  "/take-guest-recipes":
#    post:
#      tags:
#      - user
#      operationId: TakeGuestRecipes
#      summary: Get the recipe object, and include the nutrition information for the
#        ingredients in this object.
#      parameters:
#      - in: body
#        description: An empty body.
#        name: jsonBody
#        required: true
#        schema:
#          "$ref": "#/definitions/EmptyObject"
#      produces:
#      - application/json
#      responses:
#        '200':
#          description: Description was not specified
#          schema:
#            type: string
#        '400':
#          description: Description was not specified
#          schema:
#            "$ref": "#/definitions/HttpAPIError"
#      security:
#      - chow_auth:
#        - AuthRequired
definitions:
  HttpAPIError:
    type:
      object
    properties:
      error_code:
        type: integer
        format: int32
      error_message:
        type: string
  IngredientWithNutritionAbbrev:
    allOf:
      - "$ref" : "#/definitions/Ingredient"
      - "$ref" : "#/definitions/NutritionAbbrev"
  PopularIngredients:
    type:
      object
    properties:
      food_id:
        type: integer
        format: int64
      food_group_id:
        type: integer
        format: int64
      common_name:
        type: string
      occurrences:
        type: integer
        format: int32
  ApplicationFood:
    type:
      object
    properties:
      regex_id:
        type: number
        format: int64
        x-tag: gorm:"primary_key;not null;"
      food_id:
        type: number
        format: int
        x-tag: gorm:"index;not null;"
      parent_overlapping_id:
        type: number
        format: int
        x-tag: gorm:"index;"
      group_id:
        type: number
        format: int64
      regex:
        type: string
      parent_regex_id:
        type: number
        default: 0
        format: int16
        description: If this is 0, then this regex is actually a top level regex. If there are any regexes with other regexes pointing to it as their parent, then those regexes are identified as parents and will only match ingredients
      common_name:
        type: string
      active:
        type: number
        format: int16
      in_usda:
        type: number
        format: int16
      high_generality:
        type: number
        format: int16
      priority:
        type: number
        format: int
      default_amount:
        type: number
        format: float
      zero_cal:
        type: number
        format: int16
      alcohol:
        type: boolean
      meat:
        type: boolean
      nut:
        type: boolean
      egg:
        type: boolean
      sugar:
        type: boolean
      vegan:
        type: boolean
      veg:
        type: boolean
      gluten_free:
        type: boolean
      Fish:
        type: boolean
      Seasoning:
        type: boolean
      FatOrOil:
        type: boolean
      Compound:
        type: boolean
      units_regex:
        type: string
        format: string
      temp_hits:
        type: integer
        format: int16
  ApplicationFoodGroup:
    type:
      object
    properties:
      group_id:
        type: integer
        format: int64
      group_name:
        type: string
  ApplicationFoodRegexGroup:
    type:
      object
    properties:
      regex_group_id:
        type: integer
        format: int64
      substring:
        type: string
  ApplicationFoodRegexGroupMember:
    type:
      object
    properties:
      member_group_id:
        type: integer
        format: int64
      regex_group_id:
        type: integer
        format: int64
      application_food_id:
        type: integer
        format: int64
      is_regex:
        type: boolean
  FoodDes:
    type:
      object
    properties:
      category:
        x-tag: gorm:"column:FdGrp_Cd"
        type: string
      cho_factor:
        x-tag: gorm:"column:CHO_Factor"
        type: number
        format: float
      common_name:
        x-tag: gorm:"column:ComName"
        type: string
      fat_factor:
        x-tag: gorm:"column:Fat_Factor"
        type: number
        format: float
      food_id:
        type: integer
        x-tag: gorm:"column:NDB_No"
        format: int64
      manufacturer:
        x-tag: gorm:"column:ManufacName"
        type: string
      n_factor:
        x-tag: gorm:"column:N_Factor"
        type: number
        format: float
      name:
        x-tag: gorm:"column:Long_Desc"
        type: string
      pro_factor:
        type: number
        x-tag: gorm:"column:Pro_Factor"
        format: float
      ref_desc:
        x-tag: gorm:"column:Ref_desc"
        type: string
      refuse:
        x-tag: gorm:"column:Refuse"
        type: integer
        format: int32
      sciname:
        x-tag: gorm:"column:SciName"
        type: string
      shrt_desc:
        x-tag: gorm:"column:Shrt_Desc"
        type: string
      survey:
        x-tag: gorm:"column:Survey"
        type: string
  NutrDef:
    type:
      object
    properties:
      name:
        type: string
      nutrient_id:
        type: string
      tag:
        type: string
      units:
        type: string
  HttpAPIResponse:
    type:
      object
    properties:
      message:
        type: string
  AvgTotal:
    type:
      object
    properties:
      average:
        type: number
        format: float
      total:
        type: number
        format: float
  Cuisine:
    type:
      object
    properties:
      cuisine_id:
        x-tag: gorm:"primary_key"
        type: integer
        format: int64
      name:
        type: string
  RecipeRatingResult:
    allOf:
      - "$ref" : "#/definitions/RecipeRating"
      - "$ref" : "#/definitions/AvgTotal"
  RecipeRating:
    type:
      object
    properties:
      created:
        type: integer
        format: int64
        minimum: 1
      owner_id:
        type: integer
        format: int64
        minimum: 1
      rating:
        type: integer
        format: int32
        minimum: 1
      recipe_id:
        type: integer
        format: int64
        minimum: 1
      recipe_rating_id:
        type: integer
        format: int64
        minimum: 1
      recipe_url:
        type: string
  MiniFood:
    type:
      object
    properties:
      food_id:
        type: string
      name:
        type: string
  FoodGroup:
    type:
      object
    properties:
      group_id:
        type: string
      group_name:
        type: string
  IngredientFood:
    type:
      object
    properties:
      common_name:
        type: string
      food_id:
        type: integer
        format: int64
      group_id:
        type: integer
        format: int64
      regex_id:
        type: integer
        format: int64
  NutritionAbbrev:
    type:
      object
    properties:
      nut_food_id:
        x-tag: gorm:"column:NDB_No"
        type: integer
        format: int64
      shrt_desc:
        x-tag: gorm:"column:Shrt_Desc"
        type: string
    allOf:
      - "$ref" : "#/definitions/BaseNutritionAbbrev"
  NutAbbrevName:
    type:
      object
    properties:
      nut_food_id:
        x-tag: gorm:"column:NDB_No"
        type: integer
        format: int64
      shrt_desc:
        x-tag: gorm:"column:Shrt_Desc"
        type: string
      name:
        x-tag: gorm:"column:Long_Desc"
        type: string
  NutritionAbbrevWithName:
    allOf:
      - "$ref" : "#/definitions/BaseNutritionAbbrev"
      - "$ref" : "#/definitions/NutAbbrevName"
  BaseNutritionAbbrevUnit:
    type:
      object
    properties:
      water_unit:
        type : string
        enum:
        - g
      calories_unit:
        type : string
        enum:
        - kcal
      protein_unit:
        type : string
        enum:
        - g
      total_fat_unit:
        type : string
        enum:
        - g
      ash_unit:
        type : string
        enum:
        - g
      carbs_unit:
        type : string
        enum:
        - g
      fiber_td_unit:
        type : string
        enum:
        - g
      total_sugar_unit:
        type : string
        enum:
        - g
      calcium_unit:
        type : string
        enum:
        - mg
      iron_unit:
        type : string
        enum:
        - mg
      magnesium_unit:
        type : string
        enum:
        - mg
      phosphorus_unit:
        type : string
        enum:
        - mg
      potassium_unit:
        type : string
        enum:
        - mg
      sodium_unit:
        type : string
        enum:
        - mg
      zinc_unit:
        type : string
        enum:
        - mg
      copper_unit:
        type : string
        enum:
        - mg
      manganese_unit:
        type : string
        enum:
        - mg
      selenium_unit:
        type : string
        enum:
        - µg
      vit_c_unit:
        type : string
        enum:
        - mg
      vit_b1_unit:
        type : string
        enum:
        - mg
      vit_b2_unit:
        type : string
        enum:
        - mg
      vit_b3_unit:
        type : string
        enum:
        - mg
      vit_b5_unit:
        type : string
        enum:
        - mg
      vit_b6_unit:
        type : string
        enum:
        - mg
      folate_tot_unit:
        type : string
        enum:
        - µg
      folic_acid_unit:
        type : string
        enum:
        - µg
      food_folate_unit:
        type : string
        enum:
        - µg
      folate_dfe_unit:
        type : string
        enum:
        - µg
      choline_tot_unit:
        type : string
        enum:
        - mg
      vit_b12_unit:
        type : string
        enum:
        - µg
      vit_a_iu_unit:
        type : string
        enum:
        - IU
      vit_a_rae_unit:
        type : string
        enum:
        - µg
      retinol_unit:
        type : string
        enum:
        - µg
      alpha_carot_unit:
        type : string
        enum:
        - µg
      beta_carot_unit:
        type : string
        enum:
        - µg
      beta_crypt_unit:
        type : string
        enum:
        - µg
      lycopene_unit:
        type : string
        enum:
        - µg
      lut_zea_unit:
        type : string
        enum:
        - µg
      vit_e_unit:
        type : string
        enum:
        - mg
      vit_d_mcg_unit:
        type : string
        enum:
        - µg
      vit_d_iu_unit:
        type : string
        enum:
        - IU
      vit_k_unit:
        type : string
        enum:
        - µg
      sat_fat_unit:
        type : string
        enum:
        - g
      mono_fat_unit:
        type : string
        enum:
        - g
      poly_fat_unit:
        type : string
        enum:
        - g
      cholestrl_unit:
        type : string
        enum:
        - mg
      bioton_unit:
        type : string
      chloride_unit:
        type : string
        enum:
        - g
      chromium_unit:
        type : string
        enum:
        - µg
      fluoride_unit:
        type : string
        enum:
        - µg
      iodine_unit:
        type : string
      molybdenum_unit:
        type : string
        enum:
        - µg
  BaseNutritionAbbrev:
    type:
      object
    properties:
      alpha_carot:
        type: number
        format: float
        x-tag: gorm:"column:Alpha_Carot"
      ash:
        type: number
        format: float
        x-tag: gorm:"column:Ash"
      beta_carot:
        type: number
        format: float
        x-tag: gorm:"column:Beta_Carot"
      beta_crypt:
        type: number
        format: float
        x-tag: gorm:"column:Beta_Crypt"
      bioton:
        x-tag: gorm:"column:Bioton" sql:"index"
        type: number
        format: float
      calcium:
        type: number
        x-tag: gorm:"column:Calcium" sql:"index"
        format: float
      calories:
        x-tag: gorm:"column:Energ_Kcal" sql:"index"
        type: number
        format: float
      carbs:
        type: number
        x-tag: gorm:"column:Carbohydrt" sql:"index"
        format: float
      chloride:
        x-tag: gorm:"column:Chloride" sql:"index"
        type: number
        format: float
      cholestrl:
        x-tag: gorm:"column:Cholestrl" sql:"index"
        type: number
        format: float
      choline:
        type: number
        x-tag: gorm:"column:Choline" sql:"index"
        format: float
      choline_tot:
        type: number
        x-tag: gorm:"column:Choline_Tot" sql:"index"
        format: float
      chromium:
        type: number
        format: float
        x-tag: gorm:"column:Chromium" sql:"index"
      copper:
        type: number
        format: float
        x-tag: gorm:"column:Copper" sql:"index"
      fiber_td:
        type: number
        x-tag: gorm:"column:Fiber_TD" sql:"index"
        format: float
      fluoride:
        type: number
        x-tag: gorm:"column:Fluoride" sql:"index"
        format: float
      folate_dfe:
        x-tag: gorm:"column:Folate_dfe" sql:"index"
        type: number
        format: float
      folate_tot:
        type: number
        x-tag: gorm:"column:Folate_Tot" sql:"index"
        format: float
      folic_acid:
        x-tag: gorm:"column:Folic_Acid" sql:"index"
        type: number
        format: float
      food_folate:
        type: number
        x-tag: gorm:"column:Food_Folate" sql:"index"
        format: float
      food_weight:
        type: number
        x-tag: gorm:"column:FoodWeight"
        format: float
      iodine:
        x-tag: gorm:"column:Iodine" sql:"index"
        type: number
        format: float
      iron:
        type: number
        x-tag: gorm:"column:Iron" sql:"index"
        format: float
      lut_zea:
        type: number
        x-tag: gorm:"column:Lut_zea"
        format: float
      lycopene:
        type: number
        format: float
        x-tag: gorm:"column:Lycopene"
      magnesium:
        type: number
        x-tag: gorm:"column:Magnesium" sql:"index"
        format: float
      manganese:
        format: float
        x-tag: gorm:"column:Manganese" sql:"index"
      molybdenum:
        type: number
        format: float
        x-tag: gorm:"column:Molybdenum" sql:"index"
      mono_fat:
        x-tag: gorm:"column:FA_Mono" sql:"index"
        type: number
        format: float
      phosphorus:
        type: number
        format: float
        x-tag: gorm:"column:Phosphorus" sql:"index"
      poly_fat:
        type: number
        x-tag: gorm:"column:FA_Poly" sql:"index"
        format: float
      potassium:
        type: number
        x-tag: gorm:"column:Potassium" sql:"index"
        format: float
      protein:
        type: number
        x-tag: gorm:"column:Protein" sql:"index"
        format: float
      retinol:
        type: number
        format: float
        x-tag: gorm:"column:Retinol" sql:"index"
      sat_fat:
        type: number
        format: float
        x-tag: gorm:"column:FA_Sat" sql:"index"
      selenium:
        type: number
        format: float
        x-tag: gorm:"column:Selenium" sql:"index"
      sodium:
        type: number
        format: float
        x-tag: gorm:"column:Sodium" sql:"index"
      total_fat:
        type: number
        format: float
        description: The total amount of fat present.
        x-tag: gorm:"column:Lipid_Tot" sql:"index"
      total_sugar:
        type: number
        format: float
        x-tag: gorm:"column:Sugar_Tot" sql:"index"
      vit_a_iu:
        type: number
        format: float
        x-tag: gorm:"column:Vit_A_IU" sql:"index"
      vit_a_rae:
        type: number
        format: float
        x-tag: gorm:"column:Vit_A_RAE" sql:"index"
      vit_b1:
        type: number
        format: float
        x-tag: gorm:"column:Thiamin" sql:"index"
      vit_b12:
        type: number
        format: float
        x-tag: gorm:"column:Vit_B12" sql:"index"
      vit_b2:
        type: number
        format: float
        x-tag: gorm:"column:Riboflavin" sql:"index"
      vit_b3:
        type: number
        format: float
        x-tag: gorm:"column:Niacin" sql:"index"
      vit_b5:
        type: number
        format: float
        x-tag: gorm:"column:Panto_Acid" sql:"index"
      vit_b6:
        type: number
        format: float
        x-tag: gorm:"column:Vit_B6" sql:"index"
      vit_c:
        type: number
        format: float
        x-tag: gorm:"column:Vit_C" sql:"index"
      vit_d_iu:
        type: number
        format: float
        x-tag: gorm:"column:ViVit_D_IU" sql:"index"
      vit_d_mcg:
        type: number
        format: float
        x-tag: gorm:"column:Vit_D_MCG" sql:"index"
      vit_e:
        type: number
        format: float
        x-tag: gorm:"column:Vit_E" sql:"index"
      vit_k:
        type: number
        format: float
        x-tag: gorm:"column:Vit_K" sql:"index"
      water:
        type: number
        format: float
        x-tag: gorm:"column:Water"
      zinc:
        type: number
        format: float
        x-tag: gorm:"column:Zinc" sql:"index"
  PopularFood:
    allOf:
      - "$ref" : "#/definitions/PopularIngredients"
      - "$ref" : "#/definitions/ApplicationFoodGroup"
  Image: {}
  CountryRDA:
    type:
      object
    properties:
      country:
        type: string
      female:
        "$ref": "#/definitions/RDP"
      male:
        "$ref": "#/definitions/RDP"
  FoodWithID:
    type:
      object
    properties:
      food_id:
        type: integer
        format: int64
      name:
        type: string
  IngredientOp:
    allOf:
      - "$ref" : "#/definitions/Ingredient"
      - "$ref" : "#/definitions/IngOp"
  IngOp:
    type:
      object
    properties:
      operation:
        description: One of create, edit or delete. This informs the API what change should be done with this ingredient. When deleting, all that's required is that the ingredient_id be present in the object to ID the ingredient for deletion.
        type: string
  Ingredient:
    type:
      object
    properties:
      added:
        type: integer
        format: int64
      amount:
        type: number
        format: float
      amount_unit:
        type: string
      common_name:
        type: string
      food_id:
        x-tag: gorm:"index:idx_food_id"
        type: integer
        format: int64
      application_regex_id:
        x-tag: gorm:"index:idx_application_regex_id"
        type: integer
        format: int64
      group_id:
        type: integer
        format: int64
      ingredient_id:
        x-tag: gorm:"primary_key"
        type: integer
        format: int64
        minimum: 1
      ingredient_line:
        type: string
      multiplier:
        type: integer
        x-tag: gorm:"default:1;not null"
        format: int32
      recipe_id:
        x-tag: gorm:"index:idx_recipe_id"
        type: integer
        format: int64
        minimum: 1
      result:
        type: string
      parse_id:
        type: string
        description: This is used when this ingredient is parsed 'on the fly.' If the ingredient isn't part of a recipe, stored in the DB, then this will be a unique ID which can be used to identify the ingredient for errorenous parsing purposes. The server will keep a record, in memory, of ingredients parsed along with this id, so later a human can notify the server when a parsing is wrong.
      is_header:
        type: boolean
        description: This line isn't an ingredient, but a header, such as "For the base:" or "Possible alternatives. Headers often appear in ingredient;s lists to seperate out the ingredients list into more convenient groups.
      seq:
        type: integer
        format: int32
  PagedRecipeResults:
    type:
      object
    properties:
      results:
        type: array
        items:
          "$ref": "#/definitions/Recipe"
      totalRows:
        type: integer
        format: int64
      offset:
        type: integer
        format: int64
        minimum: 0
      limit:
        type: integer
        format: int32
        minimum: 0
  RDP:
    type:
      object
    properties:
      alpha_carot:
        type: integer
        format: int32
      alpha_carot_unit:
        type: string
        enum:
        - µg
      beta_carot:
        type: integer
        format: int32
      beta_carot_unit:
        type: string
        enum:
        - µg
      beta_crypt:
        type: integer
        format: int32
      beta_crypt_unit:
        type: string
        enum:
        - µg
      biotin_unit:
        type: string
        enum:
        - µg
      bioton:
        type: integer
        format: int32
      calcium:
        type: integer
        format: int32
      calcium_unit:
        type: string
        enum:
        - mg
      calories:
        type: integer
        format: int32
      calories_unit:
        type: string
        enum:
        - kcal
      carbs:
        type: integer
        format: int32
      carbs_unit:
        type: string
        enum:
        - g
      chloride:
        type: integer
        format: int32
      chloride_unit:
        type: string
        enum:
        - g
      cholestrl:
        type: integer
        format: int32
      cholestrl_unit:
        type: string
        enum:
        - mg
      choline_tot:
        type: integer
        format: int32
      choline_tot_unit:
        type: string
        enum:
        - mg
      chromium:
        type: integer
        format: int32
      chromium_unit:
        type: string
        enum:
        - µg
      copper:
        type: integer
        format: int32
      copper_unit:
        type: string
        enum:
        - mg
      country:
        type: string
      fiber_td:
        type: integer
        format: int32
      fiber_td_unit:
        type: string
        enum:
        - g
      fluoride:
        type: integer
        format: int32
      fluoride_unit:
        type: string
        enum:
        - µg
      folate_dfe:
        type: integer
        format: int32
      folate_dfe_unit:
        type: string
        enum:
        - µg
      folate_tot:
        type: integer
        format: int32
      folate_tot_unit:
        type: string
        enum:
        - µg
      folic_acid:
        type: integer
        format: int32
      folic_acid_unit:
        type: string
        enum:
        - µg
      food_folate:
        type: integer
        format: int32
      food_folate_unit:
        type: string
        enum:
        - µg
      gender:
        type: string
      iodine:
        type: integer
        format: int32
      iodine_unit:
        type: string
      iron:
        type: integer
        format: int32
      iron_unit:
        type: string
        enum:
        - mg
      lut_zea:
        type: integer
        format: int32
      lut_zea_unit:
        type: string
        enum:
        - µg
      lycopene:
        type: integer
        format: int32
      lycopene_unit:
        type: string
        enum:
        - µg
      magnesium:
        type: integer
        format: int32
      magnesium_unit:
        type: string
        enum:
        - mg
      manganese:
        type: integer
        format: int32
      manganese_unit:
        type: string
        enum:
        - mg
      molybdenum:
        type: integer
        format: int32
      molybdenum_unit:
        type: string
        enum:
        - µg
      mono_fat:
        type: integer
        format: int32
      mono_fat_unit:
        type: string
        enum:
        - g
      phosphorus:
        type: integer
        format: int32
      phosphorus_unit:
        type: string
        enum:
        - mg
      poly_fat:
        type: integer
        format: int32
      poly_fat_unit:
        type: string
        enum:
        - g
      potassium:
        type: integer
        format: int32
      potassium_unit:
        type: string
        enum:
        - mg
      protein:
        type: integer
        format: int32
      protein_unit:
        type: string
        enum:
        - g
      retinol:
        type: integer
        format: int32
      retinol_unit:
        type: string
        enum:
        - µg
      sat_fat:
        type: integer
        format: int32
      sat_fat_unit:
        type: string
      selenium:
        type: integer
        format: int32
      selenium_unit:
        type: string
        enum:
        - µg
      sodium:
        type: integer
        format: int32
      sodium_unit:
        type: string
        enum:
        - mg
      total_fat:
        type: integer
        format: int32
      total_fat_unit:
        type: string
        enum:
        - g
      total_sugar:
        type: integer
        format: int32
      total_sugar_unit:
        type: string
        enum:
        - g
      vit_a_iu:
        type: integer
        format: int32
      vit_a_iu_unit:
        type: string
        enum:
        - IU
      vit_a_rae:
        type: integer
        format: int32
      vit_a_rae_unit:
        type: string
        enum:
        - µg
      vit_b1:
        type: integer
        format: int32
      vit_b12:
        type: integer
        format: int32
      vit_b12_unit:
        type: string
        enum:
        - µg
      vit_b1_unit:
        type: string
        enum:
        - mg
      vit_b2:
        type: integer
        format: int32
      vit_b2_unit:
        type: string
        enum:
        - mg
      vit_b3:
        type: integer
        format: int32
      vit_b3_unit:
        type: string
        enum:
        - mg
      vit_b5:
        type: integer
        format: int32
      vit_b5_unit:
        type: string
        enum:
        - mg
      vit_b6:
        type: integer
        format: int32
      vit_b6_unit:
        type: string
        enum:
        - mg
      vit_c:
        type: integer
        format: int32
      vit_c_unit:
        type: string
        enum:
        - mg
      vit_d_iu:
        type: integer
        format: int32
      vit_d_mcg:
        type: integer
        format: int32
      vit_d_mcg_unit:
        type: string
        enum:
        - µg
      vit_e:
        type: integer
        format: int32
      vit_e_unit:
        type: string
        enum:
        - mg
      vit_k:
        type: integer
        format: int32
      vit_k_unit:
        type: string
        enum:
        - µg
      vivit_d_iu_unit:
        type: string
        enum:
        - IU
      zinc:
        type: integer
        format: int32
      zinc_unit:
        type: string
        enum:
        - mg
  Recipe:
    type:
      object
    properties:
      internal_preload_options:
        description: An internally used int by the system to decide what extra data should be attached to this recipe object (such as nutrition, GDA, nutrition per portion etc)
        type: integer
        format: int64
        x-tag: sql:"-"
      num_matching_ingredients:
        description: Only used when searching for recipes by food id. This value will show how many of the foods in the search are present in this recipe.
        type: integer
        format: int32
        minimum: 0
        maximum: 1000
        x-tag: sql:"-"
      num_missing_ingredients:
        description: Only used when searching for recipes by food id. This value will show how many of the foods in the search are missing from this recipe.
        type: integer
        format: int32
        minimum: 0
        maximum: 1000
        x-tag: sql:"-"
      unique_url_id:
        type: integer
        format: int64
      unique_url_name:
        type: string
      added:
        type: integer
        format: int64
      categories:
        type: array
        items:
          type: string
        x-tag: sql:"-"
      category:
        type: string
      cook_time:
        type: number
        format: float
        minimum: 0
        maximum: 1000
      creator:
        type: string
      cuisine:
        type: string
      Description:
        type: string
      food_ids:
        type: array
        items:
          type: integer
          format: int64
        x-tag: sql:"-"
      food_names:
        type: object
        additionalProperties:
          type: string
        x-tag: sql:"-"
        x-json: omitempty
      has_image:
        type: boolean
      image_url:
        type: string
      info:
        type: string
      ingredient_common_names:
        type: array
        items:
          type: string
        x-tag: sql:"-"
        x-json: omitempty
      ingredients:
        type: string
      instructions:
        type: string
      meal_type:
        type: string
      name:
        type: string
      num_ingredients:
        type: integer
        format: int32
#      parsed_ingredients:
#        type: array
#        items:
#          "$ref": "#/definitions/Ingredient"
      nutrition:
        type: array
        items:
          "$ref": "#/definitions/IngredientWithNutritionAbbrev"
        description: 'A list of the ingredients in a recipe, including the nutritional
          information of each ingredient. Note: This will only appear in a recipe
          object when the /nutrition endpoint is present in the API request for the
          recipe object'
        x-tag: sql:"-"
        x-json: omitempty
      nutrition_per_portion:
        "$ref": "#/definitions/RecipeNutritionAbbrev"
        x-tag: sql:"-"
        x-json: omitempty
      nutrition_tips:
        type: array
        items:
          "$ref": "#/definitions/NutritionTip"
        x-tag: sql:"-"
        x-json: omitempty
      oid:
        type: string
      owner_id:
        type: integer
        format: int64
      date_published:
        type: integer
        description: The date the recipe was published, as described by the web page.
        format: int64
      portions:
        type: integer
        format: int32
        default: 1
        maximum: 1000
      prep_time:
        type: number
        format: float
        minimum: 0
        maximum: 1000
      provides:
        "$ref": "#/definitions/CountryRDA"
        x-tag: sql:"-"
        x-json: omitempty
      public:
        type: boolean
      rating:
        type: number
        format: float
      chow_rating:
        type: number
        format: float
        minimum: 0
        maximum: 10
      web_rating:
        type: number
        format: float
        minimum: 0
        maximum: 1000
      rating_count:
        type: integer
        format: int32
        minimum: 0
      recipe_id:
        x-tag: gorm:"primary_key"
        type: integer
        format: int64
        minimum: 1
      recipe_yield:
        type: string
      scratch:
        type: boolean
      source:
        type: string
      total_time:
        type: number
        format: float
        minimum: 0
        maximum: 1000
      unique_name:
        type: string
        x-tag: sql:"-"
      url:
        type: string
  RecipeNutritionAbbrev:
    allOf:
      - "$ref" : "#/definitions/BaseNutritionAbbrev"
      - "$ref" : "#/definitions/BaseNutritionAbbrevUnit"
    type: object
    properties:
      is_condiment:
        x-tag: gorm:"index:idx_is_condiment"
        type: boolean
      is_sweet:
        x-tag: gorm:"index:idx_is_sweet"
        type: boolean
      is_savoury:
        x-tag: gorm:"index:idx_is_savoury"
        type: boolean
      num_alcohol:
        x-tag: gorm:"index:idx_num_alcohol"
        type: integer
        format: int32
      num_ceral:
        x-tag: gorm:"index:idx_num_ceral"
        type: integer
        format: int32
      num_dairy:
        x-tag: gorm:"index:idx_num_dairy"
        type: integer
        format: int32
      num_egg:
        x-tag: gorm:"index:idx_num_egg"
        type: integer
        format: int32
      num_fish:
        type: integer
        x-tag: gorm:"index:idx_num_fish"
        format: int32
      num_fruit:
        type: integer
        format: int32
        x-tag: gorm:"index:idx_num_fruit"
      num_meat:
        type: integer
        x-tag: gorm:"index:idx_num_meat"
        format: int32
      num_nut:
        x-tag: gorm:"index:idx_num_nut"
        type: integer
        format: int32
      num_sugar:
        x-tag: gorm:"index:idx_num_sugar"
        type: integer
        format: int32
      num_veg:
        x-tag: gorm:"index:idx_num_veg"
        type: integer
        format: int32
      num_vegan:
        type: integer
        x-tag: gorm:"index:idx_num_vegan"
        format: int32
      num_oil:
        type: integer
        x-tag: gorm:"index:idx_num_oil"
        format: int32
      num_seasoning:
        type: integer
        x-tag: gorm:"index:idx_num_seasoning"
        format: int32
      num_compound:
        type: integer
        x-tag: gorm:"index:idx_num_compound"
        format: int32
      portions:
        x-tag: gorm:"index:idx_portions"
        type: integer
        format: int32
      recipe_nutrition_abbrev_id:
        x-tag: gorm:"primary_key"
        type: integer
        format: int64
      recipe_id:
        x-tag: gorm:"index:idx_recipe_id"
        type: integer
        format: int64
      quick_and_easy:
        x-tag: gorm:"index:idx_is_quick_and_easy"
        type: boolean
  MenuItem:
    type:
      object
    properties:
      group_id:
        x-tag: gorm:"index;not null;"
        type: integer
        format: int64
      item_description:
        type: string
      item_name:
        type: string
      item_position:
        type: integer
        format: int32
      item_currency:
        type: string
      item_price:
        type: number
        format: float
      menu_item_id:
        x-tag: gorm:"primary_key;not null;"
        type: integer
        format: int64
      recipe_id:
        x-tag: gorm:"index;not null;default:0;"
        type: integer
        format: int64
      recipe:
        x-tag: sql:"-"
        "$ref" : "#/definitions/Recipe"
  RDA:
    type:
      object
    properties:
      alpha_carot:
        type: number
        format: float
      alpha_carot_unit:
        type: string
        enum:
        - µg
      beta_carot:
        type: number
        format: float
      beta_carot_unit:
        type: string
        enum:
        - µg
      beta_crypt:
        type: number
        format: float
      beta_crypt_unit:
        type: string
        enum:
        - µg
      biotin_unit:
        type: string
        enum:
        - µg
      bioton:
        type: number
        format: float
      calcium:
        type: number
        format: float
      calcium_unit:
        type: string
        enum:
        - mg
      calories:
        type: number
        format: float
      calories_unit:
        type: string
        enum:
        - kcal
      carbs:
        type: number
        format: float
      carbs_unit:
        type: string
        enum:
        - g
      chloride:
        type: number
        format: float
      chloride_unit:
        type: string
        enum:
        - g
      cholestrl:
        type: number
        format: float
      cholestrl_unit:
        type: string
        enum:
        - mg
      choline_tot:
        type: number
        format: float
      choline_tot_unit:
        type: string
        enum:
        - mg
      chromium:
        type: number
        format: float
      chromium_unit:
        type: string
        enum:
        - µg
      copper:
        type: number
        format: float
      copper_unit:
        type: string
        enum:
        - mg
      country:
        type: string
      fiber_td:
        type: number
        format: float
      fiber_td_unit:
        type: string
        enum:
        - g
      fluoride:
        type: number
        format: float
      fluoride_unit:
        type: string
        enum:
        - µg
      folate_dfe:
        type: number
        format: float
      folate_dfe_unit:
        type: string
        enum:
        - µg
      folate_tot:
        type: number
        format: float
      folate_tot_unit:
        type: string
        enum:
        - µg
      folic_acid:
        type: number
        format: float
      folic_acid_unit:
        type: string
        enum:
        - µg
      food_folate:
        type: number
        format: float
      food_folate_unit:
        type: string
        enum:
        - µg
      gender:
        type: string
        enum:
        - male
        - female
      iodine:
        type: number
        format: float
      iodine_unit:
        type: string
      iron:
        type: number
        format: float
      iron_unit:
        type: string
        enum:
        - mg
      lut_zea:
        type: number
        format: float
      lut_zea_unit:
        type: string
        enum:
        - µg
      lycopene:
        type: number
        format: float
      lycopene_unit:
        type: string
        enum:
        - µg
      magnesium:
        type: number
        format: float
      magnesium_unit:
        type: string
        enum:
        - mg
      manganese:
        type: number
        format: float
      manganese_unit:
        type: string
        enum:
        - mg
      molybdenum:
        type: number
        format: float
      molybdenum_unit:
        type: string
        enum:
        - µg
      mono_fat:
        type: number
        format: float
      mono_fat_unit:
        type: string
        enum:
        - g
      phosphorus:
        type: number
        format: float
      phosphorus_unit:
        type: string
        enum:
        - mg
      poly_fat:
        type: number
        format: float
      poly_fat_unit:
        type: string
        enum:
        - g
      potassium:
        type: number
        format: float
      potassium_unit:
        type: string
        enum:
        - mg
      protein:
        type: number
        format: float
      protein_unit:
        type: string
        enum:
        - g
      retinol:
        type: number
        format: float
      retinol_unit:
        type: string
        enum:
        - µg
      sat_fat:
        type: number
        format: float
      sat_fat_unit:
        type: string
        enum:
        - g
      selenium:
        type: number
        format: float
      selenium_unit:
        type: string
        enum:
        - µg
      sodium:
        type: number
        format: float
      sodium_unit:
        type: string
        enum:
        - mg
      total_fat:
        type: number
        format: float
      total_fat_unit:
        enum:
        - g
        type: string
      total_sugar:
        type: number
        format: float
      total_sugar_unit:
        enum:
        - g
        type: string
      vit_a_iu:
        type: number
        format: float
      vit_a_iu_unit:
        type: string
        enum:
        - IU
      vit_a_rae:
        type: number
        format: float
      vit_a_rae_unit:
        type: string
        enum:
        - µg
      vit_b1:
        type: number
        format: float
      vit_b12:
        type: number
        format: float
      vit_b12_unit:
        type: string
        enum:
        - µg
      vit_b1_unit:
        type: string
        enum:
        - mg
      vit_b2:
        type: number
        format: float
      vit_b2_unit:
        type: string
        enum:
        - mg
      vit_b3:
        type: number
        format: float
      vit_b3_unit:
        type: string
        enum:
        - mg
      vit_b5:
        type: number
        format: float
      vit_b5_unit:
        type: string
        enum:
        - mg
      vit_b6:
        type: number
        format: float
      vit_b6_unit:
        type: string
        enum:
        - mg
      vit_c:
        type: number
        format: float
      vit_c_unit:
        type: string
        enum:
        - mg
      vit_d_iu:
        type: number
        format: float
      vit_d_mcg:
        type: number
        format: float
      vit_d_mcg_unit:
        type: string
        enum:
        - µg
      vit_e:
        type: number
        format: float
      vit_e_unit:
        type: string
        enum:
        - mg
      vit_k:
        type: number
        format: float
      vit_k_unit:
        type: string
        enum:
        - µg
      vivit_d_iu_unit:
        type: string
        enum:
        - IU
      zinc:
        type: number
        format: float
      zinc_unit:
        type: string
        enum:
        - mg
  FavRecipe:
    type:
      object
    properties:
      created:
        type: integer
        format: int64
      fav_recipe_id:
        type: integer
        format: int64
      owner_id:
        type: integer
        format: int64
      recipe_id:
        type: integer
        format: int64
      recipe_url:
        type: string
  NutritionInfo:
    type:
      object
    properties:
      Id:
        type: integer
        format: int64
      nutrient_id:
        type: integer
        format: int64
      nutrient_name:
        type: string
      benefits:
        type: string
      what_is:
        type: string
      description:
        type: string
  NutritionTip:
    type:
      object
    properties:
      tip_id:
        type: integer
        format: int64
      ability_id:
        type: integer
        description: Each food abilty is a general category nutrients provide benefits for, e.g. youthful consider nutrients which help with skin and hair.
        format: int64
#      reference_resource:
#        type: string
      nutrient_id:
        type: integer
        format: int64
      nutrient_name:
        type: string
      nutrient_key:
        type: string
      tip_category:
        type: string
      tip:
        description: The 'tip' text.
        type: array
        items:
          type: string
      weight:
        description: How applicable (i.e. how much does ) is this tip. This is a subjective value and takes into account papers puplished for and against the 'tip' in the context of the nutrient.
        type: integer
        format: int64
  FoodAbility:
    type:
      object
    properties:
      ability_id:
        type: integer
        format: int64
      min_dv:
        description: The minimum RDA a nutrient should provide before this tip becomes applicable. (TODO This should be in the nutrient tip, not here.)
        type: integer
        format: int32
      name:
        type: string
      short_description:
        description: A short description for the food ability. Useful when displaying this content as part of a limited display.
        type: string
      full_description:
        description: A longer more verbose description.
        type: string
      nutrition_tips:
        type: array
        items:
          "$ref" : "#/definitions/NutritionTip"
  PushDevice:
    type:
      object
    properties:
      push_device_id:
        type: integer
        format: int64
        minimum: 1
      owner_id:
        type: integer
        format: int64
        minimum: 1
      token:
        type: string
        minLength: 5
        maxLength: 254
      device:
        type: string
  IngredientDebug:
    allOf:
      - "$ref" : "#/definitions/Ingredient"
      - "$ref" : "#/definitions/IngredientParser"
  IngredientParser:
    type:
      object
    properties:
      ingredient_parser_id:
        type : integer
        format : int64
      matcher_id:
        type : integer
        format : int
      regex_id:
        type : integer
        format : int64
      multiple_s:
        type : string
      confidence:
        type: number
        format: float
      amount_s:
        type : string
      processed_line:
        type : string
      debug_output:
        type : string
  RecipeGroup:
    required:
    - name
    - slug
    description: A recipe group is a collection of recipes, where each recipe in the group is represented by a
                MenuItem (note the recipe_id foreign key in the MenuItem object). A recipe group provides the
                flixibilty of creating a group of recipes for any purpose. For example, if you want to provide a
                  recipe bookmarking service, you could create a particular recipe group, representing the collection
                  of recipes. And recipes can be added to the collection, represented by menu-items objects.
    type:
      object
    properties:
      category:
        x-tag:  gorm:"index"
        type: string
      created:
        type: integer
        format: int64
      description:
        type: string
      group_id:
        x-tag: gorm:"primary_key;not null"
        type: integer
        format: int64
      name:
        x-tag: gorm:"index;not null"
        type: string
        minLength: 2
      owner_id:
        type: integer
        x-tag: gorm:"index;not null"
        format: int64
      position:
        type: integer
        format: int32
      public:
        type: integer
        format: int64
      slug:
        description: This is a unique identifier for a recipe group. It can be something like a recipe name, a day of the week (to collect recipes for that day).
        x-tag: gorm:"unique_index;not null"
        minLength: 2
        type: string
      reference_id:
        description: Optional integer field which can be used to identify this group using a number. This is useful when the group refers to a date, and this value can be the unixtime stamp, alllowing searching based on this value.
        type: integer
        x-tag: gorm:"index;null"
        format: int64
      menu_items:
        x-tag: sql:"-"
        type: array
        items:
          "$ref" : "#/definitions/MenuItem"
  RecipeGroupInserter:
    type:
      object
    required:
    - recipe_group
    properties:
      add_to_group:
        type: boolean
      recipe_id:
        type: integer
        format: int64
        minimum: 1
      recipe_ids:
        type: array
        items:
          type: integer
          format: int64
      remove_old:
        type: boolean
      recipe_group:
        "$ref" : "#/definitions/RecipeGroup"
  FoodAlternative:
    type:
      object
    properties:
      alternative_id:
        type: integer
        format: int64
      food_a:
        type: integer
        format: int64
      food_b:
        type: integer
        format: int64
  FoodConfuseable:
    type:
      object
    properties:
      confuseable_id:
        type: integer
        format: int64
      food_a:
        type: integer
        format: int64
      food_b:
        type: integer
        format: int64
#  RecipesAndRecipeGroups:
#    allOf:
#      - "$ref" : "#/definitions/RecipeGroup"
#      - "$ref" : "#/definitions/MenuItem"
  AbbrevWithProvides:
    allOf:
    -  "$ref" : "#/definitions/NutritionAbbrev"
    type:
      object
    properties:
      provides:
        "$ref": "#/definitions/CountryRDA"
  ApiKey:
    type:
      object
    properties:
      api_key:
        type: string
      api_key_id:
        type: integer
        format: int64
      created:
        type: integer
        format: int64
      expire_reason:
        type: string
      expires:
        type: integer
        format: int64
      owner_id:
        type: integer
        format: int64
      valid:
        type: boolean
  User:
    type: object
    properties:
      user_id:
        x-tag: gorm:"primary_key"
        type: integer
        format: int64
        minimum: 1
      facebook_id:
        x-tag: sql:"index"  gorm:"default:NULL"
        type: string
      handle:
        type: string
        x-tag: sql:"index;default:NULL" gorm:"index;default:NULL"
      auth_user_id:
        x-tag: sql:"index"  gorm:"default:NULL"
        type: string
      firstName:
        type: string
      lastName:
        type: string
      locale:
        type: string
      country:
        type: string
      email:
        x-tag: sql:"index" gorm:"default:NULL"
        type: string
        pattern: "^.+@.+$"
        maxLength: 100
      password:
        type: string
        minLength: 2
        maxLength: 100
      gender:
        type: string
      api_key:
        x-tag: gorm:"default:NULL"
        type: string
      refresh_token:
        type: string
      picture_url:
        type: string
      uuid:
        type: string
        minLength: 2
        maxLength: 60
      phone:
        type: string
        minLength: 8
        maxLength: 10
      providers:
        type: array
        items:
          "$ref": "#/definitions/AuthProvider"
        x-tag: sql:"-"
      user_meta:
        x-tag: sql:"-"
        type: array
        items:
          "$ref": "#/definitions/UserMeta"
      last_checked_auth0:
        type: integer
        format: int64
        default: 0
      last_login:
        type: integer
        format: int64
        default: 0
      userStatus:
        type: integer
        format: int32
        default: 0
        maximum: 4
        minimum: 0
        exclusiveMaximum: true
        exclusiveMinimum: false
        description: User status used to inform the system if an account is disabled.
  FacebookSigninObject:
    type:
      object
    properties:
      access_token:
        type: string
  FacebookSignupObject:
    type:
      object
    properties:
      access_token:
        type: string
      password:
        type: string
  SigninObject:
    type:
      object
    properties:
      username:
        type: string
      password:
        type: string
  RecipeParseRequest:
    type:
      object
    properties:
      url:
        type: string
      page_source:
        type: string
      page_source_b:
        type: string
  SuggestUser:
    type:
      object
    properties:
      email:
        pattern: "^.+@.+$"
        type: string
      first_name:
        type: string
      handle:
        type: string
      last_name:
        type: string
      password:
        type: string
      source:
        type: string
  UserMeta:
    type:
      object
    required:
    - meta_key
    - meta_value
    properties:
      delete_key:
        x-tag: sql:"-"
        type: boolean
      meta_key:
        x-tag: gorm:"index;not null;"
        type: string
      user_id:
        x-tag: gorm:"index;not null;"
        type: integer
        format: int64
      user_meta_id:
        x-tag: gorm:"primary_key;not null;"
        type: integer
        format: int64
        minimum: 1
      meta_value:
        type: string
        x-tag: gorm:"type:mediumtext;"
      public_info:
        x-tag: gorm:"index;not null;default:0"
        default: false
        type: boolean
  UserStats:
    type:
      object
    properties:
      handle:
        type: string
      user_id:
        type: integer
        format: int64
      num_recipes:
        type: integer
        format: int32
      num_restaurants:
        type: integer
        format: int32
      num_followers:
        type: integer
        format: int32
  PlainString:
    type:
      object
    properties:
      text:
        type: string
  EmptyObject:
    type: "object"
    properties: {}
  AuthProvider:
    type: object
    properties:
      id:
        type: number
        format: int64
      first_name:
        type: string
      last_name:
        type: string
      email:
        type: string
      user_id:
        type: number
        format: int64
      access_token:
        type: string
      provider:
        type: string
      provider_id:
        type: string
parameters:
  includeNutritionParam:
    name: include-nutrition
    in: query
    description: Should the recipe's nutrition field be populated?
    required: false
    default: false
    type: boolean
  food-category:
    name: food-category
    in: query
    description: The food category.
    required: false
    default: false
    type: string
    enum:
    - meat-foods
    - fish-foods
    - dairy-foods
    - egg-foods
    - spices-and-herbs
    - baby-foods
    - fats-and-oils
    - soups-sauces-and-gravies
    - breakfast-cereals
    - fruit
    - vegetable
    - nuts-and-seeds
    - beverages
    - legumes
    - baked-products
    - sweets
    - cereal-grains-and-pasta
    - fast-foods
    - meals-entrees-and-side-dishes
    - snacks
    - other
    - restaurant-foods
  responseFields:
    name: fields
    in: query
    description: The recipe object fields to include in the response.
    required: false
    type: string
#    enum:
#    - description
#    - added
#    - categories
#    - category
#    - chow_rating
#    - cook_time
#    - creator
#    - cuisine
#    - image_url
#    - info
#    - ingredients
#    - instructions
#    - meal_type
#    - name
#    - num_ingredients
#    - oid
#    - owner_id
#    - portions
#    - prep_time
#    - provides
#    - public
#    - rating
#    - rating_count
#    - recipe_id
#    - source
#    - total_time
#    - unique_name
#    - url
#    - web_rating
#  sort-by:
#    name: sort-by
#    in: query
#    description: The recipe search results field to sort the results by.
#    required: false
#    default: calories
#    type: string
#    enum:
#    - folate_tot
#    - vit_d_iu
#    - choline_tot
#    - fiber_td
#    - vit_b5
#    - food_id
#    - water
#    - fluoride
#    - chloride
#    - zinc
#    - calories
#    - bioton
#    - chromium
#    - folate_dfe
#    - vit_a_rae
#    - lut_zea
#    - total_fat
#    - vit_b12
#    - vit_b3
#    - iron
#    - magnesium
#    - manganese
#    - mono_fat
#    - phosphorus
#    - vit_a_iu
#    - cholestrl
#    - sat_fat
#    - vit_b2
#    - vit_b6
#    - molybdenum
#    - beta_crypt
#    - carbs
#    - lycopene
#    - protein
#    - vit_k
#    - beta_carot
#    - sodium
#    - vit_c
#    - retinol
#    - iodine
#    - selenium
#    - total_sugar
#    - vit_b1
#    - ash
#    - calcium
#    - choline
#    - folic_acid
#    - food_weight
#    - alpha_carot
#    - potassium
#    - poly_fat
#    - vit_d_mcg
#    - vit_e
#    - food_folate
#    - copper
  include-common-names:
    name:   include-common-names
    in: query
    default: false
    description: Should the recipe's ingredient common names be included?
    required: false
    type: boolean
  include-recipe-categories:
    name: include-recipe-categories
    in: query
    default: false
    description: Should the recipe's categories be included? The Recipe categories include; vegan-friendly, vegetarion, pescatarian, gluten-free, low-fat, low-sat-fat, low-sugar.
    required: false
    type: boolean
  include-nutrition-per-portion:
    name: include-nutrition-per-portion
    in: query
    description: Should the recipe's nutrition per portion be included?
    default: false
    required: false
    type: boolean
  include-gda:
    name: include-gda
    in: query
    description: Should the general daily provision for the recipe be included?
    required: false
    default: false
    type: boolean
  include-nutrition-tips:
    name: include-nutrition-tips
    in: query
    description: Provide tips and information regarding the nutritional content for this recipe.
    required: false
    default: false
    type: boolean
  include-food-names:
    name: include-food-names
    in: query
    description: Should the recipe's ingredient food names be included (this is
      different from the common names since the storage is a map, where key is
      the foodId and value is the ingredient common name)
    required: false
    default: false
    type: boolean
  include-food-id:
    name: include-food-id
    in: query
    description: Should the recipe's ingredient food id's be included? This can be useful if you need the names of foods as a map, where the key is the food id, the value the food name.
    required: false
    default: false
    type: boolean
  include-recipe:
    name: include-recipe
    in: query
    description: Should the menu-item's recipe object (1-to-1 relationship) be included in the menu-item object?
    required: false
    default: false
    type: boolean
  include-menu-items:
    name: include-menu-items
    in: query
    description: Should the recipe-group's menu items (1-to-many relationship) be included in the recipe-group object?
    required: false
    default: false
    type: boolean
  offset:
    in: query
    description: The offset into search results.
    name: offset
    minimum: 0
    required: false
    type: integer
    format: int64
  limit:
    in: query
    description: Limit the number of results returned.
    name: limit
    minimum: 0
    required: false
    type: integer
    format: int32
  country:
    in: query
    description: The country code which the RDA should reflect.
    name: country
    default: uk
    required: false
    type: string
    minLength: 1
  gender:
    in: query
    description: The gender for which the RDA should apply.
    name: gender
    required: false
    default: male
    type: string
    enum:
    - male
    - female
  calories:
    in: query
    description: This value must have a preceeding operator before the number of calories to indicate
      the search type; > < >= <= are valid. For example, if you want to search for anything with less
      than X calories per portion, you could use a value of '<300' and this would result in a result
      set which includes calories less than 300 calories. You can add more calories search by using
      the & or the | boolean logic operators.
    name: calories
    required: false
    type: string
  protein:
    in: query
    description: This value must have a preceeding operator before the number of calories to indicate
      the search type; > < >= <= are valid. For example, if you want to search for anything with less
      than X calories per portion, you could use a value of '<300' and this would result in a result
      set which includes calories less than 300 calories. You can add more calories search by using
      the & or the | boolean logic operators.
    name: protein
    required: false
    type: string
  total-fat:
    in: query
    description: This value must have a preceeding operator before the number of calories to indicate
      the search type; > < >= <= are valid. For example, if you want to search for anything with less
      than X calories per portion, you could use a value of '<300' and this would result in a result
      set which includes calories less than 300 calories. You can add more calories search by using
      the & or the | boolean logic operators.
    name: total-fat
    required: false
    type: string
  vegan-friendly:
    in: query
    description: List only recipes which have ingredients that are vegan friendly.
    name: vegan-friendly
    required: false
    type: boolean
  vegetarian:
    in: query
    description: List only recipes which have ingredients that are vegetarian friendly.
    name: vegetarian
    required: false
    type: boolean
  pescatarian:
    in: query
    description: List only recipes which have ingredients that are pescatarianfriendly.
    name: pescatarian
    required: false
    type: boolean
  gluten-free:
    in: query
    description: List only recipes which have ingredients that are gluten free.
    name: gluten-free
    required: false
    type: boolean
  quick-and-easy:
    in: query
    description: List only recipes which are quick and easy to cook.
    name: quick-and-easy
    required: false
    type: boolean
  low-fat:
    in: query
    description: List only recipes which are low in fat.
    name: low-fat
    required: false
    type: boolean
  low-sat-fat:
    in: query
    description: List only recipes which are low in saturated fat.
    name: low-sat-fat
    required: false
    type: boolean
  low-sugar:
    in: query
    description: List only recipes which are low in sugar.
    name: low-sugar
    required: false
    type: boolean
  has-nuts:
    in: query
    description: List only recipes which has-nuts.
    name: has-nuts
    required: false
    type: boolean
  has-eggs:
    in: query
    description: List only recipes which has-eggs.
    name: has-eggs
    required: false
    type: boolean
  has-sugar:
    in: query
    description: List only recipes which has high sugar levels.
    name: has-sugar
    required: false
    type: boolean
  has-fruit:
    in: query
    description: List only recipes which has fruit.
    name: has-fruit
    required: false
    type: boolean
  has-dairy:
    in: query
    description: List only recipes which has dairy.
    name: has-dairy
    required: false
    type: boolean
  has-meat:
    in: query
    description: List only recipes which has meat (non fish meats).
    name: has-meat
    required: false
    type: boolean
  has-ceral:
    in: query
    description: List only recipes which has ceral.
    name: has-ceral
    required: false
    type: boolean
  has-alcohol:
    in: query
    description: List only recipes which has alcohol.
    name: has-alcohol
    required: false
    type: boolean
  is-dinner:
    in: query
    description: List only recipes which has alcohol.
    name: is-dinner
    required: false
    type: boolean
  is-condiment:
    in: query
    description: Include/exclude recipes which are condiments.
    name: is-condiment
    required: false
    type: boolean
  condiments:
    in: query
    description: List only condiments.
    name: condiments
    required: false
    type: boolean
  dinner:
    in: query
    description: List only dinners. Usually 1 source of protein (meat OR fish OR lentils OR chickpeas for example) and at least 2 vegetables.
    name: dinner
    required: false
    type: boolean
  sweet-food:
    in: query
    description: List only sweet recipes.
    name: sweet-food
    required: false
    type: boolean
  savory-food:
    in: query
    description: List only savory recipes.
    name: savory-food
    required: false
    type: boolean
  hasImage:
    name: hasImage
    in: query
    description: Only include recipes that have valid recipe images?
    required: false
    type: boolean
  allowNumMissingIngredients:
    name: allowNumMissingIngredients
    in: query
    description: When searching for recipes via the ingredients (i.e. food IDs), allow up to this number of the ingredients to be missing. The higher this number, the slower the response will be since more results are scanned.
    required: false
    default: 7
    type: number
    format: int16
    minimum: 0
    maximum: 1000
  recipeName:
    in: query
    description: Search the recipe name, used as a wild card on the name column like so; '%name%'
    name: recipeName
    required: false
    type: string
    minLength: 2
  saveRecipe:
    in: query
    description: Save the ingredients to the recipe database.
    name: saveRecipe
    required: false
    type: boolean
  recipeId:
    in : path
    description: The recipe ID which the nutritional label should be calculated from. This can either be the recipe's integer recipe ID (the primary key) or it's string oid.
    name: recipeId
    required: true
    type: string
  recipeIdQuery:
    in : query
    description: The recipe ID which the nutritional label should be calculated from. This can either be the recipe's integer recipe ID (the primary key) or it's string oid.
    name: recipeId
    required: true
    type: string
  portionSize:
    in: query
    description: How large do you want the portions to be? The recipe creators will often decide how many portions a recipe will produce, when following the instructions. However, some people have healthier appetites than others, so this parameter allows control of this element of the recipe. This value is in gramms.
    name: portionSize
    required: false
    type: integer
    format: int32
    minimum: 1
    maximum: 10000
  portions:
    in: query
    description: The number of portions the parsed ingredients will create.
    name: portions
    required: false
    minimum: 1
    maximum: 1000
    type: integer
    format: int32
  ingredient:
    in: query
    description: Search the list of ingredients in each recipe. The value is used as a wild card on the ingredient line as typed in by a human operator.
    name: ingredient
    required: false
    type: string
  foodIds:
    in: query
    description: A comma separated list of food IDs which each recipe should contain.
    name: foodIds
    required: false
    type: string
  generalSortby:
    in: query
    description: The sort by field, which is an string and not an enum.
    name: sortby
    default: calories
    type: string
  nutritionSortby:
    in: query
    description: The nutrition field to sort by.
    name: nutrition-sortby
    default: calories
    type: string
    enum:
    - folate_tot
    - vit_d_iu
    - choline_tot
    - fiber_td
    - vit_b5
    - food_id
    - water
    - fluoride
    - chloride
    - zinc
    - calories
    - bioton
    - chromium
    - folate_dfe
    - vit_a_rae
    - lut_zea
    - total_fat
    - vit_b12
    - vit_b3
    - iron
    - magnesium
    - manganese
    - mono_fat
    - phosphorus
    - vit_a_iu
    - cholestrl
    - sat_fat
    - vit_b2
    - vit_b6
    - molybdenum
    - beta_crypt
    - carbs
    - lycopene
    - protein
    - vit_k
    - beta_carot
    - sodium
    - vit_c
    - retinol
    - iodine
    - selenium
    - total_sugar
    - vit_b1
    - ash
    - calcium
    - choline
    - folic_acid
    - food_weight
    - alpha_carot
    - potassium
    - poly_fat
    - vit_d_mcg
    - vit_e
    - food_folate
    - copper
  narrowRecipeSortby:
    in: query
    description: The nutrition field to sort by.
    name: sortby
    default: name
    type: string
    enum:
      - recipe_id
      - owner_id
      - name
      - num_ingredients
      - cook_time
      - prep_time
      - total_time
      - creator
      - source
      - portions
      - category
      - rating_present
      - rating_value
      - rating_count
      - cuisine
      - meal_type
      - average_rating
      - rating
      - chow_rating
      - has_image
      - web_rating
  recipeSortby:
    in: query
    description: The nutrition field to sort by.
    name: sortby
    default: calories
    type: string
    enum:
    - name
    - recipe_id
    - rating
    - total_time
    - prep_time
    - cook_time
    - owner_id
    - num_ingredients
    - added
    - creator
    - category
    - parsed
    - folate_tot
    - vit_d_iu
    - choline_tot
    - fiber_td
    - vit_b5
    - food_id
    - water
    - fluoride
    - chloride
    - zinc
    - calories
    - bioton
    - chromium
    - folate_dfe
    - vit_a_rae
    - lut_zea
    - total_fat
    - vit_b12
    - vit_b3
    - iron
    - magnesium
    - manganese
    - mono_fat
    - phosphorus
    - vit_a_iu
    - cholestrl
    - sat_fat
    - vit_b2
    - vit_b6
    - molybdenum
    - beta_crypt
    - carbs
    - lycopene
    - protein
    - vit_k
    - beta_carot
    - sodium
    - vit_c
    - retinol
    - iodine
    - selenium
    - total_sugar
    - vit_b1
    - ash
    - calcium
    - choline
    - folic_acid
    - food_weight
    - alpha_carot
    - potassium
    - poly_fat
    - vit_d_mcg
    - vit_e
    - food_folate
    - copper
  sortdir:
    in: query
    description: The sort direction for the results.
    name: sortdir
    default: desc
    type: string
    enum:
    - desc
    - asc
  ownerId:
    in: query
    description: The owner's primary key.
    name: ownerId
    required: false
    type: integer
    minimum: 0
    format: int64
  ownerHandle:
    in: query
    description: The owner's unique handle.
    name: ownerHandle
    required: false
    type: string
    minLength: 2
securityDefinitions:
  chow_auth:
    type: apiKey
    name: authorization
    in: header
  chow_optional_auth:
    type: apiKey
    name: authorization
    in: header
